<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="file:/Users/fredatherden/xspec/src/reporter/format-xspec-report.xsl"?>
<x:report xmlns:test="http://www.jenitennison.com/xslt/unit-test"
          xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
          xmlns:x="http://www.jenitennison.com/xslt/xspec"
          xmlns:ali="http://www.niso.org/schemas/ali/1.0/"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:saxon="http://saxon.sf.net/"
          xmlns:dc="http://purl.org/dc/terms/"
          xmlns:e="https://elifesciences.org/namespace"
          xmlns:file="java.io.File"
          xmlns:java="http://www.java.com/"
          stylesheet="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/xspec/schematron.sch-preprocessed.xsl"
          date="2019-09-04T15:48:12.597+01:00"
          xspec="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/xspec/schematron.xspec"
          schematron="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/xspec/schematron.sch">
   <x:scenario>
      <x:label/>
      <x:scenario>
         <x:label>article-tests</x:label>
         <x:scenario>
            <x:label>dtd-info-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/dtd-info/pass.xml"/>
            <x:result href="result-d9.xml"/>
            <x:test successful="true">
               <x:label>not report dtd-info info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dtd-info'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dtd-info-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/dtd-info/fail.xml"/>
            <x:result href="result-d18.xml"/>
            <x:test successful="true">
               <x:label>report dtd-info info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dtd-info'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-type-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-type/pass.xml"/>
            <x:result href="result-d27.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-type error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-type'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-type-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-type/fail.xml"/>
            <x:result href="result-d36.xml"/>
            <x:test successful="true">
               <x:label>assert test-article-type error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-type'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-front-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-front/pass.xml"/>
            <x:result href="result-d45.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-front error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-front'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-front-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-front/fail.xml"/>
            <x:result href="result-d54.xml"/>
            <x:test successful="true">
               <x:label>assert test-article-front error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-front'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-body-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-body/pass.xml"/>
            <x:result href="result-d63.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-body error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-body'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-body-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-body/fail.xml"/>
            <x:result href="result-d72.xml"/>
            <x:test successful="true">
               <x:label>assert test-article-body error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-body'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-back-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-back/pass.xml"/>
            <x:result href="result-d81.xml"/>
            <x:test successful="true">
               <x:label>not report test-article-back error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-back'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-back-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-back/fail.xml"/>
            <x:result href="result-d90.xml"/>
            <x:test successful="true">
               <x:label>report test-article-back error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-back'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>research-article</x:label>
         <x:scenario>
            <x:label>pre-test-r-article-d-letter-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-article/pre-test-r-article-d-letter/pass.xml"/>
            <x:result href="result-d99.xml"/>
            <x:test successful="true">
               <x:label>not report pre-test-r-article-d-letter warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-test-r-article-d-letter'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert research-article-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-article-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-test-r-article-d-letter-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-article/pre-test-r-article-d-letter/fail.xml"/>
            <x:result href="result-d108.xml"/>
            <x:test successful="true">
               <x:label>report pre-test-r-article-d-letter warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-test-r-article-d-letter'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert research-article-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-article-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-test-r-article-d-letter-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-article/final-test-r-article-d-letter/pass.xml"/>
            <x:result href="result-d117.xml"/>
            <x:test successful="true">
               <x:label>not report final-test-r-article-d-letter error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-test-r-article-d-letter'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert research-article-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-article-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-test-r-article-d-letter-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-article/final-test-r-article-d-letter/fail.xml"/>
            <x:result href="result-d126.xml"/>
            <x:test successful="true">
               <x:label>report final-test-r-article-d-letter error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-test-r-article-d-letter'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert research-article-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-article-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-r-article-a-reply-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-article/test-r-article-a-reply/pass.xml"/>
            <x:result href="result-d135.xml"/>
            <x:test successful="true">
               <x:label>not report test-r-article-a-reply warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-r-article-a-reply'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert research-article-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-article-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-r-article-a-reply-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-article/test-r-article-a-reply/fail.xml"/>
            <x:result href="result-d144.xml"/>
            <x:test successful="true">
               <x:label>report test-r-article-a-reply warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-r-article-a-reply'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert research-article-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-article-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-front</x:label>
         <x:scenario>
            <x:label>test-front-jmeta-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-front/test-front-jmeta/pass.xml"/>
            <x:result href="result-d153.xml"/>
            <x:test successful="true">
               <x:label>not assert test-front-jmeta error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-jmeta'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-front-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-front-jmeta-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-front/test-front-jmeta/fail.xml"/>
            <x:result href="result-d162.xml"/>
            <x:test successful="true">
               <x:label>assert test-front-jmeta error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-jmeta'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-front-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-front-ameta-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-front/test-front-ameta/pass.xml"/>
            <x:result href="result-d171.xml"/>
            <x:test successful="true">
               <x:label>not assert test-front-ameta error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-ameta'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-front-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-front-ameta-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-front/test-front-ameta/fail.xml"/>
            <x:result href="result-d180.xml"/>
            <x:test successful="true">
               <x:label>assert test-front-ameta error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-ameta'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-front-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-journal-meta</x:label>
         <x:scenario>
            <x:label>test-journal-nlm-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-nlm/pass.xml"/>
            <x:result href="result-d189.xml"/>
            <x:test successful="true">
               <x:label>not assert test-journal-nlm error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-nlm'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-nlm-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-nlm/fail.xml"/>
            <x:result href="result-d198.xml"/>
            <x:test successful="true">
               <x:label>assert test-journal-nlm error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-nlm'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-1/pass.xml"/>
            <x:result href="result-d207.xml"/>
            <x:test successful="true">
               <x:label>not assert test-journal-pubid-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-1/fail.xml"/>
            <x:result href="result-d216.xml"/>
            <x:test successful="true">
               <x:label>assert test-journal-pubid-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-2/pass.xml"/>
            <x:result href="result-d225.xml"/>
            <x:test successful="true">
               <x:label>not assert test-journal-pubid-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-2/fail.xml"/>
            <x:result href="result-d234.xml"/>
            <x:test successful="true">
               <x:label>assert test-journal-pubid-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-3/pass.xml"/>
            <x:result href="result-d243.xml"/>
            <x:test successful="true">
               <x:label>not assert test-journal-pubid-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-3/fail.xml"/>
            <x:result href="result-d252.xml"/>
            <x:test successful="true">
               <x:label>assert test-journal-pubid-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-4/pass.xml"/>
            <x:result href="result-d261.xml"/>
            <x:test successful="true">
               <x:label>not assert test-journal-pubid-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-4/fail.xml"/>
            <x:result href="result-d270.xml"/>
            <x:test successful="true">
               <x:label>assert test-journal-pubid-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-article-metadata</x:label>
         <x:scenario>
            <x:label>test-article-id-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-id/pass.xml"/>
            <x:result href="result-d280.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-id error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-id'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-id-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-id/fail.xml"/>
            <x:result href="result-d289.xml"/>
            <x:test successful="true">
               <x:label>assert test-article-id error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-id'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-doi-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-doi-1/pass.xml"/>
            <x:result href="result-d298.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-doi-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-doi-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-doi-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-doi-1/fail.xml"/>
            <x:result href="result-d307.xml"/>
            <x:test successful="true">
               <x:label>assert test-article-doi-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-doi-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-doi-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-doi-2/pass.xml"/>
            <x:result href="result-d316.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-doi-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-doi-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-doi-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-doi-2/fail.xml"/>
            <x:result href="result-d325.xml"/>
            <x:test successful="true">
               <x:label>assert test-article-doi-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-doi-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-presence/pass.xml"/>
            <x:result href="result-d334.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-presence/fail.xml"/>
            <x:result href="result-d343.xml"/>
            <x:test successful="true">
               <x:label>assert test-article-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-title-group-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-title-group-presence/pass.xml"/>
            <x:result href="result-d352.xml"/>
            <x:test successful="true">
               <x:label>not assert test-title-group-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-title-group-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-title-group-presence/fail.xml"/>
            <x:result href="result-d361.xml"/>
            <x:test successful="true">
               <x:label>assert test-title-group-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-epub-date-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-epub-date/pass.xml"/>
            <x:result href="result-d370.xml"/>
            <x:test successful="true">
               <x:label>not assert test-epub-date error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-epub-date'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-epub-date-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-epub-date/fail.xml"/>
            <x:result href="result-d379.xml"/>
            <x:test successful="true">
               <x:label>assert test-epub-date error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-epub-date'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-pub-collection-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-pub-collection-presence/pass.xml"/>
            <x:result href="result-d388.xml"/>
            <x:test successful="true">
               <x:label>not assert test-pub-collection-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-pub-collection-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-pub-collection-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-pub-collection-presence/fail.xml"/>
            <x:result href="result-d397.xml"/>
            <x:test successful="true">
               <x:label>assert test-pub-collection-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-pub-collection-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-volume-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-volume-presence/pass.xml"/>
            <x:result href="result-d406.xml"/>
            <x:test successful="true">
               <x:label>not assert test-volume-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-volume-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-volume-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-volume-presence/fail.xml"/>
            <x:result href="result-d415.xml"/>
            <x:test successful="true">
               <x:label>assert test-volume-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-volume-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-volume-contents-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-volume-contents/pass.xml"/>
            <x:result href="result-d424.xml"/>
            <x:test successful="true">
               <x:label>not assert test-volume-contents error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-volume-contents'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-volume-contents-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-volume-contents/fail.xml"/>
            <x:result href="result-d433.xml"/>
            <x:test successful="true">
               <x:label>assert test-volume-contents error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-volume-contents'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-elocation-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-elocation-presence/pass.xml"/>
            <x:result href="result-d442.xml"/>
            <x:test successful="true">
               <x:label>not assert test-elocation-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-elocation-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-elocation-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-elocation-presence/fail.xml"/>
            <x:result href="result-d451.xml"/>
            <x:test successful="true">
               <x:label>assert test-elocation-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-elocation-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-presence/pass.xml"/>
            <x:result href="result-d460.xml"/>
            <x:test successful="true">
               <x:label>not report test-self-uri-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-presence/fail.xml"/>
            <x:result href="result-d469.xml"/>
            <x:test successful="true">
               <x:label>report test-self-uri-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-att-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-att/pass.xml"/>
            <x:result href="result-d478.xml"/>
            <x:test successful="true">
               <x:label>not report test-self-uri-att error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-att'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-att-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-att/fail.xml"/>
            <x:result href="result-d487.xml"/>
            <x:test successful="true">
               <x:label>report test-self-uri-att error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-att'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-pdf-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-pdf-1/pass.xml"/>
            <x:result href="result-d496.xml"/>
            <x:test successful="true">
               <x:label>not report test-self-uri-pdf-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-pdf-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-pdf-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-pdf-1/fail.xml"/>
            <x:result href="result-d505.xml"/>
            <x:test successful="true">
               <x:label>report test-self-uri-pdf-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-pdf-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-pdf-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-pdf-2/pass.xml"/>
            <x:result href="result-d514.xml"/>
            <x:test successful="true">
               <x:label>not report test-self-uri-pdf-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-pdf-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-pdf-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-pdf-2/fail.xml"/>
            <x:result href="result-d523.xml"/>
            <x:test successful="true">
               <x:label>report test-self-uri-pdf-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-pdf-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-history-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-history-presence/pass.xml"/>
            <x:result href="result-d532.xml"/>
            <x:test successful="true">
               <x:label>not report test-history-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-history-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-history-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-history-presence/fail.xml"/>
            <x:result href="result-d541.xml"/>
            <x:test successful="true">
               <x:label>report test-history-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-history-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-permissions-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-permissions-presence/pass.xml"/>
            <x:result href="result-d550.xml"/>
            <x:test successful="true">
               <x:label>not assert test-permissions-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-permissions-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-permissions-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-permissions-presence/fail.xml"/>
            <x:result href="result-d559.xml"/>
            <x:test successful="true">
               <x:label>assert test-permissions-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-permissions-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-abstracts-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-abstracts/pass.xml"/>
            <x:result href="result-d568.xml"/>
            <x:test successful="true">
               <x:label>not report test-abstracts error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-abstracts'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-abstracts-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-abstracts/fail.xml"/>
            <x:result href="result-d577.xml"/>
            <x:test successful="true">
               <x:label>report test-abstracts error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-abstracts'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-no-digest-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-no-digest/pass.xml"/>
            <x:result href="result-d586.xml"/>
            <x:test successful="true">
               <x:label>not report test-no-digest error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-no-digest'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-no-digest-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-no-digest/fail.xml"/>
            <x:result href="result-d595.xml"/>
            <x:test successful="true">
               <x:label>report test-no-digest error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-no-digest'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-funding-group-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-funding-group-presence/pass.xml"/>
            <x:result href="result-d604.xml"/>
            <x:test successful="true">
               <x:label>not report test-funding-group-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-funding-group-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-funding-group-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-funding-group-presence/fail.xml"/>
            <x:result href="result-d613.xml"/>
            <x:test successful="true">
               <x:label>report test-funding-group-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-funding-group-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-custom-meta-group-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-custom-meta-group-presence/pass.xml"/>
            <x:result href="result-d622.xml"/>
            <x:test successful="true">
               <x:label>not report test-custom-meta-group-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-custom-meta-group-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-custom-meta-group-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-custom-meta-group-presence/fail.xml"/>
            <x:result href="result-d631.xml"/>
            <x:test successful="true">
               <x:label>report test-custom-meta-group-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-custom-meta-group-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-auth-kwd-group-presence-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-auth-kwd-group-presence-1/pass.xml"/>
            <x:result href="result-d640.xml"/>
            <x:test successful="true">
               <x:label>not report test-auth-kwd-group-presence-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-auth-kwd-group-presence-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-auth-kwd-group-presence-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-auth-kwd-group-presence-1/fail.xml"/>
            <x:result href="result-d649.xml"/>
            <x:test successful="true">
               <x:label>report test-auth-kwd-group-presence-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-auth-kwd-group-presence-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-auth-kwd-group-presence-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-auth-kwd-group-presence-2/pass.xml"/>
            <x:result href="result-d658.xml"/>
            <x:test successful="true">
               <x:label>not report test-auth-kwd-group-presence-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-auth-kwd-group-presence-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-auth-kwd-group-presence-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-auth-kwd-group-presence-2/fail.xml"/>
            <x:result href="result-d667.xml"/>
            <x:test successful="true">
               <x:label>report test-auth-kwd-group-presence-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-auth-kwd-group-presence-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-ro-kwd-group-presence-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-ro-kwd-group-presence-1/pass.xml"/>
            <x:result href="result-d676.xml"/>
            <x:test successful="true">
               <x:label>not report test-ro-kwd-group-presence-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-ro-kwd-group-presence-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-ro-kwd-group-presence-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-ro-kwd-group-presence-1/fail.xml"/>
            <x:result href="result-d685.xml"/>
            <x:test successful="true">
               <x:label>report test-ro-kwd-group-presence-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-ro-kwd-group-presence-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-ro-kwd-group-presence-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-ro-kwd-group-presence-2/pass.xml"/>
            <x:result href="result-d694.xml"/>
            <x:test successful="true">
               <x:label>not report test-ro-kwd-group-presence-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-ro-kwd-group-presence-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-ro-kwd-group-presence-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-ro-kwd-group-presence-2/fail.xml"/>
            <x:result href="result-d703.xml"/>
            <x:test successful="true">
               <x:label>report test-ro-kwd-group-presence-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-ro-kwd-group-presence-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-research-article-metadata</x:label>
         <x:scenario>
            <x:label>test-contrib-group-presence-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-research-article-metadata/test-contrib-group-presence-1/pass.xml"/>
            <x:result href="result-d712.xml"/>
            <x:test successful="true">
               <x:label>not assert test-contrib-group-presence-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-presence-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-research-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-research-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-contrib-group-presence-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-research-article-metadata/test-contrib-group-presence-1/fail.xml"/>
            <x:result href="result-d721.xml"/>
            <x:test successful="true">
               <x:label>assert test-contrib-group-presence-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-presence-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-research-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-research-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-contrib-group-presence-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-research-article-metadata/test-contrib-group-presence-2/pass.xml"/>
            <x:result href="result-d730.xml"/>
            <x:test successful="true">
               <x:label>not assert test-contrib-group-presence-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-presence-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-research-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-research-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-contrib-group-presence-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-research-article-metadata/test-contrib-group-presence-2/fail.xml"/>
            <x:result href="result-d739.xml"/>
            <x:test successful="true">
               <x:label>assert test-contrib-group-presence-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-presence-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-research-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-research-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-article-categories</x:label>
         <x:scenario>
            <x:label>disp-subj-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/disp-subj-test/pass.xml"/>
            <x:result href="result-d748.xml"/>
            <x:test successful="true">
               <x:label>not assert disp-subj-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/disp-subj-test/fail.xml"/>
            <x:result href="result-d757.xml"/>
            <x:test successful="true">
               <x:label>assert disp-subj-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-test2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/disp-subj-test2/pass.xml"/>
            <x:result href="result-d766.xml"/>
            <x:test successful="true">
               <x:label>not assert disp-subj-test2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-test2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-test2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/disp-subj-test2/fail.xml"/>
            <x:result href="result-d775.xml"/>
            <x:test successful="true">
               <x:label>assert disp-subj-test2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-test2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-test1/pass.xml"/>
            <x:result href="result-d784.xml"/>
            <x:test successful="true">
               <x:label>not report head-subj-test1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-test1/fail.xml"/>
            <x:result href="result-d793.xml"/>
            <x:test successful="true">
               <x:label>report head-subj-test1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-test2/pass.xml"/>
            <x:result href="result-d802.xml"/>
            <x:test successful="true">
               <x:label>not report head-subj-test2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-test2/fail.xml"/>
            <x:result href="result-d811.xml"/>
            <x:test successful="true">
               <x:label>report head-subj-test2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-test3/pass.xml"/>
            <x:result href="result-d820.xml"/>
            <x:test successful="true">
               <x:label>not report head-subj-test3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-test3/fail.xml"/>
            <x:result href="result-d829.xml"/>
            <x:test successful="true">
               <x:label>report head-subj-test3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-distinct-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-distinct-test/pass.xml"/>
            <x:result href="result-d838.xml"/>
            <x:test successful="true">
               <x:label>not assert head-subj-distinct-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-distinct-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-distinct-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-distinct-test/fail.xml"/>
            <x:result href="result-d847.xml"/>
            <x:test successful="true">
               <x:label>assert head-subj-distinct-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-distinct-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>disp-channel-checks</x:label>
         <x:scenario>
            <x:label>disp-subj-value-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-1/pass.xml"/>
            <x:result href="result-d856.xml"/>
            <x:test successful="true">
               <x:label>not assert disp-subj-value-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-1/fail.xml"/>
            <x:result href="result-d865.xml"/>
            <x:test successful="true">
               <x:label>assert disp-subj-value-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-2/pass.xml"/>
            <x:result href="result-d874.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-2/fail.xml"/>
            <x:result href="result-d883.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-3/pass.xml"/>
            <x:result href="result-d892.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-3/fail.xml"/>
            <x:result href="result-d901.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-4/pass.xml"/>
            <x:result href="result-d910.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-4/fail.xml"/>
            <x:result href="result-d919.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-5/pass.xml"/>
            <x:result href="result-d928.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-5/fail.xml"/>
            <x:result href="result-d937.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-6/pass.xml"/>
            <x:result href="result-d946.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-6/fail.xml"/>
            <x:result href="result-d955.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-7/pass.xml"/>
            <x:result href="result-d964.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-7/fail.xml"/>
            <x:result href="result-d973.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-8/pass.xml"/>
            <x:result href="result-d982.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-8/fail.xml"/>
            <x:result href="result-d991.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>MSA-checks</x:label>
         <x:scenario>
            <x:label>head-subj-MSA-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/MSA-checks/head-subj-MSA-test/pass.xml"/>
            <x:result href="result-d1000.xml"/>
            <x:test successful="true">
               <x:label>not assert head-subj-MSA-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-MSA-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert MSA-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'MSA-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-MSA-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/MSA-checks/head-subj-MSA-test/fail.xml"/>
            <x:result href="result-d1009.xml"/>
            <x:test successful="true">
               <x:label>assert head-subj-MSA-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-MSA-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert MSA-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'MSA-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>head-subj-checks</x:label>
         <x:scenario>
            <x:label>head-subj-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/head-subj-checks/head-subj-test-1/pass.xml"/>
            <x:result href="result-d1018.xml"/>
            <x:test successful="true">
               <x:label>not assert head-subj-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert head-subj-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/head-subj-checks/head-subj-test-1/fail.xml"/>
            <x:result href="result-d1027.xml"/>
            <x:test successful="true">
               <x:label>assert head-subj-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert head-subj-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/head-subj-checks/head-subj-test-2/pass.xml"/>
            <x:result href="result-d1036.xml"/>
            <x:test successful="true">
               <x:label>not report head-subj-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert head-subj-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/head-subj-checks/head-subj-test-2/fail.xml"/>
            <x:result href="result-d1045.xml"/>
            <x:test successful="true">
               <x:label>report head-subj-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert head-subj-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-title-group</x:label>
         <x:scenario>
            <x:label>article-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-1/pass.xml"/>
            <x:result href="result-d1054.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-1/fail.xml"/>
            <x:result href="result-d1063.xml"/>
            <x:test successful="true">
               <x:label>report article-title-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-2/pass.xml"/>
            <x:result href="result-d1072.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-2/fail.xml"/>
            <x:result href="result-d1081.xml"/>
            <x:test successful="true">
               <x:label>report article-title-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-3/pass.xml"/>
            <x:result href="result-d1090.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-3/fail.xml"/>
            <x:result href="result-d1099.xml"/>
            <x:test successful="true">
               <x:label>report article-title-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-4/pass.xml"/>
            <x:result href="result-d1108.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-4/fail.xml"/>
            <x:result href="result-d1117.xml"/>
            <x:test successful="true">
               <x:label>report article-title-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-5/pass.xml"/>
            <x:result href="result-d1126.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-5/fail.xml"/>
            <x:result href="result-d1135.xml"/>
            <x:test successful="true">
               <x:label>report article-title-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-6/pass.xml"/>
            <x:result href="result-d1144.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-6/fail.xml"/>
            <x:result href="result-d1153.xml"/>
            <x:test successful="true">
               <x:label>report article-title-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-7/pass.xml"/>
            <x:result href="result-d1162.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-7/fail.xml"/>
            <x:result href="result-d1171.xml"/>
            <x:test successful="true">
               <x:label>report article-title-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-8/pass.xml"/>
            <x:result href="result-d1180.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-8/fail.xml"/>
            <x:result href="result-d1189.xml"/>
            <x:test successful="true">
               <x:label>report article-title-test-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-9/pass.xml"/>
            <x:result href="result-d1198.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-9/fail.xml"/>
            <x:result href="result-d1207.xml"/>
            <x:test successful="true">
               <x:label>report article-title-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-10-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-10/pass.xml"/>
            <x:result href="result-d1216.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-10 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-10-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-10/fail.xml"/>
            <x:result href="result-d1225.xml"/>
            <x:test successful="true">
               <x:label>report article-title-test-10 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-11-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-11/pass.xml"/>
            <x:result href="result-d1234.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-11 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-11-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-11/fail.xml"/>
            <x:result href="result-d1243.xml"/>
            <x:test successful="true">
               <x:label>report article-title-test-11 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-12-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-12/pass.xml"/>
            <x:result href="result-d1252.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-12 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-12-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-12/fail.xml"/>
            <x:result href="result-d1261.xml"/>
            <x:test successful="true">
               <x:label>report article-title-test-12 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-contrib-group</x:label>
         <x:scenario>
            <x:label>contrib-presence-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-contrib-group/contrib-presence-test/pass.xml"/>
            <x:result href="result-d1270.xml"/>
            <x:test successful="true">
               <x:label>not assert contrib-presence-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-contrib-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-presence-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-contrib-group/contrib-presence-test/fail.xml"/>
            <x:result href="result-d1279.xml"/>
            <x:test successful="true">
               <x:label>assert contrib-presence-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-contrib-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-count-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-contrib-group/equal-count-test/pass.xml"/>
            <x:result href="result-d1288.xml"/>
            <x:test successful="true">
               <x:label>not report equal-count-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-count-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-contrib-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-count-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-contrib-group/equal-count-test/fail.xml"/>
            <x:result href="result-d1297.xml"/>
            <x:test successful="true">
               <x:label>report equal-count-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-count-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert test-contrib-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>name-tests</x:label>
         <x:scenario>
            <x:label>surname-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-tests/surname-test-1/pass.xml"/>
            <x:result href="result-d1306.xml"/>
            <x:test successful="true">
               <x:label>not assert surname-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-tests/surname-test-1/fail.xml"/>
            <x:result href="result-d1315.xml"/>
            <x:test successful="true">
               <x:label>assert surname-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-tests/given-names-test-1/pass.xml"/>
            <x:result href="result-d1324.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-tests/given-names-test-1/fail.xml"/>
            <x:result href="result-d1333.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-tests/given-names-test-2/pass.xml"/>
            <x:result href="result-d1342.xml"/>
            <x:test successful="true">
               <x:label>not assert given-names-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-tests/given-names-test-2/fail.xml"/>
            <x:result href="result-d1351.xml"/>
            <x:test successful="true">
               <x:label>assert given-names-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>surname-tests</x:label>
         <x:scenario>
            <x:label>surname-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-2/pass.xml"/>
            <x:result href="result-d1360.xml"/>
            <x:test successful="true">
               <x:label>not report surname-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-2/fail.xml"/>
            <x:result href="result-d1369.xml"/>
            <x:test successful="true">
               <x:label>report surname-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-3/pass.xml"/>
            <x:result href="result-d1378.xml"/>
            <x:test successful="true">
               <x:label>not report surname-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-3/fail.xml"/>
            <x:result href="result-d1387.xml"/>
            <x:test successful="true">
               <x:label>report surname-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-4/pass.xml"/>
            <x:result href="result-d1396.xml"/>
            <x:test successful="true">
               <x:label>not assert surname-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-4/fail.xml"/>
            <x:result href="result-d1405.xml"/>
            <x:test successful="true">
               <x:label>assert surname-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-5/pass.xml"/>
            <x:result href="result-d1414.xml"/>
            <x:test successful="true">
               <x:label>not assert surname-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-5/fail.xml"/>
            <x:result href="result-d1423.xml"/>
            <x:test successful="true">
               <x:label>assert surname-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-6/pass.xml"/>
            <x:result href="result-d1432.xml"/>
            <x:test successful="true">
               <x:label>not report surname-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-6/fail.xml"/>
            <x:result href="result-d1441.xml"/>
            <x:test successful="true">
               <x:label>report surname-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-7/pass.xml"/>
            <x:result href="result-d1450.xml"/>
            <x:test successful="true">
               <x:label>not report surname-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-7/fail.xml"/>
            <x:result href="result-d1459.xml"/>
            <x:test successful="true">
               <x:label>report surname-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>given-names-tests</x:label>
         <x:scenario>
            <x:label>given-names-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-3/pass.xml"/>
            <x:result href="result-d1468.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-3/fail.xml"/>
            <x:result href="result-d1477.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-4/pass.xml"/>
            <x:result href="result-d1486.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-4/fail.xml"/>
            <x:result href="result-d1495.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-5/pass.xml"/>
            <x:result href="result-d1504.xml"/>
            <x:test successful="true">
               <x:label>not assert given-names-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-5/fail.xml"/>
            <x:result href="result-d1513.xml"/>
            <x:test successful="true">
               <x:label>assert given-names-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-6/pass.xml"/>
            <x:result href="result-d1522.xml"/>
            <x:test successful="true">
               <x:label>not assert given-names-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-6/fail.xml"/>
            <x:result href="result-d1531.xml"/>
            <x:test successful="true">
               <x:label>assert given-names-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-7/pass.xml"/>
            <x:result href="result-d1540.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-7/fail.xml"/>
            <x:result href="result-d1549.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-8/pass.xml"/>
            <x:result href="result-d1558.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-8/fail.xml"/>
            <x:result href="result-d1567.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-9/pass.xml"/>
            <x:result href="result-d1576.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-9/fail.xml"/>
            <x:result href="result-d1585.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-10-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-10/pass.xml"/>
            <x:result href="result-d1594.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-10 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-10-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-10/fail.xml"/>
            <x:result href="result-d1603.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-10 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-11-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-11/pass.xml"/>
            <x:result href="result-d1612.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-11 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-11-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-11/fail.xml"/>
            <x:result href="result-d1621.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-11 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-12-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-12/pass.xml"/>
            <x:result href="result-d1630.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-12 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-12-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-12/fail.xml"/>
            <x:result href="result-d1639.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-12 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-13/pass.xml"/>
            <x:result href="result-d1648.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-13 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-13/fail.xml"/>
            <x:result href="result-d1657.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-13 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>suffix-tests</x:label>
         <x:scenario>
            <x:label>suffix-assert-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/suffix-tests/suffix-assert/pass.xml"/>
            <x:result href="result-d1666.xml"/>
            <x:test successful="true">
               <x:label>not assert suffix-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert suffix-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>suffix-assert-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/suffix-tests/suffix-assert/fail.xml"/>
            <x:result href="result-d1675.xml"/>
            <x:test successful="true">
               <x:label>assert suffix-assert error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert suffix-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>suffix-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/suffix-tests/suffix-child-test/pass.xml"/>
            <x:result href="result-d1684.xml"/>
            <x:test successful="true">
               <x:label>not report suffix-child-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert suffix-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>suffix-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/suffix-tests/suffix-child-test/fail.xml"/>
            <x:result href="result-d1693.xml"/>
            <x:test successful="true">
               <x:label>report suffix-child-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert suffix-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>name-child-tests</x:label>
         <x:scenario>
            <x:label>disallowed-child-assert-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-child-tests/disallowed-child-assert/pass.xml"/>
            <x:result href="result-d1702.xml"/>
            <x:test successful="true">
               <x:label>not assert disallowed-child-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disallowed-child-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert name-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disallowed-child-assert-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-child-tests/disallowed-child-assert/fail.xml"/>
            <x:result href="result-d1711.xml"/>
            <x:test successful="true">
               <x:label>assert disallowed-child-assert error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disallowed-child-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert name-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>contrib-tests</x:label>
         <x:scenario>
            <x:label>contrib-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-test-1/pass.xml"/>
            <x:result href="result-d1720.xml"/>
            <x:test successful="true">
               <x:label>not report contrib-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-test-1/fail.xml"/>
            <x:result href="result-d1729.xml"/>
            <x:test successful="true">
               <x:label>report contrib-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-test-2/pass.xml"/>
            <x:result href="result-d1738.xml"/>
            <x:test successful="true">
               <x:label>not report contrib-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-test-2/fail.xml"/>
            <x:result href="result-d1747.xml"/>
            <x:test successful="true">
               <x:label>report contrib-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-test-3/pass.xml"/>
            <x:result href="result-d1756.xml"/>
            <x:test successful="true">
               <x:label>not report contrib-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-test-3/fail.xml"/>
            <x:result href="result-d1765.xml"/>
            <x:test successful="true">
               <x:label>report contrib-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>name-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/name-test/pass.xml"/>
            <x:result href="result-d1774.xml"/>
            <x:test successful="true">
               <x:label>not report name-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>name-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/name-test/fail.xml"/>
            <x:result href="result-d1783.xml"/>
            <x:test successful="true">
               <x:label>report name-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-email-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-email-1/pass.xml"/>
            <x:result href="result-d1792.xml"/>
            <x:test successful="true">
               <x:label>not report contrib-email-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-email-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-email-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-email-1/fail.xml"/>
            <x:result href="result-d1801.xml"/>
            <x:test successful="true">
               <x:label>report contrib-email-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-email-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-email-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-email-2/pass.xml"/>
            <x:result href="result-d1810.xml"/>
            <x:test successful="true">
               <x:label>not report contrib-email-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-email-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-email-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-email-2/fail.xml"/>
            <x:result href="result-d1819.xml"/>
            <x:test successful="true">
               <x:label>report contrib-email-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-email-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>COI-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/COI-test/pass.xml"/>
            <x:result href="result-d1828.xml"/>
            <x:test successful="true">
               <x:label>not report COI-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'COI-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>COI-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/COI-test/fail.xml"/>
            <x:result href="result-d1837.xml"/>
            <x:test successful="true">
               <x:label>report COI-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'COI-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>author-children-tests</x:label>
         <x:scenario>
            <x:label>author-children-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/author-children-tests/author-children-test/pass.xml"/>
            <x:result href="result-d1846.xml"/>
            <x:test successful="true">
               <x:label>not assert author-children-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-children-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert author-children-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-children-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-children-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/author-children-tests/author-children-test/fail.xml"/>
            <x:result href="result-d1855.xml"/>
            <x:test successful="true">
               <x:label>assert author-children-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-children-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert author-children-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-children-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>orcid-tests</x:label>
         <x:scenario>
            <x:label>orcid-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/orcid-tests/orcid-test-1/pass.xml"/>
            <x:result href="result-d1864.xml"/>
            <x:test successful="true">
               <x:label>not assert orcid-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert orcid-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>orcid-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/orcid-tests/orcid-test-1/fail.xml"/>
            <x:result href="result-d1873.xml"/>
            <x:test successful="true">
               <x:label>assert orcid-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert orcid-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>orcid-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/orcid-tests/orcid-test-2/pass.xml"/>
            <x:result href="result-d1882.xml"/>
            <x:test successful="true">
               <x:label>not assert orcid-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert orcid-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>orcid-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/orcid-tests/orcid-test-2/fail.xml"/>
            <x:result href="result-d1891.xml"/>
            <x:test successful="true">
               <x:label>assert orcid-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert orcid-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>email-tests</x:label>
         <x:scenario>
            <x:label>email-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/email-tests/email-test/pass.xml"/>
            <x:result href="result-d1900.xml"/>
            <x:test successful="true">
               <x:label>not assert email-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'email-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert email-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'email-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>email-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/email-tests/email-test/fail.xml"/>
            <x:result href="result-d1909.xml"/>
            <x:test successful="true">
               <x:label>assert email-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'email-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert email-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'email-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>history-tests</x:label>
         <x:scenario>
            <x:label>history-date-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/history-tests/history-date-test-1/pass.xml"/>
            <x:result href="result-d1918.xml"/>
            <x:test successful="true">
               <x:label>not assert history-date-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert history-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>history-date-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/history-tests/history-date-test-1/fail.xml"/>
            <x:result href="result-d1927.xml"/>
            <x:test successful="true">
               <x:label>assert history-date-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert history-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>history-date-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/history-tests/history-date-test-2/pass.xml"/>
            <x:result href="result-d1936.xml"/>
            <x:test successful="true">
               <x:label>not assert history-date-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert history-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>history-date-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/history-tests/history-date-test-2/fail.xml"/>
            <x:result href="result-d1945.xml"/>
            <x:test successful="true">
               <x:label>assert history-date-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert history-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>date-tests</x:label>
         <x:scenario>
            <x:label>date-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-1/pass.xml"/>
            <x:result href="result-d1954.xml"/>
            <x:test successful="true">
               <x:label>not assert date-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-1/fail.xml"/>
            <x:result href="result-d1963.xml"/>
            <x:test successful="true">
               <x:label>assert date-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-2/pass.xml"/>
            <x:result href="result-d1972.xml"/>
            <x:test successful="true">
               <x:label>not assert date-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-2/fail.xml"/>
            <x:result href="result-d1981.xml"/>
            <x:test successful="true">
               <x:label>assert date-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-3/pass.xml"/>
            <x:result href="result-d1990.xml"/>
            <x:test successful="true">
               <x:label>not assert date-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-3/fail.xml"/>
            <x:result href="result-d1999.xml"/>
            <x:test successful="true">
               <x:label>assert date-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-4/pass.xml"/>
            <x:result href="result-d2008.xml"/>
            <x:test successful="true">
               <x:label>not assert date-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-4/fail.xml"/>
            <x:result href="result-d2017.xml"/>
            <x:test successful="true">
               <x:label>assert date-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>day-tests</x:label>
         <x:scenario>
            <x:label>day-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/day-tests/day-conformity/pass.xml"/>
            <x:result href="result-d2026.xml"/>
            <x:test successful="true">
               <x:label>not assert day-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'day-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert day-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'day-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>day-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/day-tests/day-conformity/fail.xml"/>
            <x:result href="result-d2035.xml"/>
            <x:test successful="true">
               <x:label>assert day-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'day-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert day-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'day-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>month-tests</x:label>
         <x:scenario>
            <x:label>month-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/month-tests/month-conformity/pass.xml"/>
            <x:result href="result-d2044.xml"/>
            <x:test successful="true">
               <x:label>not assert month-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'month-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert month-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'month-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>month-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/month-tests/month-conformity/fail.xml"/>
            <x:result href="result-d2053.xml"/>
            <x:test successful="true">
               <x:label>assert month-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'month-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert month-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'month-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>year-article-meta-tests</x:label>
         <x:scenario>
            <x:label>year-article-meta-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/year-article-meta-tests/year-article-meta-conformity/pass.xml"/>
            <x:result href="result-d2062.xml"/>
            <x:test successful="true">
               <x:label>not assert year-article-meta-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-article-meta-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert year-article-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-article-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>year-article-meta-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/year-article-meta-tests/year-article-meta-conformity/fail.xml"/>
            <x:result href="result-d2071.xml"/>
            <x:test successful="true">
               <x:label>assert year-article-meta-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-article-meta-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert year-article-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-article-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>year-element-citation-tests</x:label>
         <x:scenario>
            <x:label>year-element-citation-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/year-element-citation-tests/year-element-citation-conformity/pass.xml"/>
            <x:result href="result-d2080.xml"/>
            <x:test successful="true">
               <x:label>not assert year-element-citation-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-element-citation-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert year-element-citation-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-element-citation-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>year-element-citation-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/year-element-citation-tests/year-element-citation-conformity/fail.xml"/>
            <x:result href="result-d2089.xml"/>
            <x:test successful="true">
               <x:label>assert year-element-citation-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-element-citation-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert year-element-citation-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-element-citation-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>pub-date-tests-1</x:label>
         <x:scenario>
            <x:label>pre-pub-date-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/pre-pub-date-test-1/pass.xml"/>
            <x:result href="result-d2098.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-pub-date-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-pub-date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-pub-date-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/pre-pub-date-test-1/fail.xml"/>
            <x:result href="result-d2107.xml"/>
            <x:test successful="true">
               <x:label>assert pre-pub-date-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-pub-date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-pub-date-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/final-pub-date-test-1/pass.xml"/>
            <x:result href="result-d2116.xml"/>
            <x:test successful="true">
               <x:label>not assert final-pub-date-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-pub-date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-pub-date-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/final-pub-date-test-1/fail.xml"/>
            <x:result href="result-d2125.xml"/>
            <x:test successful="true">
               <x:label>assert final-pub-date-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-pub-date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-pub-date-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/pre-pub-date-test-2/pass.xml"/>
            <x:result href="result-d2134.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-pub-date-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-pub-date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-pub-date-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/pre-pub-date-test-2/fail.xml"/>
            <x:result href="result-d2143.xml"/>
            <x:test successful="true">
               <x:label>assert pre-pub-date-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-pub-date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-pub-date-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/final-pub-date-test-2/pass.xml"/>
            <x:result href="result-d2152.xml"/>
            <x:test successful="true">
               <x:label>not assert final-pub-date-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-pub-date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-pub-date-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/final-pub-date-test-2/fail.xml"/>
            <x:result href="result-d2161.xml"/>
            <x:test successful="true">
               <x:label>assert final-pub-date-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-pub-date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/pub-date-test-3/pass.xml"/>
            <x:result href="result-d2170.xml"/>
            <x:test successful="true">
               <x:label>not assert pub-date-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/pub-date-test-3/fail.xml"/>
            <x:result href="result-d2179.xml"/>
            <x:test successful="true">
               <x:label>assert pub-date-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>pub-date-tests-2</x:label>
         <x:scenario>
            <x:label>pub-date-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-2/pub-date-test-4/pass.xml"/>
            <x:result href="result-d2188.xml"/>
            <x:test successful="true">
               <x:label>not assert pub-date-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-2/pub-date-test-4/fail.xml"/>
            <x:result href="result-d2197.xml"/>
            <x:test successful="true">
               <x:label>assert pub-date-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-2/pub-date-test-5/pass.xml"/>
            <x:result href="result-d2206.xml"/>
            <x:test successful="true">
               <x:label>not report pub-date-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-2/pub-date-test-5/fail.xml"/>
            <x:result href="result-d2215.xml"/>
            <x:test successful="true">
               <x:label>report pub-date-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-2/pub-date-test-6/pass.xml"/>
            <x:result href="result-d2224.xml"/>
            <x:test successful="true">
               <x:label>not assert pub-date-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-2/pub-date-test-6/fail.xml"/>
            <x:result href="result-d2233.xml"/>
            <x:test successful="true">
               <x:label>assert pub-date-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-date-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>front-permissions-tests</x:label>
         <x:scenario>
            <x:label>permissions-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-1/pass.xml"/>
            <x:result href="result-d2242.xml"/>
            <x:test successful="true">
               <x:label>not report permissions-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-1/fail.xml"/>
            <x:result href="result-d2251.xml"/>
            <x:test successful="true">
               <x:label>report permissions-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-2/pass.xml"/>
            <x:result href="result-d2260.xml"/>
            <x:test successful="true">
               <x:label>not report permissions-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-2/fail.xml"/>
            <x:result href="result-d2269.xml"/>
            <x:test successful="true">
               <x:label>report permissions-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-3/pass.xml"/>
            <x:result href="result-d2278.xml"/>
            <x:test successful="true">
               <x:label>not report permissions-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-3/fail.xml"/>
            <x:result href="result-d2287.xml"/>
            <x:test successful="true">
               <x:label>report permissions-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-4/pass.xml"/>
            <x:result href="result-d2296.xml"/>
            <x:test successful="true">
               <x:label>not assert permissions-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-4/fail.xml"/>
            <x:result href="result-d2305.xml"/>
            <x:test successful="true">
               <x:label>assert permissions-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-5/pass.xml"/>
            <x:result href="result-d2314.xml"/>
            <x:test successful="true">
               <x:label>not assert permissions-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-5/fail.xml"/>
            <x:result href="result-d2323.xml"/>
            <x:test successful="true">
               <x:label>assert permissions-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-6/pass.xml"/>
            <x:result href="result-d2332.xml"/>
            <x:test successful="true">
               <x:label>not report permissions-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-6/fail.xml"/>
            <x:result href="result-d2341.xml"/>
            <x:test successful="true">
               <x:label>report permissions-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-7/pass.xml"/>
            <x:result href="result-d2350.xml"/>
            <x:test successful="true">
               <x:label>not report permissions-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-7/fail.xml"/>
            <x:result href="result-d2359.xml"/>
            <x:test successful="true">
               <x:label>report permissions-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-8/pass.xml"/>
            <x:result href="result-d2368.xml"/>
            <x:test successful="true">
               <x:label>not report permissions-test-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-8/fail.xml"/>
            <x:result href="result-d2377.xml"/>
            <x:test successful="true">
               <x:label>report permissions-test-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-9/pass.xml"/>
            <x:result href="result-d2386.xml"/>
            <x:test successful="true">
               <x:label>not assert permissions-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-9/fail.xml"/>
            <x:result href="result-d2395.xml"/>
            <x:test successful="true">
               <x:label>assert permissions-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>license-tests</x:label>
         <x:scenario>
            <x:label>license-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/license-tests/license-test-1/pass.xml"/>
            <x:result href="result-d2404.xml"/>
            <x:test successful="true">
               <x:label>not assert license-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert license-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>license-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/license-tests/license-test-1/fail.xml"/>
            <x:result href="result-d2413.xml"/>
            <x:test successful="true">
               <x:label>assert license-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert license-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>license-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/license-tests/license-test-2/pass.xml"/>
            <x:result href="result-d2422.xml"/>
            <x:test successful="true">
               <x:label>not assert license-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert license-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>license-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/license-tests/license-test-2/fail.xml"/>
            <x:result href="result-d2431.xml"/>
            <x:test successful="true">
               <x:label>assert license-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert license-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>abstract-tests</x:label>
         <x:scenario>
            <x:label>abstract-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-tests/abstract-test-1/pass.xml"/>
            <x:result href="result-d2440.xml"/>
            <x:test successful="true">
               <x:label>not report abstract-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>abstract-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-tests/abstract-test-1/fail.xml"/>
            <x:result href="result-d2449.xml"/>
            <x:test successful="true">
               <x:label>report abstract-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>abstract-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-tests/abstract-test-2/pass.xml"/>
            <x:result href="result-d2458.xml"/>
            <x:test successful="true">
               <x:label>not report abstract-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>abstract-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-tests/abstract-test-2/fail.xml"/>
            <x:result href="result-d2467.xml"/>
            <x:test successful="true">
               <x:label>report abstract-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>abstract-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-tests/abstract-test-4/pass.xml"/>
            <x:result href="result-d2476.xml"/>
            <x:test successful="true">
               <x:label>not report abstract-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>abstract-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-tests/abstract-test-4/fail.xml"/>
            <x:result href="result-d2485.xml"/>
            <x:test successful="true">
               <x:label>report abstract-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>aff-tests</x:label>
         <x:scenario>
            <x:label>aff-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/aff-tests/aff-test-1/pass.xml"/>
            <x:result href="result-d2494.xml"/>
            <x:test successful="true">
               <x:label>not assert aff-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert aff-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>aff-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/aff-tests/aff-test-1/fail.xml"/>
            <x:result href="result-d2503.xml"/>
            <x:test successful="true">
               <x:label>assert aff-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert aff-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>funding-group-tests</x:label>
         <x:scenario>
            <x:label>funding-group-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/funding-group-tests/funding-group-test-1/pass.xml"/>
            <x:result href="result-d2512.xml"/>
            <x:test successful="true">
               <x:label>not assert funding-group-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert funding-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>funding-group-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/funding-group-tests/funding-group-test-1/fail.xml"/>
            <x:result href="result-d2521.xml"/>
            <x:test successful="true">
               <x:label>assert funding-group-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert funding-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>funding-group-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/funding-group-tests/funding-group-test-2/pass.xml"/>
            <x:result href="result-d2530.xml"/>
            <x:test successful="true">
               <x:label>not report funding-group-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert funding-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>funding-group-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/funding-group-tests/funding-group-test-2/fail.xml"/>
            <x:result href="result-d2539.xml"/>
            <x:test successful="true">
               <x:label>report funding-group-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert funding-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>funding-group-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/funding-group-tests/funding-group-test-3/pass.xml"/>
            <x:result href="result-d2548.xml"/>
            <x:test successful="true">
               <x:label>not report funding-group-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert funding-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>funding-group-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/funding-group-tests/funding-group-test-3/fail.xml"/>
            <x:result href="result-d2557.xml"/>
            <x:test successful="true">
               <x:label>report funding-group-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert funding-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>award-group-tests</x:label>
         <x:scenario>
            <x:label>award-group-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-2/pass.xml"/>
            <x:result href="result-d2566.xml"/>
            <x:test successful="true">
               <x:label>not assert award-group-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-2/fail.xml"/>
            <x:result href="result-d2575.xml"/>
            <x:test successful="true">
               <x:label>assert award-group-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-3/pass.xml"/>
            <x:result href="result-d2584.xml"/>
            <x:test successful="true">
               <x:label>not assert award-group-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-3/fail.xml"/>
            <x:result href="result-d2593.xml"/>
            <x:test successful="true">
               <x:label>assert award-group-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-4/pass.xml"/>
            <x:result href="result-d2602.xml"/>
            <x:test successful="true">
               <x:label>not report award-group-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-4/fail.xml"/>
            <x:result href="result-d2611.xml"/>
            <x:test successful="true">
               <x:label>report award-group-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-5/pass.xml"/>
            <x:result href="result-d2620.xml"/>
            <x:test successful="true">
               <x:label>not assert award-group-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-5/fail.xml"/>
            <x:result href="result-d2629.xml"/>
            <x:test successful="true">
               <x:label>assert award-group-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-6/pass.xml"/>
            <x:result href="result-d2638.xml"/>
            <x:test successful="true">
               <x:label>not assert award-group-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-6/fail.xml"/>
            <x:result href="result-d2647.xml"/>
            <x:test successful="true">
               <x:label>assert award-group-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-7/pass.xml"/>
            <x:result href="result-d2656.xml"/>
            <x:test successful="true">
               <x:label>not assert award-group-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-7/fail.xml"/>
            <x:result href="result-d2665.xml"/>
            <x:test successful="true">
               <x:label>assert award-group-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>award-id-tests</x:label>
         <x:scenario>
            <x:label>award-id-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-id-tests/award-id-test-1/pass.xml"/>
            <x:result href="result-d2674.xml"/>
            <x:test successful="true">
               <x:label>not report award-id-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-id-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-id-tests/award-id-test-1/fail.xml"/>
            <x:result href="result-d2683.xml"/>
            <x:test successful="true">
               <x:label>report award-id-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-id-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-id-tests/award-id-test-2/pass.xml"/>
            <x:result href="result-d2692.xml"/>
            <x:test successful="true">
               <x:label>not report award-id-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-id-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-id-tests/award-id-test-2/fail.xml"/>
            <x:result href="result-d2701.xml"/>
            <x:test successful="true">
               <x:label>report award-id-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-id-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-id-tests/award-id-test-3/pass.xml"/>
            <x:result href="result-d2710.xml"/>
            <x:test successful="true">
               <x:label>not report award-id-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-id-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-id-tests/award-id-test-3/fail.xml"/>
            <x:result href="result-d2719.xml"/>
            <x:test successful="true">
               <x:label>report award-id-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>institution-wrap-tests</x:label>
         <x:scenario>
            <x:label>institution-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/institution-wrap-tests/institution-id-test/pass.xml"/>
            <x:result href="result-d2728.xml"/>
            <x:test successful="true">
               <x:label>not assert institution-id-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert institution-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>institution-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/institution-wrap-tests/institution-id-test/fail.xml"/>
            <x:result href="result-d2737.xml"/>
            <x:test successful="true">
               <x:label>assert institution-id-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert institution-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>kwd-group-tests</x:label>
         <x:scenario>
            <x:label>kwd-group-type-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/kwd-group-tests/kwd-group-type/pass.xml"/>
            <x:result href="result-d2746.xml"/>
            <x:test successful="true">
               <x:label>not assert kwd-group-type error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-type'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kwd-group-type-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/kwd-group-tests/kwd-group-type/fail.xml"/>
            <x:result href="result-d2755.xml"/>
            <x:test successful="true">
               <x:label>assert kwd-group-type error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-type'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>non-ro-kwd-presence-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/kwd-group-tests/non-ro-kwd-presence-test/pass.xml"/>
            <x:result href="result-d2764.xml"/>
            <x:test successful="true">
               <x:label>not assert non-ro-kwd-presence-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'non-ro-kwd-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>non-ro-kwd-presence-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/kwd-group-tests/non-ro-kwd-presence-test/fail.xml"/>
            <x:result href="result-d2773.xml"/>
            <x:test successful="true">
               <x:label>assert non-ro-kwd-presence-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'non-ro-kwd-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ro-kwd-group-tests</x:label>
         <x:scenario>
            <x:label>kwd-group-title-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-group-tests/kwd-group-title/pass.xml"/>
            <x:result href="result-d2782.xml"/>
            <x:test successful="true">
               <x:label>not assert kwd-group-title error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-title'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ro-kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kwd-group-title-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-group-tests/kwd-group-title/fail.xml"/>
            <x:result href="result-d2791.xml"/>
            <x:test successful="true">
               <x:label>assert kwd-group-title error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-title'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ro-kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ro-kwd-presence-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-group-tests/ro-kwd-presence-test/pass.xml"/>
            <x:result href="result-d2800.xml"/>
            <x:test successful="true">
               <x:label>not assert ro-kwd-presence-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ro-kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ro-kwd-presence-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-group-tests/ro-kwd-presence-test/fail.xml"/>
            <x:result href="result-d2809.xml"/>
            <x:test successful="true">
               <x:label>assert ro-kwd-presence-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ro-kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ro-kwd-tests</x:label>
         <x:scenario>
            <x:label>kwd-upper-case-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-tests/kwd-upper-case/pass.xml"/>
            <x:result href="result-d2818.xml"/>
            <x:test successful="true">
               <x:label>not assert kwd-upper-case error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-upper-case'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ro-kwd-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kwd-upper-case-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-tests/kwd-upper-case/fail.xml"/>
            <x:result href="result-d2827.xml"/>
            <x:test successful="true">
               <x:label>assert kwd-upper-case error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-upper-case'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ro-kwd-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kwd-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-tests/kwd-child-test/pass.xml"/>
            <x:result href="result-d2836.xml"/>
            <x:test successful="true">
               <x:label>not report kwd-child-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ro-kwd-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kwd-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-tests/kwd-child-test/fail.xml"/>
            <x:result href="result-d2845.xml"/>
            <x:test successful="true">
               <x:label>report kwd-child-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ro-kwd-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>custom-meta-group-tests</x:label>
         <x:scenario>
            <x:label>custom-meta-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-group-tests/custom-meta-presence/pass.xml"/>
            <x:result href="result-d2854.xml"/>
            <x:test successful="true">
               <x:label>not assert custom-meta-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-group-tests/custom-meta-presence/fail.xml"/>
            <x:result href="result-d2863.xml"/>
            <x:test successful="true">
               <x:label>assert custom-meta-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>custom-meta-tests</x:label>
         <x:scenario>
            <x:label>custom-meta-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-tests/custom-meta-test-1/pass.xml"/>
            <x:result href="result-d2872.xml"/>
            <x:test successful="true">
               <x:label>not assert custom-meta-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-tests/custom-meta-test-1/fail.xml"/>
            <x:result href="result-d2881.xml"/>
            <x:test successful="true">
               <x:label>assert custom-meta-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-tests/custom-meta-test-2/pass.xml"/>
            <x:result href="result-d2890.xml"/>
            <x:test successful="true">
               <x:label>not assert custom-meta-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-tests/custom-meta-test-2/fail.xml"/>
            <x:result href="result-d2899.xml"/>
            <x:test successful="true">
               <x:label>assert custom-meta-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-tests/custom-meta-test-3/pass.xml"/>
            <x:result href="result-d2908.xml"/>
            <x:test successful="true">
               <x:label>not assert custom-meta-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-tests/custom-meta-test-3/fail.xml"/>
            <x:result href="result-d2917.xml"/>
            <x:test successful="true">
               <x:label>assert custom-meta-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>meta-value-tests</x:label>
         <x:scenario>
            <x:label>custom-meta-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-4/pass.xml"/>
            <x:result href="result-d2926.xml"/>
            <x:test successful="true">
               <x:label>not report custom-meta-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-4/fail.xml"/>
            <x:result href="result-d2935.xml"/>
            <x:test successful="true">
               <x:label>report custom-meta-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-5/pass.xml"/>
            <x:result href="result-d2944.xml"/>
            <x:test successful="true">
               <x:label>not report pre-custom-meta-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-5/fail.xml"/>
            <x:result href="result-d2953.xml"/>
            <x:test successful="true">
               <x:label>report pre-custom-meta-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-feature-custom-meta-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-feature-custom-meta-test-5/pass.xml"/>
            <x:result href="result-d2962.xml"/>
            <x:test successful="true">
               <x:label>not report final-feature-custom-meta-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-feature-custom-meta-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-feature-custom-meta-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-feature-custom-meta-test-5/fail.xml"/>
            <x:result href="result-d2971.xml"/>
            <x:test successful="true">
               <x:label>report final-feature-custom-meta-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-feature-custom-meta-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-5/pass.xml"/>
            <x:result href="result-d2980.xml"/>
            <x:test successful="true">
               <x:label>not report final-custom-meta-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-5/fail.xml"/>
            <x:result href="result-d2989.xml"/>
            <x:test successful="true">
               <x:label>report final-custom-meta-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-6/pass.xml"/>
            <x:result href="result-d2998.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-custom-meta-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-6/fail.xml"/>
            <x:result href="result-d3007.xml"/>
            <x:test successful="true">
               <x:label>assert pre-custom-meta-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-6/pass.xml"/>
            <x:result href="result-d3016.xml"/>
            <x:test successful="true">
               <x:label>not assert final-custom-meta-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-6/fail.xml"/>
            <x:result href="result-d3025.xml"/>
            <x:test successful="true">
               <x:label>assert final-custom-meta-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-7/pass.xml"/>
            <x:result href="result-d3034.xml"/>
            <x:test successful="true">
               <x:label>not report custom-meta-test-7 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-7/fail.xml"/>
            <x:result href="result-d3043.xml"/>
            <x:test successful="true">
               <x:label>report custom-meta-test-7 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-8/pass.xml"/>
            <x:result href="result-d3052.xml"/>
            <x:test successful="true">
               <x:label>not report custom-meta-test-8 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-8/fail.xml"/>
            <x:result href="result-d3061.xml"/>
            <x:test successful="true">
               <x:label>report custom-meta-test-8 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-9/pass.xml"/>
            <x:result href="result-d3070.xml"/>
            <x:test successful="true">
               <x:label>not report pre-custom-meta-test-9 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-9/fail.xml"/>
            <x:result href="result-d3079.xml"/>
            <x:test successful="true">
               <x:label>report pre-custom-meta-test-9 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-9/pass.xml"/>
            <x:result href="result-d3088.xml"/>
            <x:test successful="true">
               <x:label>not report final-custom-meta-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-9/fail.xml"/>
            <x:result href="result-d3097.xml"/>
            <x:test successful="true">
               <x:label>report final-custom-meta-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-10-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-10/pass.xml"/>
            <x:result href="result-d3106.xml"/>
            <x:test successful="true">
               <x:label>not report custom-meta-test-10 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-10-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-10/fail.xml"/>
            <x:result href="result-d3115.xml"/>
            <x:test successful="true">
               <x:label>report custom-meta-test-10 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-11-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-11/pass.xml"/>
            <x:result href="result-d3124.xml"/>
            <x:test successful="true">
               <x:label>not report custom-meta-test-11 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-11-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-11/fail.xml"/>
            <x:result href="result-d3133.xml"/>
            <x:test successful="true">
               <x:label>report custom-meta-test-11 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-13/pass.xml"/>
            <x:result href="result-d3142.xml"/>
            <x:test successful="true">
               <x:label>not report custom-meta-test-13 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-13/fail.xml"/>
            <x:result href="result-d3151.xml"/>
            <x:test successful="true">
               <x:label>report custom-meta-test-13 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>rep-study-custom-meta-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/rep-study-custom-meta-test/pass.xml"/>
            <x:result href="result-d3160.xml"/>
            <x:test successful="true">
               <x:label>not report rep-study-custom-meta-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-study-custom-meta-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>rep-study-custom-meta-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/rep-study-custom-meta-test/fail.xml"/>
            <x:result href="result-d3169.xml"/>
            <x:test successful="true">
               <x:label>report rep-study-custom-meta-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-study-custom-meta-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>meta-value-child-tests</x:label>
         <x:scenario>
            <x:label>custom-meta-child-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-child-tests/custom-meta-child-test-1/pass.xml"/>
            <x:result href="result-d3178.xml"/>
            <x:test successful="true">
               <x:label>not assert custom-meta-child-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-child-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-child-tests/custom-meta-child-test-1/fail.xml"/>
            <x:result href="result-d3187.xml"/>
            <x:test successful="true">
               <x:label>assert custom-meta-child-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert meta-value-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elocation-id-tests</x:label>
         <x:scenario>
            <x:label>test-elocation-conformance-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elocation-id-tests/test-elocation-conformance/pass.xml"/>
            <x:result href="result-d3196.xml"/>
            <x:test successful="true">
               <x:label>not assert test-elocation-conformance error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-elocation-conformance'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elocation-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elocation-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-elocation-conformance-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elocation-id-tests/test-elocation-conformance/fail.xml"/>
            <x:result href="result-d3205.xml"/>
            <x:test successful="true">
               <x:label>assert test-elocation-conformance error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-elocation-conformance'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elocation-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elocation-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>volume-test</x:label>
         <x:scenario>
            <x:label>volume-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/volume-test/volume-test-1/pass.xml"/>
            <x:result href="result-d3214.xml"/>
            <x:test successful="true">
               <x:label>not assert volume-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'volume-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert volume-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'volume-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>volume-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/volume-test/volume-test-1/fail.xml"/>
            <x:result href="result-d3223.xml"/>
            <x:test successful="true">
               <x:label>assert volume-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'volume-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert volume-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'volume-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>equal-author-tests</x:label>
         <x:scenario>
            <x:label>equal-author-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equal-author-tests/equal-author-test-1/pass.xml"/>
            <x:result href="result-d3232.xml"/>
            <x:test successful="true">
               <x:label>not report equal-author-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equal-author-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-author-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equal-author-tests/equal-author-test-1/fail.xml"/>
            <x:result href="result-d3241.xml"/>
            <x:test successful="true">
               <x:label>report equal-author-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equal-author-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-author-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equal-author-tests/equal-author-test-2/pass.xml"/>
            <x:result href="result-d3250.xml"/>
            <x:test successful="true">
               <x:label>not report equal-author-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equal-author-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-author-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equal-author-tests/equal-author-test-2/fail.xml"/>
            <x:result href="result-d3259.xml"/>
            <x:test successful="true">
               <x:label>report equal-author-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equal-author-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>object-id-tests</x:label>
         <x:scenario>
            <x:label>object-id-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/object-id-tests/object-id-test-1/pass.xml"/>
            <x:result href="result-d3268.xml"/>
            <x:test successful="true">
               <x:label>not assert object-id-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert object-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>object-id-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/object-id-tests/object-id-test-1/fail.xml"/>
            <x:result href="result-d3277.xml"/>
            <x:test successful="true">
               <x:label>assert object-id-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert object-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>object-id-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/object-id-tests/object-id-test-2/pass.xml"/>
            <x:result href="result-d3286.xml"/>
            <x:test successful="true">
               <x:label>not assert object-id-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert object-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>object-id-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/object-id-tests/object-id-test-2/fail.xml"/>
            <x:result href="result-d3295.xml"/>
            <x:test successful="true">
               <x:label>assert object-id-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert object-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>object-id-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/object-id-tests/object-id-test-3/pass.xml"/>
            <x:result href="result-d3304.xml"/>
            <x:test successful="true">
               <x:label>not report object-id-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert object-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>object-id-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/object-id-tests/object-id-test-3/fail.xml"/>
            <x:result href="result-d3313.xml"/>
            <x:test successful="true">
               <x:label>report object-id-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert object-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>p-tests</x:label>
         <x:scenario>
            <x:label>p-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-2/pass.xml"/>
            <x:result href="result-d3322.xml"/>
            <x:test successful="true">
               <x:label>not report p-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-2/fail.xml"/>
            <x:result href="result-d3331.xml"/>
            <x:test successful="true">
               <x:label>report p-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-3/pass.xml"/>
            <x:result href="result-d3340.xml"/>
            <x:test successful="true">
               <x:label>not assert p-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-3/fail.xml"/>
            <x:result href="result-d3349.xml"/>
            <x:test successful="true">
               <x:label>assert p-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-5/pass.xml"/>
            <x:result href="result-d3358.xml"/>
            <x:test successful="true">
               <x:label>not report p-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-5/fail.xml"/>
            <x:result href="result-d3367.xml"/>
            <x:test successful="true">
               <x:label>report p-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-6/pass.xml"/>
            <x:result href="result-d3376.xml"/>
            <x:test successful="true">
               <x:label>not report p-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-6/fail.xml"/>
            <x:result href="result-d3385.xml"/>
            <x:test successful="true">
               <x:label>report p-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-7/pass.xml"/>
            <x:result href="result-d3394.xml"/>
            <x:test successful="true">
               <x:label>not report p-test-7 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-7/fail.xml"/>
            <x:result href="result-d3403.xml"/>
            <x:test successful="true">
               <x:label>report p-test-7 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>p-child-tests</x:label>
         <x:scenario>
            <x:label>allowed-p-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-child-tests/allowed-p-test/pass.xml"/>
            <x:result href="result-d3412.xml"/>
            <x:test successful="true">
               <x:label>not assert allowed-p-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'allowed-p-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>allowed-p-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-child-tests/allowed-p-test/fail.xml"/>
            <x:result href="result-d3421.xml"/>
            <x:test successful="true">
               <x:label>assert allowed-p-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'allowed-p-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>xref-target-tests</x:label>
         <x:scenario>
            <x:label>aff-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/aff-xref-target-test/pass.xml"/>
            <x:result href="result-d3430.xml"/>
            <x:test successful="true">
               <x:label>not report aff-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>aff-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/aff-xref-target-test/fail.xml"/>
            <x:result href="result-d3439.xml"/>
            <x:test successful="true">
               <x:label>report aff-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fn-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/fn-xref-target-test/pass.xml"/>
            <x:result href="result-d3448.xml"/>
            <x:test successful="true">
               <x:label>not report fn-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fn-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/fn-xref-target-test/fail.xml"/>
            <x:result href="result-d3457.xml"/>
            <x:test successful="true">
               <x:label>report fn-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/fig-xref-target-test/pass.xml"/>
            <x:result href="result-d3466.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/fig-xref-target-test/fail.xml"/>
            <x:result href="result-d3475.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/vid-xref-target-test/pass.xml"/>
            <x:result href="result-d3484.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/vid-xref-target-test/fail.xml"/>
            <x:result href="result-d3493.xml"/>
            <x:test successful="true">
               <x:label>report vid-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bibr-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/bibr-xref-target-test/pass.xml"/>
            <x:result href="result-d3502.xml"/>
            <x:test successful="true">
               <x:label>not report bibr-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bibr-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bibr-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/bibr-xref-target-test/fail.xml"/>
            <x:result href="result-d3511.xml"/>
            <x:test successful="true">
               <x:label>report bibr-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bibr-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/supplementary-material-xref-target-test/pass.xml"/>
            <x:result href="result-d3520.xml"/>
            <x:test successful="true">
               <x:label>not report supplementary-material-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/supplementary-material-xref-target-test/fail.xml"/>
            <x:result href="result-d3529.xml"/>
            <x:test successful="true">
               <x:label>report supplementary-material-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>other-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/other-xref-target-test/pass.xml"/>
            <x:result href="result-d3538.xml"/>
            <x:test successful="true">
               <x:label>not report other-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'other-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>other-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/other-xref-target-test/fail.xml"/>
            <x:result href="result-d3547.xml"/>
            <x:test successful="true">
               <x:label>report other-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'other-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/table-xref-target-test/pass.xml"/>
            <x:result href="result-d3556.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/table-xref-target-test/fail.xml"/>
            <x:result href="result-d3565.xml"/>
            <x:test successful="true">
               <x:label>report table-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-fn-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/table-fn-xref-target-test/pass.xml"/>
            <x:result href="result-d3574.xml"/>
            <x:test successful="true">
               <x:label>not report table-fn-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-fn-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-fn-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/table-fn-xref-target-test/fail.xml"/>
            <x:result href="result-d3583.xml"/>
            <x:test successful="true">
               <x:label>report table-fn-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-fn-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>box-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/box-xref-target-test/pass.xml"/>
            <x:result href="result-d3592.xml"/>
            <x:test successful="true">
               <x:label>not report box-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>box-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/box-xref-target-test/fail.xml"/>
            <x:result href="result-d3601.xml"/>
            <x:test successful="true">
               <x:label>report box-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/sec-xref-target-test/pass.xml"/>
            <x:result href="result-d3610.xml"/>
            <x:test successful="true">
               <x:label>not report sec-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/sec-xref-target-test/fail.xml"/>
            <x:result href="result-d3619.xml"/>
            <x:test successful="true">
               <x:label>report sec-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/app-xref-target-test/pass.xml"/>
            <x:result href="result-d3628.xml"/>
            <x:test successful="true">
               <x:label>not report app-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/app-xref-target-test/fail.xml"/>
            <x:result href="result-d3637.xml"/>
            <x:test successful="true">
               <x:label>report app-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>decision-letter-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/decision-letter-xref-target-test/pass.xml"/>
            <x:result href="result-d3646.xml"/>
            <x:test successful="true">
               <x:label>not report decision-letter-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'decision-letter-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>decision-letter-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/decision-letter-xref-target-test/fail.xml"/>
            <x:result href="result-d3655.xml"/>
            <x:test successful="true">
               <x:label>report decision-letter-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'decision-letter-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-formula-xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/disp-formula-xref-target-test/pass.xml"/>
            <x:result href="result-d3664.xml"/>
            <x:test successful="true">
               <x:label>not report disp-formula-xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-formula-xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/disp-formula-xref-target-test/fail.xml"/>
            <x:result href="result-d3673.xml"/>
            <x:test successful="true">
               <x:label>report disp-formula-xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-ref-type-conformance-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/xref-ref-type-conformance/pass.xml"/>
            <x:result href="result-d3682.xml"/>
            <x:test successful="true">
               <x:label>not assert xref-ref-type-conformance error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-ref-type-conformance'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-ref-type-conformance-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/xref-ref-type-conformance/fail.xml"/>
            <x:result href="result-d3691.xml"/>
            <x:test successful="true">
               <x:label>assert xref-ref-type-conformance error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-ref-type-conformance'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-target-conformance-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/xref-target-conformance/pass.xml"/>
            <x:result href="result-d3700.xml"/>
            <x:test successful="true">
               <x:label>not report xref-target-conformance error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-conformance'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-target-conformance-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/xref-target-conformance/fail.xml"/>
            <x:result href="result-d3709.xml"/>
            <x:test successful="true">
               <x:label>report xref-target-conformance error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-conformance'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ext-link-tests</x:label>
         <x:scenario>
            <x:label>url-conformance-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/url-conformance-test/pass.xml"/>
            <x:result href="result-d3718.xml"/>
            <x:test successful="true">
               <x:label>not assert url-conformance-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'url-conformance-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>url-conformance-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/url-conformance-test/fail.xml"/>
            <x:result href="result-d3727.xml"/>
            <x:test successful="true">
               <x:label>assert url-conformance-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'url-conformance-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>url-fullstop-report-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/url-fullstop-report/pass.xml"/>
            <x:result href="result-d3736.xml"/>
            <x:test successful="true">
               <x:label>not report url-fullstop-report error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'url-fullstop-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>url-fullstop-report-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/url-fullstop-report/fail.xml"/>
            <x:result href="result-d3745.xml"/>
            <x:test successful="true">
               <x:label>report url-fullstop-report error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'url-fullstop-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ext-link-parent-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/ext-link-parent-test/pass.xml"/>
            <x:result href="result-d3754.xml"/>
            <x:test successful="true">
               <x:label>not report ext-link-parent-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-parent-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ext-link-parent-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/ext-link-parent-test/fail.xml"/>
            <x:result href="result-d3763.xml"/>
            <x:test successful="true">
               <x:label>report ext-link-parent-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-parent-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ext-link-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/ext-link-child-test/pass.xml"/>
            <x:result href="result-d3772.xml"/>
            <x:test successful="true">
               <x:label>not report ext-link-child-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ext-link-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/ext-link-child-test/fail.xml"/>
            <x:result href="result-d3781.xml"/>
            <x:test successful="true">
               <x:label>report ext-link-child-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-group-tests</x:label>
         <x:scenario>
            <x:label>fig-group-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-group-tests/fig-group-test-1/pass.xml"/>
            <x:result href="result-d3790.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-group-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-group-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-group-tests/fig-group-test-1/fail.xml"/>
            <x:result href="result-d3799.xml"/>
            <x:test successful="true">
               <x:label>assert fig-group-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-group-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-group-tests/fig-group-test-2/pass.xml"/>
            <x:result href="result-d3808.xml"/>
            <x:test successful="true">
               <x:label>not report fig-group-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-group-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-group-tests/fig-group-test-2/fail.xml"/>
            <x:result href="result-d3817.xml"/>
            <x:test successful="true">
               <x:label>report fig-group-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-group-child-tests</x:label>
         <x:scenario>
            <x:label>fig-group-child-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-group-child-tests/fig-group-child-test-1/pass.xml"/>
            <x:result href="result-d3826.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-group-child-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-group-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-group-child-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-group-child-tests/fig-group-child-test-1/fail.xml"/>
            <x:result href="result-d3835.xml"/>
            <x:test successful="true">
               <x:label>assert fig-group-child-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-group-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-group-child-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-group-child-tests/fig-group-child-test-2/pass.xml"/>
            <x:result href="result-d3844.xml"/>
            <x:test successful="true">
               <x:label>not report fig-group-child-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-child-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-group-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-group-child-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-group-child-tests/fig-group-child-test-2/fail.xml"/>
            <x:result href="result-d3853.xml"/>
            <x:test successful="true">
               <x:label>report fig-group-child-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-child-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-group-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-group-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-tests</x:label>
         <x:scenario>
            <x:label>fig-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-2/pass.xml"/>
            <x:result href="result-d3862.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-2/fail.xml"/>
            <x:result href="result-d3871.xml"/>
            <x:test successful="true">
               <x:label>assert fig-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-3/pass.xml"/>
            <x:result href="result-d3880.xml"/>
            <x:test successful="true">
               <x:label>not report fig-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-3/fail.xml"/>
            <x:result href="result-d3889.xml"/>
            <x:test successful="true">
               <x:label>report fig-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feat-fig-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/feat-fig-test-3/pass.xml"/>
            <x:result href="result-d3898.xml"/>
            <x:test successful="true">
               <x:label>not report feat-fig-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feat-fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feat-fig-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/feat-fig-test-3/fail.xml"/>
            <x:result href="result-d3907.xml"/>
            <x:test successful="true">
               <x:label>report feat-fig-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feat-fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-4/pass.xml"/>
            <x:result href="result-d3916.xml"/>
            <x:test successful="true">
               <x:label>not report fig-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-4/fail.xml"/>
            <x:result href="result-d3925.xml"/>
            <x:test successful="true">
               <x:label>report fig-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-fig-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/pre-fig-test-5/pass.xml"/>
            <x:result href="result-d3934.xml"/>
            <x:test successful="true">
               <x:label>not report pre-fig-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-fig-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-fig-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/pre-fig-test-5/fail.xml"/>
            <x:result href="result-d3943.xml"/>
            <x:test successful="true">
               <x:label>report pre-fig-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-fig-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-fig-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/final-fig-test-5/pass.xml"/>
            <x:result href="result-d3952.xml"/>
            <x:test successful="true">
               <x:label>not report final-fig-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-fig-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-fig-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/final-fig-test-5/fail.xml"/>
            <x:result href="result-d3961.xml"/>
            <x:test successful="true">
               <x:label>report final-fig-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-fig-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-6/pass.xml"/>
            <x:result href="result-d3970.xml"/>
            <x:test successful="true">
               <x:label>not report fig-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-6/fail.xml"/>
            <x:result href="result-d3979.xml"/>
            <x:test successful="true">
               <x:label>report fig-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-fig-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/pre-fig-test-7/pass.xml"/>
            <x:result href="result-d3988.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-fig-test-7 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-fig-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-fig-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/pre-fig-test-7/fail.xml"/>
            <x:result href="result-d3997.xml"/>
            <x:test successful="true">
               <x:label>assert pre-fig-test-7 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-fig-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-fig-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/final-fig-test-7/pass.xml"/>
            <x:result href="result-d4006.xml"/>
            <x:test successful="true">
               <x:label>not assert final-fig-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-fig-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-fig-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/final-fig-test-7/fail.xml"/>
            <x:result href="result-d4015.xml"/>
            <x:test successful="true">
               <x:label>assert final-fig-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-fig-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ar-fig-tests</x:label>
         <x:scenario>
            <x:label>ar-fig-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ar-fig-tests/ar-fig-test-2/pass.xml"/>
            <x:result href="result-d4024.xml"/>
            <x:test successful="true">
               <x:label>not report ar-fig-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ar-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ar-fig-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ar-fig-tests/ar-fig-test-2/fail.xml"/>
            <x:result href="result-d4033.xml"/>
            <x:test successful="true">
               <x:label>report ar-fig-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ar-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-ar-fig-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ar-fig-tests/pre-ar-fig-test-3/pass.xml"/>
            <x:result href="result-d4042.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-ar-fig-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-ar-fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ar-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-ar-fig-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ar-fig-tests/pre-ar-fig-test-3/fail.xml"/>
            <x:result href="result-d4051.xml"/>
            <x:test successful="true">
               <x:label>assert pre-ar-fig-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-ar-fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ar-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-ar-fig-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ar-fig-tests/final-ar-fig-test-3/pass.xml"/>
            <x:result href="result-d4060.xml"/>
            <x:test successful="true">
               <x:label>not assert final-ar-fig-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-ar-fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ar-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-ar-fig-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ar-fig-tests/final-ar-fig-test-3/fail.xml"/>
            <x:result href="result-d4069.xml"/>
            <x:test successful="true">
               <x:label>assert final-ar-fig-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-ar-fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ar-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>graphic-tests</x:label>
         <x:scenario>
            <x:label>graphic-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/graphic-tests/graphic-test-1/pass.xml"/>
            <x:result href="result-d4078.xml"/>
            <x:test successful="true">
               <x:label>not report graphic-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert graphic-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>graphic-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/graphic-tests/graphic-test-1/fail.xml"/>
            <x:result href="result-d4087.xml"/>
            <x:test successful="true">
               <x:label>report graphic-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert graphic-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>graphic-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/graphic-tests/graphic-test-2/pass.xml"/>
            <x:result href="result-d4096.xml"/>
            <x:test successful="true">
               <x:label>not report graphic-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert graphic-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>graphic-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/graphic-tests/graphic-test-2/fail.xml"/>
            <x:result href="result-d4105.xml"/>
            <x:test successful="true">
               <x:label>report graphic-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert graphic-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>graphic-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/graphic-tests/graphic-test-3/pass.xml"/>
            <x:result href="result-d4114.xml"/>
            <x:test successful="true">
               <x:label>not report graphic-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert graphic-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>graphic-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/graphic-tests/graphic-test-3/fail.xml"/>
            <x:result href="result-d4123.xml"/>
            <x:test successful="true">
               <x:label>report graphic-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert graphic-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>media-tests</x:label>
         <x:scenario>
            <x:label>media-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-1/pass.xml"/>
            <x:result href="result-d4132.xml"/>
            <x:test successful="true">
               <x:label>not assert media-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-1/fail.xml"/>
            <x:result href="result-d4141.xml"/>
            <x:test successful="true">
               <x:label>assert media-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-2/pass.xml"/>
            <x:result href="result-d4150.xml"/>
            <x:test successful="true">
               <x:label>not assert media-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-2/fail.xml"/>
            <x:result href="result-d4159.xml"/>
            <x:test successful="true">
               <x:label>assert media-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-3/pass.xml"/>
            <x:result href="result-d4168.xml"/>
            <x:test successful="true">
               <x:label>not assert media-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-3/fail.xml"/>
            <x:result href="result-d4177.xml"/>
            <x:test successful="true">
               <x:label>assert media-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-4/pass.xml"/>
            <x:result href="result-d4186.xml"/>
            <x:test successful="true">
               <x:label>not report media-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-4/fail.xml"/>
            <x:result href="result-d4195.xml"/>
            <x:test successful="true">
               <x:label>report media-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-5/pass.xml"/>
            <x:result href="result-d4204.xml"/>
            <x:test successful="true">
               <x:label>not report media-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-5/fail.xml"/>
            <x:result href="result-d4213.xml"/>
            <x:test successful="true">
               <x:label>report media-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-6/pass.xml"/>
            <x:result href="result-d4222.xml"/>
            <x:test successful="true">
               <x:label>not report media-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-6/fail.xml"/>
            <x:result href="result-d4231.xml"/>
            <x:test successful="true">
               <x:label>report media-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-7/pass.xml"/>
            <x:result href="result-d4240.xml"/>
            <x:test successful="true">
               <x:label>not report media-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-7/fail.xml"/>
            <x:result href="result-d4249.xml"/>
            <x:test successful="true">
               <x:label>report media-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-8/pass.xml"/>
            <x:result href="result-d4258.xml"/>
            <x:test successful="true">
               <x:label>not report media-test-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-8/fail.xml"/>
            <x:result href="result-d4267.xml"/>
            <x:test successful="true">
               <x:label>report media-test-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-9/pass.xml"/>
            <x:result href="result-d4276.xml"/>
            <x:test successful="true">
               <x:label>not report media-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-9/fail.xml"/>
            <x:result href="result-d4285.xml"/>
            <x:test successful="true">
               <x:label>report media-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>video-test</x:label>
         <x:scenario>
            <x:label>pre-video-title-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-test/pre-video-title/pass.xml"/>
            <x:result href="result-d4294.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-video-title warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-video-title'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert video-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-video-title-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-test/pre-video-title/fail.xml"/>
            <x:result href="result-d4303.xml"/>
            <x:test successful="true">
               <x:label>assert pre-video-title warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-video-title'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert video-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-video-title-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-test/final-video-title/pass.xml"/>
            <x:result href="result-d4312.xml"/>
            <x:test successful="true">
               <x:label>not assert final-video-title error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-video-title'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert video-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-video-title-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-test/final-video-title/fail.xml"/>
            <x:result href="result-d4321.xml"/>
            <x:test successful="true">
               <x:label>assert final-video-title error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-video-title'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert video-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>supplementary-material-tests</x:label>
         <x:scenario>
            <x:label>supplementary-material-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-1/pass.xml"/>
            <x:result href="result-d4330.xml"/>
            <x:test successful="true">
               <x:label>not assert supplementary-material-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-1/fail.xml"/>
            <x:result href="result-d4339.xml"/>
            <x:test successful="true">
               <x:label>assert supplementary-material-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-2/pass.xml"/>
            <x:result href="result-d4348.xml"/>
            <x:test successful="true">
               <x:label>not report supplementary-material-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-2/fail.xml"/>
            <x:result href="result-d4357.xml"/>
            <x:test successful="true">
               <x:label>report supplementary-material-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-supplementary-material-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/pre-supplementary-material-test-3/pass.xml"/>
            <x:result href="result-d4366.xml"/>
            <x:test successful="true">
               <x:label>not report pre-supplementary-material-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-supplementary-material-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-supplementary-material-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/pre-supplementary-material-test-3/fail.xml"/>
            <x:result href="result-d4375.xml"/>
            <x:test successful="true">
               <x:label>report pre-supplementary-material-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-supplementary-material-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-supplementary-material-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/final-supplementary-material-test-3/pass.xml"/>
            <x:result href="result-d4384.xml"/>
            <x:test successful="true">
               <x:label>not report final-supplementary-material-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-supplementary-material-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-supplementary-material-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/final-supplementary-material-test-3/fail.xml"/>
            <x:result href="result-d4393.xml"/>
            <x:test successful="true">
               <x:label>report final-supplementary-material-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-supplementary-material-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-5/pass.xml"/>
            <x:result href="result-d4402.xml"/>
            <x:test successful="true">
               <x:label>not assert supplementary-material-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-5/fail.xml"/>
            <x:result href="result-d4411.xml"/>
            <x:test successful="true">
               <x:label>assert supplementary-material-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-6/pass.xml"/>
            <x:result href="result-d4420.xml"/>
            <x:test successful="true">
               <x:label>not assert supplementary-material-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-6/fail.xml"/>
            <x:result href="result-d4429.xml"/>
            <x:test successful="true">
               <x:label>assert supplementary-material-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-7/pass.xml"/>
            <x:result href="result-d4438.xml"/>
            <x:test successful="true">
               <x:label>not report supplementary-material-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-7/fail.xml"/>
            <x:result href="result-d4447.xml"/>
            <x:test successful="true">
               <x:label>report supplementary-material-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-8/pass.xml"/>
            <x:result href="result-d4456.xml"/>
            <x:test successful="true">
               <x:label>not report supplementary-material-test-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-8/fail.xml"/>
            <x:result href="result-d4465.xml"/>
            <x:test successful="true">
               <x:label>report supplementary-material-test-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>source-data-specific-tests</x:label>
         <x:scenario>
            <x:label>fig-data-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/source-data-specific-tests/fig-data-test-1/pass.xml"/>
            <x:result href="result-d4474.xml"/>
            <x:test successful="true">
               <x:label>not report fig-data-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-data-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert source-data-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'source-data-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-data-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/source-data-specific-tests/fig-data-test-1/fail.xml"/>
            <x:result href="result-d4483.xml"/>
            <x:test successful="true">
               <x:label>report fig-data-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-data-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert source-data-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'source-data-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>disp-formula-tests</x:label>
         <x:scenario>
            <x:label>disp-formula-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-formula-tests/disp-formula-test-2/pass.xml"/>
            <x:result href="result-d4492.xml"/>
            <x:test successful="true">
               <x:label>not assert disp-formula-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-formula-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-formula-tests/disp-formula-test-2/fail.xml"/>
            <x:result href="result-d4501.xml"/>
            <x:test successful="true">
               <x:label>assert disp-formula-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>inline-formula-tests</x:label>
         <x:scenario>
            <x:label>inline-formula-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/inline-formula-tests/inline-formula-test-1/pass.xml"/>
            <x:result href="result-d4510.xml"/>
            <x:test successful="true">
               <x:label>not assert inline-formula-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert inline-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/inline-formula-tests/inline-formula-test-1/fail.xml"/>
            <x:result href="result-d4519.xml"/>
            <x:test successful="true">
               <x:label>assert inline-formula-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert inline-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/inline-formula-tests/inline-formula-test-2/pass.xml"/>
            <x:result href="result-d4528.xml"/>
            <x:test successful="true">
               <x:label>not report inline-formula-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert inline-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/inline-formula-tests/inline-formula-test-2/fail.xml"/>
            <x:result href="result-d4537.xml"/>
            <x:test successful="true">
               <x:label>report inline-formula-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert inline-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/inline-formula-tests/inline-formula-test-3/pass.xml"/>
            <x:result href="result-d4546.xml"/>
            <x:test successful="true">
               <x:label>not report inline-formula-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert inline-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/inline-formula-tests/inline-formula-test-3/fail.xml"/>
            <x:result href="result-d4555.xml"/>
            <x:test successful="true">
               <x:label>report inline-formula-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert inline-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>math-tests</x:label>
         <x:scenario>
            <x:label>math-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-1/pass.xml"/>
            <x:result href="result-d4564.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-1/fail.xml"/>
            <x:result href="result-d4573.xml"/>
            <x:test successful="true">
               <x:label>report math-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-2/pass.xml"/>
            <x:result href="result-d4582.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-2/fail.xml"/>
            <x:result href="result-d4591.xml"/>
            <x:test successful="true">
               <x:label>report math-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-14-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-14/pass.xml"/>
            <x:result href="result-d4600.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-14 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-14'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-14-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-14/fail.xml"/>
            <x:result href="result-d4609.xml"/>
            <x:test successful="true">
               <x:label>report math-test-14 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-14'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-3/pass.xml"/>
            <x:result href="result-d4618.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-3/fail.xml"/>
            <x:result href="result-d4627.xml"/>
            <x:test successful="true">
               <x:label>report math-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-4/pass.xml"/>
            <x:result href="result-d4636.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-4/fail.xml"/>
            <x:result href="result-d4645.xml"/>
            <x:test successful="true">
               <x:label>report math-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-5/pass.xml"/>
            <x:result href="result-d4654.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-5/fail.xml"/>
            <x:result href="result-d4663.xml"/>
            <x:test successful="true">
               <x:label>report math-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-6/pass.xml"/>
            <x:result href="result-d4672.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-6/fail.xml"/>
            <x:result href="result-d4681.xml"/>
            <x:test successful="true">
               <x:label>report math-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-7/pass.xml"/>
            <x:result href="result-d4690.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-7/fail.xml"/>
            <x:result href="result-d4699.xml"/>
            <x:test successful="true">
               <x:label>report math-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-8/pass.xml"/>
            <x:result href="result-d4708.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-8 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-8/fail.xml"/>
            <x:result href="result-d4717.xml"/>
            <x:test successful="true">
               <x:label>report math-test-8 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-9/pass.xml"/>
            <x:result href="result-d4726.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-9/fail.xml"/>
            <x:result href="result-d4735.xml"/>
            <x:test successful="true">
               <x:label>report math-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-12-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-12/pass.xml"/>
            <x:result href="result-d4744.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-12 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-12-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-12/fail.xml"/>
            <x:result href="result-d4753.xml"/>
            <x:test successful="true">
               <x:label>report math-test-12 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-10-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-10/pass.xml"/>
            <x:result href="result-d4762.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-10 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-10-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-10/fail.xml"/>
            <x:result href="result-d4771.xml"/>
            <x:test successful="true">
               <x:label>report math-test-10 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-11-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-11/pass.xml"/>
            <x:result href="result-d4780.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-11 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-11-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-11/fail.xml"/>
            <x:result href="result-d4789.xml"/>
            <x:test successful="true">
               <x:label>report math-test-11 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-13/pass.xml"/>
            <x:result href="result-d4798.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-13 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-13/fail.xml"/>
            <x:result href="result-d4807.xml"/>
            <x:test successful="true">
               <x:label>report math-test-13 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-15-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-15/pass.xml"/>
            <x:result href="result-d4816.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-15 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-15-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-15/fail.xml"/>
            <x:result href="result-d4825.xml"/>
            <x:test successful="true">
               <x:label>report math-test-15 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-16-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-16/pass.xml"/>
            <x:result href="result-d4834.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-16 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-16-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-16/fail.xml"/>
            <x:result href="result-d4843.xml"/>
            <x:test successful="true">
               <x:label>report math-test-16 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>formula-child-tests</x:label>
         <x:scenario>
            <x:label>disp-formula-child-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/formula-child-tests/disp-formula-child-test-1/pass.xml"/>
            <x:result href="result-d4852.xml"/>
            <x:test successful="true">
               <x:label>not report disp-formula-child-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert formula-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'formula-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-formula-child-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/formula-child-tests/disp-formula-child-test-1/fail.xml"/>
            <x:result href="result-d4861.xml"/>
            <x:test successful="true">
               <x:label>report disp-formula-child-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert formula-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'formula-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-child-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/formula-child-tests/inline-formula-child-test-1/pass.xml"/>
            <x:result href="result-d4870.xml"/>
            <x:test successful="true">
               <x:label>not report inline-formula-child-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert formula-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'formula-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-child-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/formula-child-tests/inline-formula-child-test-1/fail.xml"/>
            <x:result href="result-d4879.xml"/>
            <x:test successful="true">
               <x:label>report inline-formula-child-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert formula-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'formula-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>table-wrap-tests</x:label>
         <x:scenario>
            <x:label>table-wrap-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-1/pass.xml"/>
            <x:result href="result-d4888.xml"/>
            <x:test successful="true">
               <x:label>not assert table-wrap-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-1/fail.xml"/>
            <x:result href="result-d4897.xml"/>
            <x:test successful="true">
               <x:label>assert table-wrap-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-2/pass.xml"/>
            <x:result href="result-d4906.xml"/>
            <x:test successful="true">
               <x:label>not report table-wrap-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-2/fail.xml"/>
            <x:result href="result-d4915.xml"/>
            <x:test successful="true">
               <x:label>report table-wrap-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-3/pass.xml"/>
            <x:result href="result-d4924.xml"/>
            <x:test successful="true">
               <x:label>not report table-wrap-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-3/fail.xml"/>
            <x:result href="result-d4933.xml"/>
            <x:test successful="true">
               <x:label>report table-wrap-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-4/pass.xml"/>
            <x:result href="result-d4942.xml"/>
            <x:test successful="true">
               <x:label>not report table-wrap-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-4/fail.xml"/>
            <x:result href="result-d4951.xml"/>
            <x:test successful="true">
               <x:label>report table-wrap-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kr-table-wrap-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/kr-table-wrap-test-1/pass.xml"/>
            <x:result href="result-d4960.xml"/>
            <x:test successful="true">
               <x:label>not report kr-table-wrap-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kr-table-wrap-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kr-table-wrap-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/kr-table-wrap-test-1/fail.xml"/>
            <x:result href="result-d4969.xml"/>
            <x:test successful="true">
               <x:label>report kr-table-wrap-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kr-table-wrap-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-table-wrap-cite-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/pre-table-wrap-cite-1/pass.xml"/>
            <x:result href="result-d4978.xml"/>
            <x:test successful="true">
               <x:label>not report pre-table-wrap-cite-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-table-wrap-cite-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-table-wrap-cite-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/pre-table-wrap-cite-1/fail.xml"/>
            <x:result href="result-d4987.xml"/>
            <x:test successful="true">
               <x:label>report pre-table-wrap-cite-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-table-wrap-cite-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-table-wrap-cite-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/final-table-wrap-cite-1/pass.xml"/>
            <x:result href="result-d4996.xml"/>
            <x:test successful="true">
               <x:label>not report final-table-wrap-cite-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-table-wrap-cite-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-table-wrap-cite-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/final-table-wrap-cite-1/fail.xml"/>
            <x:result href="result-d5005.xml"/>
            <x:test successful="true">
               <x:label>report final-table-wrap-cite-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-table-wrap-cite-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feat-table-wrap-cite-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/feat-table-wrap-cite-1/pass.xml"/>
            <x:result href="result-d5014.xml"/>
            <x:test successful="true">
               <x:label>not report feat-table-wrap-cite-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feat-table-wrap-cite-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feat-table-wrap-cite-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/feat-table-wrap-cite-1/fail.xml"/>
            <x:result href="result-d5023.xml"/>
            <x:test successful="true">
               <x:label>report feat-table-wrap-cite-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feat-table-wrap-cite-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kr-table-not-tagged-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/kr-table-not-tagged/pass.xml"/>
            <x:result href="result-d5032.xml"/>
            <x:test successful="true">
               <x:label>not report kr-table-not-tagged error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kr-table-not-tagged'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kr-table-not-tagged-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/kr-table-not-tagged/fail.xml"/>
            <x:result href="result-d5041.xml"/>
            <x:test successful="true">
               <x:label>report kr-table-not-tagged error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kr-table-not-tagged'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>body-table-label-tests</x:label>
         <x:scenario>
            <x:label>body-table-label-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-table-label-tests/body-table-label-test-1/pass.xml"/>
            <x:result href="result-d5050.xml"/>
            <x:test successful="true">
               <x:label>not assert body-table-label-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-label-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-table-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>body-table-label-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-table-label-tests/body-table-label-test-1/fail.xml"/>
            <x:result href="result-d5059.xml"/>
            <x:test successful="true">
               <x:label>assert body-table-label-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-label-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-table-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-table-label-tests</x:label>
         <x:scenario>
            <x:label>app-table-label-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-label-tests/app-table-label-test-1/pass.xml"/>
            <x:result href="result-d5068.xml"/>
            <x:test successful="true">
               <x:label>not assert app-table-label-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-table-label-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-label-tests/app-table-label-test-1/fail.xml"/>
            <x:result href="result-d5077.xml"/>
            <x:test successful="true">
               <x:label>assert app-table-label-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-table-label-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-label-tests/app-table-label-test-2/pass.xml"/>
            <x:result href="result-d5086.xml"/>
            <x:test successful="true">
               <x:label>not assert app-table-label-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-table-label-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-label-tests/app-table-label-test-2/fail.xml"/>
            <x:result href="result-d5095.xml"/>
            <x:test successful="true">
               <x:label>assert app-table-label-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>table-tests</x:label>
         <x:scenario>
            <x:label>table-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-tests/table-test-1/pass.xml"/>
            <x:result href="result-d5104.xml"/>
            <x:test successful="true">
               <x:label>not report table-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-tests/table-test-1/fail.xml"/>
            <x:result href="result-d5113.xml"/>
            <x:test successful="true">
               <x:label>report table-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-tests/table-test-2/pass.xml"/>
            <x:result href="result-d5122.xml"/>
            <x:test successful="true">
               <x:label>not assert table-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-tests/table-test-2/fail.xml"/>
            <x:result href="result-d5131.xml"/>
            <x:test successful="true">
               <x:label>assert table-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>tbody-tests</x:label>
         <x:scenario>
            <x:label>tbody-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tbody-tests/tbody-test-1/pass.xml"/>
            <x:result href="result-d5140.xml"/>
            <x:test successful="true">
               <x:label>not report tbody-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tbody-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert tbody-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tbody-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tbody-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tbody-tests/tbody-test-1/fail.xml"/>
            <x:result href="result-d5149.xml"/>
            <x:test successful="true">
               <x:label>report tbody-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tbody-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert tbody-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tbody-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>thead-tests</x:label>
         <x:scenario>
            <x:label>thead-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/thead-tests/thead-test-1/pass.xml"/>
            <x:result href="result-d5158.xml"/>
            <x:test successful="true">
               <x:label>not report thead-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'thead-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert thead-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'thead-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>thead-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/thead-tests/thead-test-1/fail.xml"/>
            <x:result href="result-d5167.xml"/>
            <x:test successful="true">
               <x:label>report thead-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'thead-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert thead-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'thead-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>tr-tests</x:label>
         <x:scenario>
            <x:label>tr-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tr-tests/tr-test-1/pass.xml"/>
            <x:result href="result-d5176.xml"/>
            <x:test successful="true">
               <x:label>not report tr-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert tr-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tr-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tr-tests/tr-test-1/fail.xml"/>
            <x:result href="result-d5185.xml"/>
            <x:test successful="true">
               <x:label>report tr-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert tr-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tr-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tr-tests/tr-test-2/pass.xml"/>
            <x:result href="result-d5194.xml"/>
            <x:test successful="true">
               <x:label>not report tr-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert tr-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tr-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tr-tests/tr-test-2/fail.xml"/>
            <x:result href="result-d5203.xml"/>
            <x:test successful="true">
               <x:label>report tr-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert tr-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tr-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tr-tests/tr-test-3/pass.xml"/>
            <x:result href="result-d5212.xml"/>
            <x:test successful="true">
               <x:label>not report tr-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert tr-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tr-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tr-tests/tr-test-3/fail.xml"/>
            <x:result href="result-d5221.xml"/>
            <x:test successful="true">
               <x:label>report tr-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert tr-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>td-child-tests</x:label>
         <x:scenario>
            <x:label>td-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/td-child-tests/td-child-test/pass.xml"/>
            <x:result href="result-d5230.xml"/>
            <x:test successful="true">
               <x:label>not assert td-child-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'td-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert td-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'td-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>td-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/td-child-tests/td-child-test/fail.xml"/>
            <x:result href="result-d5239.xml"/>
            <x:test successful="true">
               <x:label>assert td-child-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'td-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert td-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'td-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>th-child-tests</x:label>
         <x:scenario>
            <x:label>th-child-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/th-child-tests/th-child-test-1/pass.xml"/>
            <x:result href="result-d5248.xml"/>
            <x:test successful="true">
               <x:label>not assert th-child-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert th-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>th-child-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/th-child-tests/th-child-test-1/fail.xml"/>
            <x:result href="result-d5257.xml"/>
            <x:test successful="true">
               <x:label>assert th-child-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert th-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>th-child-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/th-child-tests/th-child-test-2/pass.xml"/>
            <x:result href="result-d5266.xml"/>
            <x:test successful="true">
               <x:label>not report th-child-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert th-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>th-child-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/th-child-tests/th-child-test-2/fail.xml"/>
            <x:result href="result-d5275.xml"/>
            <x:test successful="true">
               <x:label>report th-child-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert th-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fn-tests</x:label>
         <x:scenario>
            <x:label>fn-xref-presence-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fn-tests/fn-xref-presence-test/pass.xml"/>
            <x:result href="result-d5284.xml"/>
            <x:test successful="true">
               <x:label>not assert fn-xref-presence-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-xref-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fn-xref-presence-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fn-tests/fn-xref-presence-test/fail.xml"/>
            <x:result href="result-d5293.xml"/>
            <x:test successful="true">
               <x:label>assert fn-xref-presence-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-xref-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>list-item-tests</x:label>
         <x:scenario>
            <x:label>bullet-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/bullet-test-1/pass.xml"/>
            <x:result href="result-d5302.xml"/>
            <x:test successful="true">
               <x:label>not report bullet-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bullet-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bullet-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/bullet-test-1/fail.xml"/>
            <x:result href="result-d5311.xml"/>
            <x:test successful="true">
               <x:label>report bullet-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bullet-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bullet-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/bullet-test-2/pass.xml"/>
            <x:result href="result-d5320.xml"/>
            <x:test successful="true">
               <x:label>not report bullet-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bullet-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bullet-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/bullet-test-2/fail.xml"/>
            <x:result href="result-d5329.xml"/>
            <x:test successful="true">
               <x:label>report bullet-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bullet-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>order-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/order-test-1/pass.xml"/>
            <x:result href="result-d5338.xml"/>
            <x:test successful="true">
               <x:label>not report order-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'order-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>order-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/order-test-1/fail.xml"/>
            <x:result href="result-d5347.xml"/>
            <x:test successful="true">
               <x:label>report order-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'order-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>alpha-lower-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/alpha-lower-test-1/pass.xml"/>
            <x:result href="result-d5356.xml"/>
            <x:test successful="true">
               <x:label>not report alpha-lower-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'alpha-lower-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>alpha-lower-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/alpha-lower-test-1/fail.xml"/>
            <x:result href="result-d5365.xml"/>
            <x:test successful="true">
               <x:label>report alpha-lower-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'alpha-lower-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>alpha-upper-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/alpha-upper-test-1/pass.xml"/>
            <x:result href="result-d5374.xml"/>
            <x:test successful="true">
               <x:label>not report alpha-upper-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'alpha-upper-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>alpha-upper-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/alpha-upper-test-1/fail.xml"/>
            <x:result href="result-d5383.xml"/>
            <x:test successful="true">
               <x:label>report alpha-upper-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'alpha-upper-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>roman-lower-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/roman-lower-test-1/pass.xml"/>
            <x:result href="result-d5392.xml"/>
            <x:test successful="true">
               <x:label>not report roman-lower-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'roman-lower-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>roman-lower-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/roman-lower-test-1/fail.xml"/>
            <x:result href="result-d5401.xml"/>
            <x:test successful="true">
               <x:label>report roman-lower-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'roman-lower-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>roman-upper-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/roman-upper-test-1/pass.xml"/>
            <x:result href="result-d5410.xml"/>
            <x:test successful="true">
               <x:label>not report roman-upper-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'roman-upper-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>roman-upper-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/roman-upper-test-1/fail.xml"/>
            <x:result href="result-d5419.xml"/>
            <x:test successful="true">
               <x:label>report roman-upper-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'roman-upper-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-1/pass.xml"/>
            <x:result href="result-d5428.xml"/>
            <x:test successful="true">
               <x:label>not report simple-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-1/fail.xml"/>
            <x:result href="result-d5437.xml"/>
            <x:test successful="true">
               <x:label>report simple-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-2/pass.xml"/>
            <x:result href="result-d5446.xml"/>
            <x:test successful="true">
               <x:label>not report simple-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-2/fail.xml"/>
            <x:result href="result-d5455.xml"/>
            <x:test successful="true">
               <x:label>report simple-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-3/pass.xml"/>
            <x:result href="result-d5464.xml"/>
            <x:test successful="true">
               <x:label>not report simple-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-3/fail.xml"/>
            <x:result href="result-d5473.xml"/>
            <x:test successful="true">
               <x:label>report simple-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-4/pass.xml"/>
            <x:result href="result-d5482.xml"/>
            <x:test successful="true">
               <x:label>not report simple-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-4/fail.xml"/>
            <x:result href="result-d5491.xml"/>
            <x:test successful="true">
               <x:label>report simple-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-5/pass.xml"/>
            <x:result href="result-d5500.xml"/>
            <x:test successful="true">
               <x:label>not report simple-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-5/fail.xml"/>
            <x:result href="result-d5509.xml"/>
            <x:test successful="true">
               <x:label>report simple-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>list-item-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/list-item-test-1/pass.xml"/>
            <x:result href="result-d5518.xml"/>
            <x:test successful="true">
               <x:label>not report list-item-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>list-item-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/list-item-test-1/fail.xml"/>
            <x:result href="result-d5527.xml"/>
            <x:test successful="true">
               <x:label>report list-item-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>general-video</x:label>
         <x:scenario>
            <x:label>pre-video-cite-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/pre-video-cite/pass.xml"/>
            <x:result href="result-d5536.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-video-cite warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-video-cite'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-video-cite-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/pre-video-cite/fail.xml"/>
            <x:result href="result-d5545.xml"/>
            <x:test successful="true">
               <x:label>assert pre-video-cite warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-video-cite'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-video-cite-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/final-video-cite/pass.xml"/>
            <x:result href="result-d5554.xml"/>
            <x:test successful="true">
               <x:label>not assert final-video-cite error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-video-cite'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-video-cite-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/final-video-cite/fail.xml"/>
            <x:result href="result-d5563.xml"/>
            <x:test successful="true">
               <x:label>assert final-video-cite error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-video-cite'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-placement-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/video-placement-1/pass.xml"/>
            <x:result href="result-d5572.xml"/>
            <x:test successful="true">
               <x:label>not report video-placement-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-placement-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-placement-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/video-placement-1/fail.xml"/>
            <x:result href="result-d5581.xml"/>
            <x:test successful="true">
               <x:label>report video-placement-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-placement-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-placement-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/video-placement-2/pass.xml"/>
            <x:result href="result-d5590.xml"/>
            <x:test successful="true">
               <x:label>not report video-placement-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-placement-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-placement-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/video-placement-2/fail.xml"/>
            <x:result href="result-d5599.xml"/>
            <x:test successful="true">
               <x:label>report video-placement-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-placement-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-placement-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/video-placement-3/pass.xml"/>
            <x:result href="result-d5608.xml"/>
            <x:test successful="true">
               <x:label>not report video-placement-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-placement-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-placement-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/video-placement-3/fail.xml"/>
            <x:result href="result-d5617.xml"/>
            <x:test successful="true">
               <x:label>report video-placement-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-placement-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>body-video-specific</x:label>
         <x:scenario>
            <x:label>body-video-position-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/body-video-position-test-1/pass.xml"/>
            <x:result href="result-d5626.xml"/>
            <x:test successful="true">
               <x:label>not report body-video-position-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-position-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>body-video-position-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/body-video-position-test-1/fail.xml"/>
            <x:result href="result-d5635.xml"/>
            <x:test successful="true">
               <x:label>report body-video-position-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-position-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-video-label-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/fig-video-label-test/pass.xml"/>
            <x:result href="result-d5644.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-video-label-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-video-label-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-video-label-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/fig-video-label-test/fail.xml"/>
            <x:result href="result-d5653.xml"/>
            <x:test successful="true">
               <x:label>assert fig-video-label-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-video-label-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-video-position-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/fig-video-position-test/pass.xml"/>
            <x:result href="result-d5662.xml"/>
            <x:test successful="true">
               <x:label>not report fig-video-position-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-video-position-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-video-position-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/fig-video-position-test/fail.xml"/>
            <x:result href="result-d5671.xml"/>
            <x:test successful="true">
               <x:label>report fig-video-position-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-video-position-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-video-check-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/fig-video-check-1/pass.xml"/>
            <x:result href="result-d5680.xml"/>
            <x:test successful="true">
               <x:label>not report fig-video-check-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-video-check-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-video-check-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/fig-video-check-1/fail.xml"/>
            <x:result href="result-d5689.xml"/>
            <x:test successful="true">
               <x:label>report fig-video-check-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-video-check-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>body-table-pos-conformance</x:label>
         <x:scenario>
            <x:label>pre-body-table-report-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-table-pos-conformance/pre-body-table-report/pass.xml"/>
            <x:result href="result-d5698.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-body-table-report warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-body-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-body-table-report-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-table-pos-conformance/pre-body-table-report/fail.xml"/>
            <x:result href="result-d5707.xml"/>
            <x:test successful="true">
               <x:label>assert pre-body-table-report warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-body-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-body-table-report-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-table-pos-conformance/final-body-table-report/pass.xml"/>
            <x:result href="result-d5716.xml"/>
            <x:test successful="true">
               <x:label>not assert final-body-table-report error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-body-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-body-table-report-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-table-pos-conformance/final-body-table-report/fail.xml"/>
            <x:result href="result-d5725.xml"/>
            <x:test successful="true">
               <x:label>assert final-body-table-report error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-body-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-table-pos-conformance</x:label>
         <x:scenario>
            <x:label>pre-app-table-report-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-pos-conformance/pre-app-table-report/pass.xml"/>
            <x:result href="result-d5734.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-app-table-report warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-app-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-app-table-report-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-pos-conformance/pre-app-table-report/fail.xml"/>
            <x:result href="result-d5743.xml"/>
            <x:test successful="true">
               <x:label>assert pre-app-table-report warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-app-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-app-table-report-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-pos-conformance/final-app-table-report/pass.xml"/>
            <x:result href="result-d5752.xml"/>
            <x:test successful="true">
               <x:label>not assert final-app-table-report error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-app-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-app-table-report-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-pos-conformance/final-app-table-report/fail.xml"/>
            <x:result href="result-d5761.xml"/>
            <x:test successful="true">
               <x:label>assert final-app-table-report error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-app-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-specific-tests</x:label>
         <x:scenario>
            <x:label>fig-specific-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-1/pass.xml"/>
            <x:result href="result-d5770.xml"/>
            <x:test successful="true">
               <x:label>not report fig-specific-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-1/fail.xml"/>
            <x:result href="result-d5779.xml"/>
            <x:test successful="true">
               <x:label>report fig-specific-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-2/pass.xml"/>
            <x:result href="result-d5788.xml"/>
            <x:test successful="true">
               <x:label>not report fig-specific-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-2/fail.xml"/>
            <x:result href="result-d5797.xml"/>
            <x:test successful="true">
               <x:label>report fig-specific-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-3/pass.xml"/>
            <x:result href="result-d5806.xml"/>
            <x:test successful="true">
               <x:label>not report fig-specific-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-3/fail.xml"/>
            <x:result href="result-d5815.xml"/>
            <x:test successful="true">
               <x:label>report fig-specific-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-fig-specific-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/pre-fig-specific-test-4/pass.xml"/>
            <x:result href="result-d5824.xml"/>
            <x:test successful="true">
               <x:label>not report pre-fig-specific-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-fig-specific-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/pre-fig-specific-test-4/fail.xml"/>
            <x:result href="result-d5833.xml"/>
            <x:test successful="true">
               <x:label>report pre-fig-specific-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-fig-specific-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/final-fig-specific-test-4/pass.xml"/>
            <x:result href="result-d5842.xml"/>
            <x:test successful="true">
               <x:label>not report final-fig-specific-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-fig-specific-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/final-fig-specific-test-4/fail.xml"/>
            <x:result href="result-d5851.xml"/>
            <x:test successful="true">
               <x:label>report final-fig-specific-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feat-fig-specific-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/feat-fig-specific-test-4/pass.xml"/>
            <x:result href="result-d5860.xml"/>
            <x:test successful="true">
               <x:label>not report feat-fig-specific-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feat-fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feat-fig-specific-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/feat-fig-specific-test-4/fail.xml"/>
            <x:result href="result-d5869.xml"/>
            <x:test successful="true">
               <x:label>report feat-fig-specific-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feat-fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-4/pass.xml"/>
            <x:result href="result-d5878.xml"/>
            <x:test successful="true">
               <x:label>not report fig-specific-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-4/fail.xml"/>
            <x:result href="result-d5887.xml"/>
            <x:test successful="true">
               <x:label>report fig-specific-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-5/pass.xml"/>
            <x:result href="result-d5896.xml"/>
            <x:test successful="true">
               <x:label>not report fig-specific-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-5/fail.xml"/>
            <x:result href="result-d5905.xml"/>
            <x:test successful="true">
               <x:label>report fig-specific-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-label-tests</x:label>
         <x:scenario>
            <x:label>fig-label-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-label-tests/fig-label-test-1/pass.xml"/>
            <x:result href="result-d5914.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-label-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-label-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-label-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-label-tests/fig-label-test-1/fail.xml"/>
            <x:result href="result-d5923.xml"/>
            <x:test successful="true">
               <x:label>assert fig-label-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-label-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-sup-tests</x:label>
         <x:scenario>
            <x:label>fig-sup-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-1/pass.xml"/>
            <x:result href="result-d5932.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-sup-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-1/fail.xml"/>
            <x:result href="result-d5941.xml"/>
            <x:test successful="true">
               <x:label>assert fig-sup-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-2/pass.xml"/>
            <x:result href="result-d5950.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-sup-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-2/fail.xml"/>
            <x:result href="result-d5959.xml"/>
            <x:test successful="true">
               <x:label>assert fig-sup-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-3/pass.xml"/>
            <x:result href="result-d5968.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-sup-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-3/fail.xml"/>
            <x:result href="result-d5977.xml"/>
            <x:test successful="true">
               <x:label>assert fig-sup-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-4/pass.xml"/>
            <x:result href="result-d5986.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-sup-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-4/fail.xml"/>
            <x:result href="result-d5995.xml"/>
            <x:test successful="true">
               <x:label>assert fig-sup-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>rep-fig-tests</x:label>
         <x:scenario>
            <x:label>resp-fig-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-tests/resp-fig-test-2/pass.xml"/>
            <x:result href="result-d6004.xml"/>
            <x:test successful="true">
               <x:label>not assert resp-fig-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rep-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>resp-fig-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-tests/resp-fig-test-2/fail.xml"/>
            <x:result href="result-d6013.xml"/>
            <x:test successful="true">
               <x:label>assert resp-fig-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rep-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-fig-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-tests/reply-fig-test-2/pass.xml"/>
            <x:result href="result-d6022.xml"/>
            <x:test successful="true">
               <x:label>not assert reply-fig-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rep-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-fig-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-tests/reply-fig-test-2/fail.xml"/>
            <x:result href="result-d6031.xml"/>
            <x:test successful="true">
               <x:label>assert reply-fig-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rep-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>box-fig-tests</x:label>
         <x:scenario>
            <x:label>box-fig-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/box-fig-tests/box-fig-test-1/pass.xml"/>
            <x:result href="result-d6040.xml"/>
            <x:test successful="true">
               <x:label>not assert box-fig-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert box-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>box-fig-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/box-fig-tests/box-fig-test-1/fail.xml"/>
            <x:result href="result-d6049.xml"/>
            <x:test successful="true">
               <x:label>assert box-fig-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert box-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-fig-tests</x:label>
         <x:scenario>
            <x:label>app-fig-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-tests/app-fig-test-1/pass.xml"/>
            <x:result href="result-d6058.xml"/>
            <x:test successful="true">
               <x:label>not assert app-fig-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-tests/app-fig-test-1/fail.xml"/>
            <x:result href="result-d6067.xml"/>
            <x:test successful="true">
               <x:label>assert app-fig-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-tests/app-fig-test-2/pass.xml"/>
            <x:result href="result-d6076.xml"/>
            <x:test successful="true">
               <x:label>not report app-fig-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-tests/app-fig-test-2/fail.xml"/>
            <x:result href="result-d6085.xml"/>
            <x:test successful="true">
               <x:label>report app-fig-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-fig-sup-tests</x:label>
         <x:scenario>
            <x:label>app-fig-sup-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-sup-tests/app-fig-sup-test-1/pass.xml"/>
            <x:result href="result-d6094.xml"/>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-sup-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-sup-tests/app-fig-sup-test-1/fail.xml"/>
            <x:result href="result-d6103.xml"/>
            <x:test successful="true">
               <x:label>assert app-fig-sup-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-sup-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-sup-tests/app-fig-sup-test-2/pass.xml"/>
            <x:result href="result-d6112.xml"/>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-sup-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-sup-tests/app-fig-sup-test-2/fail.xml"/>
            <x:result href="result-d6121.xml"/>
            <x:test successful="true">
               <x:label>assert app-fig-sup-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ra-body-tests</x:label>
         <x:scenario>
            <x:label>ra-sec-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-1/pass.xml"/>
            <x:result href="result-d6130.xml"/>
            <x:test successful="true">
               <x:label>not report ra-sec-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-1/fail.xml"/>
            <x:result href="result-d6139.xml"/>
            <x:test successful="true">
               <x:label>report ra-sec-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-2/pass.xml"/>
            <x:result href="result-d6148.xml"/>
            <x:test successful="true">
               <x:label>not report ra-sec-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-2/fail.xml"/>
            <x:result href="result-d6157.xml"/>
            <x:test successful="true">
               <x:label>report ra-sec-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-3/pass.xml"/>
            <x:result href="result-d6166.xml"/>
            <x:test successful="true">
               <x:label>not report ra-sec-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-3/fail.xml"/>
            <x:result href="result-d6175.xml"/>
            <x:test successful="true">
               <x:label>report ra-sec-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-4/pass.xml"/>
            <x:result href="result-d6184.xml"/>
            <x:test successful="true">
               <x:label>not report ra-sec-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-4/fail.xml"/>
            <x:result href="result-d6193.xml"/>
            <x:test successful="true">
               <x:label>report ra-sec-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>top-level-sec-tests</x:label>
         <x:scenario>
            <x:label>top-sec-id-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/top-level-sec-tests/top-sec-id/pass.xml"/>
            <x:result href="result-d6202.xml"/>
            <x:test successful="true">
               <x:label>not assert top-sec-id error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'top-sec-id'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert top-level-sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'top-level-sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>top-sec-id-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/top-level-sec-tests/top-sec-id/fail.xml"/>
            <x:result href="result-d6211.xml"/>
            <x:test successful="true">
               <x:label>assert top-sec-id error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'top-sec-id'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert top-level-sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'top-level-sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/top-level-sec-tests/sec-conformity/pass.xml"/>
            <x:result href="result-d6220.xml"/>
            <x:test successful="true">
               <x:label>not report sec-conformity warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert top-level-sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'top-level-sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/top-level-sec-tests/sec-conformity/fail.xml"/>
            <x:result href="result-d6229.xml"/>
            <x:test successful="true">
               <x:label>report sec-conformity warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert top-level-sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'top-level-sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>lower-level-sec-tests</x:label>
         <x:scenario>
            <x:label>lower-sec-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/lower-level-sec-tests/lower-sec-test-1/pass.xml"/>
            <x:result href="result-d6238.xml"/>
            <x:test successful="true">
               <x:label>not assert lower-sec-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'lower-sec-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert lower-level-sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'lower-level-sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>lower-sec-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/lower-level-sec-tests/lower-sec-test-1/fail.xml"/>
            <x:result href="result-d6247.xml"/>
            <x:test successful="true">
               <x:label>assert lower-sec-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'lower-sec-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert lower-level-sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'lower-level-sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>article-title-tests</x:label>
         <x:scenario>
            <x:label>article-type-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/article-type-title-test-1/pass.xml"/>
            <x:result href="result-d6256.xml"/>
            <x:test successful="true">
               <x:label>not report article-type-title-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-type-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-type-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/article-type-title-test-1/fail.xml"/>
            <x:result href="result-d6265.xml"/>
            <x:test successful="true">
               <x:label>report article-type-title-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-type-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-type-title-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/article-type-title-test-2/pass.xml"/>
            <x:result href="result-d6274.xml"/>
            <x:test successful="true">
               <x:label>not report article-type-title-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-type-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-type-title-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/article-type-title-test-2/fail.xml"/>
            <x:result href="result-d6283.xml"/>
            <x:test successful="true">
               <x:label>report article-type-title-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-type-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sc-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/sc-title-test-1/pass.xml"/>
            <x:result href="result-d6292.xml"/>
            <x:test successful="true">
               <x:label>not report sc-title-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sc-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sc-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/sc-title-test-1/fail.xml"/>
            <x:result href="result-d6301.xml"/>
            <x:test successful="true">
               <x:label>report sc-title-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sc-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sc-title-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/sc-title-test-2/pass.xml"/>
            <x:result href="result-d6310.xml"/>
            <x:test successful="true">
               <x:label>not report sc-title-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sc-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sc-title-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/sc-title-test-2/fail.xml"/>
            <x:result href="result-d6319.xml"/>
            <x:test successful="true">
               <x:label>report sc-title-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sc-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>sec-title-tests</x:label>
         <x:scenario>
            <x:label>sec-type-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-tests/sec-type-title-test/pass.xml"/>
            <x:result href="result-d6328.xml"/>
            <x:test successful="true">
               <x:label>not report sec-type-title-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-type-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-type-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-tests/sec-type-title-test/fail.xml"/>
            <x:result href="result-d6337.xml"/>
            <x:test successful="true">
               <x:label>report sec-type-title-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-type-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-title-tests</x:label>
         <x:scenario>
            <x:label>fig-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-1/pass.xml"/>
            <x:result href="result-d6346.xml"/>
            <x:test successful="true">
               <x:label>not report fig-title-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-1/fail.xml"/>
            <x:result href="result-d6355.xml"/>
            <x:test successful="true">
               <x:label>report fig-title-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-2/pass.xml"/>
            <x:result href="result-d6364.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-title-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-2/fail.xml"/>
            <x:result href="result-d6373.xml"/>
            <x:test successful="true">
               <x:label>assert fig-title-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-3/pass.xml"/>
            <x:result href="result-d6382.xml"/>
            <x:test successful="true">
               <x:label>not report fig-title-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-3/fail.xml"/>
            <x:result href="result-d6391.xml"/>
            <x:test successful="true">
               <x:label>report fig-title-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-4/pass.xml"/>
            <x:result href="result-d6400.xml"/>
            <x:test successful="true">
               <x:label>not report fig-title-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-4/fail.xml"/>
            <x:result href="result-d6409.xml"/>
            <x:test successful="true">
               <x:label>report fig-title-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-5/pass.xml"/>
            <x:result href="result-d6418.xml"/>
            <x:test successful="true">
               <x:label>not report fig-title-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-5/fail.xml"/>
            <x:result href="result-d6427.xml"/>
            <x:test successful="true">
               <x:label>report fig-title-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>supplementary-material-title-tests</x:label>
         <x:scenario>
            <x:label>supplementary-material-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-1/pass.xml"/>
            <x:result href="result-d6436.xml"/>
            <x:test successful="true">
               <x:label>not report supplementary-material-title-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-1/fail.xml"/>
            <x:result href="result-d6445.xml"/>
            <x:test successful="true">
               <x:label>report supplementary-material-title-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-2/pass.xml"/>
            <x:result href="result-d6454.xml"/>
            <x:test successful="true">
               <x:label>not assert supplementary-material-title-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-2/fail.xml"/>
            <x:result href="result-d6463.xml"/>
            <x:test successful="true">
               <x:label>assert supplementary-material-title-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-3/pass.xml"/>
            <x:result href="result-d6472.xml"/>
            <x:test successful="true">
               <x:label>not report supplementary-material-title-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-3/fail.xml"/>
            <x:result href="result-d6481.xml"/>
            <x:test successful="true">
               <x:label>report supplementary-material-title-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-4/pass.xml"/>
            <x:result href="result-d6490.xml"/>
            <x:test successful="true">
               <x:label>not report supplementary-material-title-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-4/fail.xml"/>
            <x:result href="result-d6499.xml"/>
            <x:test successful="true">
               <x:label>report supplementary-material-title-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>video-title-tests</x:label>
         <x:scenario>
            <x:label>video-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-1/pass.xml"/>
            <x:result href="result-d6508.xml"/>
            <x:test successful="true">
               <x:label>not report video-title-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-1/fail.xml"/>
            <x:result href="result-d6517.xml"/>
            <x:test successful="true">
               <x:label>report video-title-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-2/pass.xml"/>
            <x:result href="result-d6526.xml"/>
            <x:test successful="true">
               <x:label>not assert video-title-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-2/fail.xml"/>
            <x:result href="result-d6535.xml"/>
            <x:test successful="true">
               <x:label>assert video-title-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-3/pass.xml"/>
            <x:result href="result-d6544.xml"/>
            <x:test successful="true">
               <x:label>not report video-title-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-3/fail.xml"/>
            <x:result href="result-d6553.xml"/>
            <x:test successful="true">
               <x:label>report video-title-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-4/pass.xml"/>
            <x:result href="result-d6562.xml"/>
            <x:test successful="true">
               <x:label>not report video-title-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-4/fail.xml"/>
            <x:result href="result-d6571.xml"/>
            <x:test successful="true">
               <x:label>report video-title-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ack-title-tests</x:label>
         <x:scenario>
            <x:label>ack-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-title-tests/ack-title-test/pass.xml"/>
            <x:result href="result-d6580.xml"/>
            <x:test successful="true">
               <x:label>not assert ack-title-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ack-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-title-tests/ack-title-test/fail.xml"/>
            <x:result href="result-d6589.xml"/>
            <x:test successful="true">
               <x:label>assert ack-title-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ack-content-tests</x:label>
         <x:scenario>
            <x:label>ack-full-stop-intial-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-content-tests/ack-full-stop-intial-test/pass.xml"/>
            <x:result href="result-d6598.xml"/>
            <x:test successful="true">
               <x:label>not report ack-full-stop-intial-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-full-stop-intial-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-content-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-content-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ack-full-stop-intial-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-content-tests/ack-full-stop-intial-test/fail.xml"/>
            <x:result href="result-d6607.xml"/>
            <x:test successful="true">
               <x:label>report ack-full-stop-intial-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-full-stop-intial-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-content-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-content-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref-list-title-tests</x:label>
         <x:scenario>
            <x:label>ref-list-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-list-title-tests/ref-list-title-test/pass.xml"/>
            <x:result href="result-d6616.xml"/>
            <x:test successful="true">
               <x:label>not assert ref-list-title-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-list-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-list-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-list-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-list-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-list-title-tests/ref-list-title-test/fail.xml"/>
            <x:result href="result-d6625.xml"/>
            <x:test successful="true">
               <x:label>assert ref-list-title-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-list-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-list-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-list-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-title-tests</x:label>
         <x:scenario>
            <x:label>app-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-title-tests/app-title-test/pass.xml"/>
            <x:result href="result-d6634.xml"/>
            <x:test successful="true">
               <x:label>not assert app-title-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-title-tests/app-title-test/fail.xml"/>
            <x:result href="result-d6643.xml"/>
            <x:test successful="true">
               <x:label>assert app-title-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>comp-int-title-tests</x:label>
         <x:scenario>
            <x:label>comp-int-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-title-tests/comp-int-title-test/pass.xml"/>
            <x:result href="result-d6652.xml"/>
            <x:test successful="true">
               <x:label>not assert comp-int-title-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>comp-int-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-title-tests/comp-int-title-test/fail.xml"/>
            <x:result href="result-d6661.xml"/>
            <x:test successful="true">
               <x:label>assert comp-int-title-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>auth-cont-title-tests</x:label>
         <x:scenario>
            <x:label>auth-cont-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-cont-title-tests/auth-cont-title-test/pass.xml"/>
            <x:result href="result-d6670.xml"/>
            <x:test successful="true">
               <x:label>not assert auth-cont-title-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-cont-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>auth-cont-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-cont-title-tests/auth-cont-title-test/fail.xml"/>
            <x:result href="result-d6679.xml"/>
            <x:test successful="true">
               <x:label>assert auth-cont-title-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-cont-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ethics-title-tests</x:label>
         <x:scenario>
            <x:label>ethics-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-title-tests/ethics-title-test/pass.xml"/>
            <x:result href="result-d6688.xml"/>
            <x:test successful="true">
               <x:label>not assert ethics-title-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-title-tests/ethics-title-test/fail.xml"/>
            <x:result href="result-d6697.xml"/>
            <x:test successful="true">
               <x:label>assert ethics-title-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>dec-letter-title-tests</x:label>
         <x:scenario>
            <x:label>dec-letter-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-title-tests/dec-letter-title-test/pass.xml"/>
            <x:result href="result-d6706.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-title-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-title-tests/dec-letter-title-test/fail.xml"/>
            <x:result href="result-d6715.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-title-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>reply-title-tests</x:label>
         <x:scenario>
            <x:label>reply-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-title-tests/reply-title-test/pass.xml"/>
            <x:result href="result-d6724.xml"/>
            <x:test successful="true">
               <x:label>not assert reply-title-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert reply-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-title-tests/reply-title-test/fail.xml"/>
            <x:result href="result-d6733.xml"/>
            <x:test successful="true">
               <x:label>assert reply-title-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert reply-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>author-contrib-ids</x:label>
         <x:scenario>
            <x:label>author-id-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/author-contrib-ids/author-id-1/pass.xml"/>
            <x:result href="result-d6742.xml"/>
            <x:test successful="true">
               <x:label>not report author-id-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-id-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert author-contrib-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-contrib-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-id-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/author-contrib-ids/author-id-1/fail.xml"/>
            <x:result href="result-d6751.xml"/>
            <x:test successful="true">
               <x:label>report author-id-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-id-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert author-contrib-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-contrib-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>award-group-ids</x:label>
         <x:scenario>
            <x:label>award-group-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-ids/award-group-test-1/pass.xml"/>
            <x:result href="result-d6760.xml"/>
            <x:test successful="true">
               <x:label>not assert award-group-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-ids/award-group-test-1/fail.xml"/>
            <x:result href="result-d6769.xml"/>
            <x:test successful="true">
               <x:label>assert award-group-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-ids</x:label>
         <x:scenario>
            <x:label>fig-id-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-1/pass.xml"/>
            <x:result href="result-d6778.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-id-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-1/fail.xml"/>
            <x:result href="result-d6787.xml"/>
            <x:test successful="true">
               <x:label>assert fig-id-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-2/pass.xml"/>
            <x:result href="result-d6796.xml"/>
            <x:test successful="true">
               <x:label>not report fig-id-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-2/fail.xml"/>
            <x:result href="result-d6805.xml"/>
            <x:test successful="true">
               <x:label>report fig-id-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-3/pass.xml"/>
            <x:result href="result-d6814.xml"/>
            <x:test successful="true">
               <x:label>not report fig-id-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-3/fail.xml"/>
            <x:result href="result-d6823.xml"/>
            <x:test successful="true">
               <x:label>report fig-id-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-4/pass.xml"/>
            <x:result href="result-d6832.xml"/>
            <x:test successful="true">
               <x:label>not report fig-id-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-4/fail.xml"/>
            <x:result href="result-d6841.xml"/>
            <x:test successful="true">
               <x:label>report fig-id-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-sup-ids</x:label>
         <x:scenario>
            <x:label>fig-sup-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-ids/fig-sup-id-test/pass.xml"/>
            <x:result href="result-d6850.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-sup-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-sup-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-ids/fig-sup-id-test/fail.xml"/>
            <x:result href="result-d6859.xml"/>
            <x:test successful="true">
               <x:label>assert fig-sup-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-sup-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>box-fig-ids</x:label>
         <x:scenario>
            <x:label>box-fig-id-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/box-fig-ids/box-fig-id-1/pass.xml"/>
            <x:result href="result-d6868.xml"/>
            <x:test successful="true">
               <x:label>not assert box-fig-id-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-id-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert box-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>box-fig-id-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/box-fig-ids/box-fig-id-1/fail.xml"/>
            <x:result href="result-d6877.xml"/>
            <x:test successful="true">
               <x:label>assert box-fig-id-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-id-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert box-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>box-fig-id-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/box-fig-ids/box-fig-id-2/pass.xml"/>
            <x:result href="result-d6886.xml"/>
            <x:test successful="true">
               <x:label>not assert box-fig-id-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-id-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert box-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>box-fig-id-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/box-fig-ids/box-fig-id-2/fail.xml"/>
            <x:result href="result-d6895.xml"/>
            <x:test successful="true">
               <x:label>assert box-fig-id-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-id-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert box-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-fig-ids</x:label>
         <x:scenario>
            <x:label>app-fig-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-ids/app-fig-id-test/pass.xml"/>
            <x:result href="result-d6904.xml"/>
            <x:test successful="true">
               <x:label>not assert app-fig-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-ids/app-fig-id-test/fail.xml"/>
            <x:result href="result-d6913.xml"/>
            <x:test successful="true">
               <x:label>assert app-fig-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-fig-sup-ids</x:label>
         <x:scenario>
            <x:label>app-fig-sup-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-sup-ids/app-fig-sup-id-test/pass.xml"/>
            <x:result href="result-d6922.xml"/>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-sup-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-sup-ids/app-fig-sup-id-test/fail.xml"/>
            <x:result href="result-d6931.xml"/>
            <x:test successful="true">
               <x:label>assert app-fig-sup-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>rep-fig-ids</x:label>
         <x:scenario>
            <x:label>resp-fig-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-ids/resp-fig-id-test/pass.xml"/>
            <x:result href="result-d6940.xml"/>
            <x:test successful="true">
               <x:label>not assert resp-fig-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-fig-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rep-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>resp-fig-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-ids/resp-fig-id-test/fail.xml"/>
            <x:result href="result-d6949.xml"/>
            <x:test successful="true">
               <x:label>assert resp-fig-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-fig-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rep-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>rep-fig-sup-ids</x:label>
         <x:scenario>
            <x:label>resp-fig-sup-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-sup-ids/resp-fig-sup-id-test/pass.xml"/>
            <x:result href="result-d6958.xml"/>
            <x:test successful="true">
               <x:label>not assert resp-fig-sup-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-fig-sup-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rep-fig-sup-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-sup-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>resp-fig-sup-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-sup-ids/resp-fig-sup-id-test/fail.xml"/>
            <x:result href="result-d6967.xml"/>
            <x:test successful="true">
               <x:label>assert resp-fig-sup-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-fig-sup-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rep-fig-sup-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-sup-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>related-articles-ids</x:label>
         <x:scenario>
            <x:label>related-articles-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-ids/related-articles-test-7/pass.xml"/>
            <x:result href="result-d6976.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert related-articles-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-ids/related-articles-test-7/fail.xml"/>
            <x:result href="result-d6985.xml"/>
            <x:test successful="true">
               <x:label>assert related-articles-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert related-articles-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>aff-ids</x:label>
         <x:scenario>
            <x:label>aff-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/aff-ids/aff-id-test/pass.xml"/>
            <x:result href="result-d6994.xml"/>
            <x:test successful="true">
               <x:label>not assert aff-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert aff-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>aff-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/aff-ids/aff-id-test/fail.xml"/>
            <x:result href="result-d7003.xml"/>
            <x:test successful="true">
               <x:label>assert aff-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert aff-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fn-ids</x:label>
         <x:scenario>
            <x:label>fn-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fn-ids/fn-id-test/pass.xml"/>
            <x:result href="result-d7012.xml"/>
            <x:test successful="true">
               <x:label>not report fn-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fn-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fn-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fn-ids/fn-id-test/fail.xml"/>
            <x:result href="result-d7021.xml"/>
            <x:test successful="true">
               <x:label>report fn-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fn-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>disp-formula-ids</x:label>
         <x:scenario>
            <x:label>disp-formula-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-formula-ids/disp-formula-id-test/pass.xml"/>
            <x:result href="result-d7030.xml"/>
            <x:test successful="true">
               <x:label>not assert disp-formula-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-formula-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-formula-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-formula-ids/disp-formula-id-test/fail.xml"/>
            <x:result href="result-d7039.xml"/>
            <x:test successful="true">
               <x:label>assert disp-formula-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-formula-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>mml-math-ids</x:label>
         <x:scenario>
            <x:label>mml-math-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/mml-math-ids/mml-math-id-test/pass.xml"/>
            <x:result href="result-d7048.xml"/>
            <x:test successful="true">
               <x:label>not assert mml-math-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mml-math-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert mml-math-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mml-math-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>mml-math-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/mml-math-ids/mml-math-id-test/fail.xml"/>
            <x:result href="result-d7057.xml"/>
            <x:test successful="true">
               <x:label>assert mml-math-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mml-math-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert mml-math-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mml-math-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-table-wrap-ids</x:label>
         <x:scenario>
            <x:label>app-table-wrap-id-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-wrap-ids/app-table-wrap-id-test-1/pass.xml"/>
            <x:result href="result-d7066.xml"/>
            <x:test successful="true">
               <x:label>not assert app-table-wrap-id-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-table-wrap-id-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-wrap-ids/app-table-wrap-id-test-1/fail.xml"/>
            <x:result href="result-d7075.xml"/>
            <x:test successful="true">
               <x:label>assert app-table-wrap-id-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-table-wrap-id-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-wrap-ids/app-table-wrap-id-test-2/pass.xml"/>
            <x:result href="result-d7084.xml"/>
            <x:test successful="true">
               <x:label>not assert app-table-wrap-id-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-table-wrap-id-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-wrap-ids/app-table-wrap-id-test-2/fail.xml"/>
            <x:result href="result-d7093.xml"/>
            <x:test successful="true">
               <x:label>assert app-table-wrap-id-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>resp-table-wrap-ids</x:label>
         <x:scenario>
            <x:label>resp-table-wrap-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/resp-table-wrap-ids/resp-table-wrap-id-test/pass.xml"/>
            <x:result href="result-d7102.xml"/>
            <x:test successful="true">
               <x:label>not assert resp-table-wrap-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-table-wrap-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert resp-table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>resp-table-wrap-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/resp-table-wrap-ids/resp-table-wrap-id-test/fail.xml"/>
            <x:result href="result-d7111.xml"/>
            <x:test successful="true">
               <x:label>assert resp-table-wrap-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-table-wrap-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert resp-table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>table-wrap-ids</x:label>
         <x:scenario>
            <x:label>table-wrap-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-ids/table-wrap-id-test/pass.xml"/>
            <x:result href="result-d7120.xml"/>
            <x:test successful="true">
               <x:label>not assert table-wrap-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-ids/table-wrap-id-test/fail.xml"/>
            <x:result href="result-d7129.xml"/>
            <x:test successful="true">
               <x:label>assert table-wrap-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>body-top-level-sec-ids</x:label>
         <x:scenario>
            <x:label>body-top-level-sec-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-top-level-sec-ids/body-top-level-sec-id-test/pass.xml"/>
            <x:result href="result-d7138.xml"/>
            <x:test successful="true">
               <x:label>not assert body-top-level-sec-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-top-level-sec-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-top-level-sec-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-top-level-sec-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>body-top-level-sec-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-top-level-sec-ids/body-top-level-sec-id-test/fail.xml"/>
            <x:result href="result-d7147.xml"/>
            <x:test successful="true">
               <x:label>assert body-top-level-sec-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-top-level-sec-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-top-level-sec-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-top-level-sec-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>back-top-level-sec-ids</x:label>
         <x:scenario>
            <x:label>back-top-level-sec-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-top-level-sec-ids/back-top-level-sec-id-test/pass.xml"/>
            <x:result href="result-d7156.xml"/>
            <x:test successful="true">
               <x:label>not assert back-top-level-sec-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-top-level-sec-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-top-level-sec-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-top-level-sec-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-top-level-sec-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-top-level-sec-ids/back-top-level-sec-id-test/fail.xml"/>
            <x:result href="result-d7165.xml"/>
            <x:test successful="true">
               <x:label>assert back-top-level-sec-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-top-level-sec-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-top-level-sec-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-top-level-sec-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>low-level-sec-ids</x:label>
         <x:scenario>
            <x:label>low-level-sec-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/low-level-sec-ids/low-level-sec-id-test/pass.xml"/>
            <x:result href="result-d7174.xml"/>
            <x:test successful="true">
               <x:label>not assert low-level-sec-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'low-level-sec-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert low-level-sec-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'low-level-sec-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>low-level-sec-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/low-level-sec-ids/low-level-sec-id-test/fail.xml"/>
            <x:result href="result-d7183.xml"/>
            <x:test successful="true">
               <x:label>assert low-level-sec-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'low-level-sec-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert low-level-sec-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'low-level-sec-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>sec-tests</x:label>
         <x:scenario>
            <x:label>sec-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-tests/sec-test-1/pass.xml"/>
            <x:result href="result-d7192.xml"/>
            <x:test successful="true">
               <x:label>not assert sec-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-tests/sec-test-1/fail.xml"/>
            <x:result href="result-d7201.xml"/>
            <x:test successful="true">
               <x:label>assert sec-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-tests/sec-test-2/pass.xml"/>
            <x:result href="result-d7210.xml"/>
            <x:test successful="true">
               <x:label>not assert sec-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-tests/sec-test-2/fail.xml"/>
            <x:result href="result-d7219.xml"/>
            <x:test successful="true">
               <x:label>assert sec-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>back-tests</x:label>
         <x:scenario>
            <x:label>back-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-1/pass.xml"/>
            <x:result href="result-d7228.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-1/fail.xml"/>
            <x:result href="result-d7237.xml"/>
            <x:test successful="true">
               <x:label>report back-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-2/pass.xml"/>
            <x:result href="result-d7246.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-2/fail.xml"/>
            <x:result href="result-d7255.xml"/>
            <x:test successful="true">
               <x:label>report back-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-3/pass.xml"/>
            <x:result href="result-d7264.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-3/fail.xml"/>
            <x:result href="result-d7273.xml"/>
            <x:test successful="true">
               <x:label>report back-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-4/pass.xml"/>
            <x:result href="result-d7282.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-4/fail.xml"/>
            <x:result href="result-d7291.xml"/>
            <x:test successful="true">
               <x:label>report back-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-5/pass.xml"/>
            <x:result href="result-d7300.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-5/fail.xml"/>
            <x:result href="result-d7309.xml"/>
            <x:test successful="true">
               <x:label>report back-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-6/pass.xml"/>
            <x:result href="result-d7318.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-6/fail.xml"/>
            <x:result href="result-d7327.xml"/>
            <x:test successful="true">
               <x:label>report back-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-8/pass.xml"/>
            <x:result href="result-d7336.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-8 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-8/fail.xml"/>
            <x:result href="result-d7345.xml"/>
            <x:test successful="true">
               <x:label>report back-test-8 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-7/pass.xml"/>
            <x:result href="result-d7354.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-7/fail.xml"/>
            <x:result href="result-d7363.xml"/>
            <x:test successful="true">
               <x:label>report back-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-9/pass.xml"/>
            <x:result href="result-d7372.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-9/fail.xml"/>
            <x:result href="result-d7381.xml"/>
            <x:test successful="true">
               <x:label>report back-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>data-content-tests</x:label>
         <x:scenario>
            <x:label>data-p-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-content-tests/data-p-presence/pass.xml"/>
            <x:result href="result-d7390.xml"/>
            <x:test successful="true">
               <x:label>not assert data-p-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-p-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-content-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-content-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>data-p-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-content-tests/data-p-presence/fail.xml"/>
            <x:result href="result-d7399.xml"/>
            <x:test successful="true">
               <x:label>assert data-p-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-p-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-content-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-content-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ack-tests</x:label>
         <x:scenario>
            <x:label>ack-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-tests/ack-test-1/pass.xml"/>
            <x:result href="result-d7408.xml"/>
            <x:test successful="true">
               <x:label>not assert ack-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ack-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-tests/ack-test-1/fail.xml"/>
            <x:result href="result-d7417.xml"/>
            <x:test successful="true">
               <x:label>assert ack-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ack-child-tests</x:label>
         <x:scenario>
            <x:label>ack-child-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-child-tests/ack-child-test-1/pass.xml"/>
            <x:result href="result-d7426.xml"/>
            <x:test successful="true">
               <x:label>not assert ack-child-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ack-child-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-child-tests/ack-child-test-1/fail.xml"/>
            <x:result href="result-d7435.xml"/>
            <x:test successful="true">
               <x:label>assert ack-child-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-tests</x:label>
         <x:scenario>
            <x:label>app-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-tests/app-test-1/pass.xml"/>
            <x:result href="result-d7444.xml"/>
            <x:test successful="true">
               <x:label>not assert app-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-tests/app-test-1/fail.xml"/>
            <x:result href="result-d7453.xml"/>
            <x:test successful="true">
               <x:label>assert app-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-tests/app-test-2/pass.xml"/>
            <x:result href="result-d7462.xml"/>
            <x:test successful="true">
               <x:label>not assert app-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-tests/app-test-2/fail.xml"/>
            <x:result href="result-d7471.xml"/>
            <x:test successful="true">
               <x:label>assert app-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>additional-info-tests</x:label>
         <x:scenario>
            <x:label>additional-info-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/additional-info-tests/additional-info-test-1/pass.xml"/>
            <x:result href="result-d7480.xml"/>
            <x:test successful="true">
               <x:label>not assert additional-info-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert additional-info-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>additional-info-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/additional-info-tests/additional-info-test-1/fail.xml"/>
            <x:result href="result-d7489.xml"/>
            <x:test successful="true">
               <x:label>assert additional-info-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert additional-info-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>additional-info-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/additional-info-tests/additional-info-test-2/pass.xml"/>
            <x:result href="result-d7498.xml"/>
            <x:test successful="true">
               <x:label>not report additional-info-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert additional-info-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>additional-info-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/additional-info-tests/additional-info-test-2/fail.xml"/>
            <x:result href="result-d7507.xml"/>
            <x:test successful="true">
               <x:label>report additional-info-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert additional-info-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>additional-info-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/additional-info-tests/additional-info-test-3/pass.xml"/>
            <x:result href="result-d7516.xml"/>
            <x:test successful="true">
               <x:label>not report additional-info-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert additional-info-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>additional-info-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/additional-info-tests/additional-info-test-3/fail.xml"/>
            <x:result href="result-d7525.xml"/>
            <x:test successful="true">
               <x:label>report additional-info-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert additional-info-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>comp-int-fn-group-tests</x:label>
         <x:scenario>
            <x:label>comp-int-fn-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-fn-group-tests/comp-int-fn-test-1/pass.xml"/>
            <x:result href="result-d7534.xml"/>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>comp-int-fn-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-fn-group-tests/comp-int-fn-test-1/fail.xml"/>
            <x:result href="result-d7543.xml"/>
            <x:test successful="true">
               <x:label>assert comp-int-fn-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>comp-int-fn-group-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-fn-group-tests/comp-int-fn-group-test-1/pass.xml"/>
            <x:result href="result-d7552.xml"/>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-group-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>comp-int-fn-group-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-fn-group-tests/comp-int-fn-group-test-1/fail.xml"/>
            <x:result href="result-d7561.xml"/>
            <x:test successful="true">
               <x:label>assert comp-int-fn-group-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>comp-int-fn-tests</x:label>
         <x:scenario>
            <x:label>comp-int-fn-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-fn-tests/comp-int-fn-test-2/pass.xml"/>
            <x:result href="result-d7570.xml"/>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>comp-int-fn-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-fn-tests/comp-int-fn-test-2/fail.xml"/>
            <x:result href="result-d7579.xml"/>
            <x:test successful="true">
               <x:label>assert comp-int-fn-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>auth-cont-tests</x:label>
         <x:scenario>
            <x:label>auth-cont-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-cont-tests/auth-cont-test-1/pass.xml"/>
            <x:result href="result-d7588.xml"/>
            <x:test successful="true">
               <x:label>not assert auth-cont-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-cont-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>auth-cont-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-cont-tests/auth-cont-test-1/fail.xml"/>
            <x:result href="result-d7597.xml"/>
            <x:test successful="true">
               <x:label>assert auth-cont-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-cont-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>auth-cont-fn-tests</x:label>
         <x:scenario>
            <x:label>auth-cont-fn-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-cont-fn-tests/auth-cont-fn-test-1/pass.xml"/>
            <x:result href="result-d7606.xml"/>
            <x:test successful="true">
               <x:label>not assert auth-cont-fn-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-fn-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-cont-fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>auth-cont-fn-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-cont-fn-tests/auth-cont-fn-test-1/fail.xml"/>
            <x:result href="result-d7615.xml"/>
            <x:test successful="true">
               <x:label>assert auth-cont-fn-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-fn-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-cont-fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ethics-tests</x:label>
         <x:scenario>
            <x:label>ethics-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-tests/ethics-test-1/pass.xml"/>
            <x:result href="result-d7624.xml"/>
            <x:test successful="true">
               <x:label>not assert ethics-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-tests/ethics-test-1/fail.xml"/>
            <x:result href="result-d7633.xml"/>
            <x:test successful="true">
               <x:label>assert ethics-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-tests/ethics-test-2/pass.xml"/>
            <x:result href="result-d7642.xml"/>
            <x:test successful="true">
               <x:label>not report ethics-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-tests/ethics-test-2/fail.xml"/>
            <x:result href="result-d7651.xml"/>
            <x:test successful="true">
               <x:label>report ethics-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-tests/ethics-test-3/pass.xml"/>
            <x:result href="result-d7660.xml"/>
            <x:test successful="true">
               <x:label>not report ethics-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-tests/ethics-test-3/fail.xml"/>
            <x:result href="result-d7669.xml"/>
            <x:test successful="true">
               <x:label>report ethics-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ethics-fn-tests</x:label>
         <x:scenario>
            <x:label>ethics-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-fn-tests/ethics-test-4/pass.xml"/>
            <x:result href="result-d7678.xml"/>
            <x:test successful="true">
               <x:label>not assert ethics-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-fn-tests/ethics-test-4/fail.xml"/>
            <x:result href="result-d7687.xml"/>
            <x:test successful="true">
               <x:label>assert ethics-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>dec-letter-reply-tests</x:label>
         <x:scenario>
            <x:label>dec-letter-reply-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-1/pass.xml"/>
            <x:result href="result-d7696.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-1/fail.xml"/>
            <x:result href="result-d7705.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-reply-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-2/pass.xml"/>
            <x:result href="result-d7714.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-2/fail.xml"/>
            <x:result href="result-d7723.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-reply-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-3/pass.xml"/>
            <x:result href="result-d7732.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-3/fail.xml"/>
            <x:result href="result-d7741.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-reply-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-4/pass.xml"/>
            <x:result href="result-d7750.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-4/fail.xml"/>
            <x:result href="result-d7759.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-reply-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-5/pass.xml"/>
            <x:result href="result-d7768.xml"/>
            <x:test successful="true">
               <x:label>not report dec-letter-reply-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-5/fail.xml"/>
            <x:result href="result-d7777.xml"/>
            <x:test successful="true">
               <x:label>report dec-letter-reply-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>dec-letter-front-tests</x:label>
         <x:scenario>
            <x:label>dec-letter-front-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-front-tests/dec-letter-front-test-1/pass.xml"/>
            <x:result href="result-d7786.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-front-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-front-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-front-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-front-tests/dec-letter-front-test-1/fail.xml"/>
            <x:result href="result-d7795.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-front-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-front-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-front-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-front-tests/dec-letter-front-test-2/pass.xml"/>
            <x:result href="result-d7804.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-front-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-front-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-front-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-front-tests/dec-letter-front-test-2/fail.xml"/>
            <x:result href="result-d7813.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-front-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-front-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>dec-letter-body-tests</x:label>
         <x:scenario>
            <x:label>dec-letter-body-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-body-tests/dec-letter-body-test-1/pass.xml"/>
            <x:result href="result-d7822.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-body-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-body-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-body-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-body-tests/dec-letter-body-test-1/fail.xml"/>
            <x:result href="result-d7831.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-body-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-body-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>reply-front-tests</x:label>
         <x:scenario>
            <x:label>reply-front-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-front-tests/reply-front-test-1/pass.xml"/>
            <x:result href="result-d7840.xml"/>
            <x:test successful="true">
               <x:label>not assert reply-front-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-front-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert reply-front-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-front-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-front-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-front-tests/reply-front-test-1/fail.xml"/>
            <x:result href="result-d7849.xml"/>
            <x:test successful="true">
               <x:label>assert reply-front-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-front-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert reply-front-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-front-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>reply-body-tests</x:label>
         <x:scenario>
            <x:label>reply-body-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-body-tests/reply-body-test-1/pass.xml"/>
            <x:result href="result-d7858.xml"/>
            <x:test successful="true">
               <x:label>not report reply-body-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert reply-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-body-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-body-tests/reply-body-test-1/fail.xml"/>
            <x:result href="result-d7867.xml"/>
            <x:test successful="true">
               <x:label>report reply-body-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert reply-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-body-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-body-tests/reply-body-test-2/pass.xml"/>
            <x:result href="result-d7876.xml"/>
            <x:test successful="true">
               <x:label>not report reply-body-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert reply-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-body-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-body-tests/reply-body-test-2/fail.xml"/>
            <x:result href="result-d7885.xml"/>
            <x:test successful="true">
               <x:label>report reply-body-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert reply-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>reply-disp-quote-tests</x:label>
         <x:scenario>
            <x:label>reply-disp-quote-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-disp-quote-tests/reply-disp-quote-test-1/pass.xml"/>
            <x:result href="result-d7894.xml"/>
            <x:test successful="true">
               <x:label>not assert reply-disp-quote-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-disp-quote-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert reply-disp-quote-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-disp-quote-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-disp-quote-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-disp-quote-tests/reply-disp-quote-test-1/fail.xml"/>
            <x:result href="result-d7903.xml"/>
            <x:test successful="true">
               <x:label>assert reply-disp-quote-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-disp-quote-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert reply-disp-quote-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-disp-quote-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>research-advance-test</x:label>
         <x:scenario>
            <x:label>related-articles-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-advance-test/related-articles-test-1/pass.xml"/>
            <x:result href="result-d7912.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert research-advance-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-advance-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-advance-test/related-articles-test-1/fail.xml"/>
            <x:result href="result-d7921.xml"/>
            <x:test successful="true">
               <x:label>assert related-articles-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert research-advance-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-advance-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>insight-test</x:label>
         <x:scenario>
            <x:label>related-articles-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/insight-test/related-articles-test-2/pass.xml"/>
            <x:result href="result-d7930.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert insight-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'insight-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/insight-test/related-articles-test-2/fail.xml"/>
            <x:result href="result-d7939.xml"/>
            <x:test successful="true">
               <x:label>assert related-articles-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert insight-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'insight-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>related-articles-conformance</x:label>
         <x:scenario>
            <x:label>related-articles-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-3/pass.xml"/>
            <x:result href="result-d7948.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-3/fail.xml"/>
            <x:result href="result-d7957.xml"/>
            <x:test successful="true">
               <x:label>assert related-articles-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-4/pass.xml"/>
            <x:result href="result-d7966.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-4/fail.xml"/>
            <x:result href="result-d7975.xml"/>
            <x:test successful="true">
               <x:label>assert related-articles-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-5/pass.xml"/>
            <x:result href="result-d7984.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-5/fail.xml"/>
            <x:result href="result-d7993.xml"/>
            <x:test successful="true">
               <x:label>assert related-articles-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-6/pass.xml"/>
            <x:result href="result-d8002.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-6/fail.xml"/>
            <x:result href="result-d8011.xml"/>
            <x:test successful="true">
               <x:label>assert related-articles-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-general</x:label>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-general/err-elem-cit-gen-name-2/pass.xml"/>
            <x:result href="result-d8021.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-gen-name-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-general-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-general-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-general/err-elem-cit-gen-name-2/fail.xml"/>
            <x:result href="result-d8030.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-gen-name-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-general-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-general-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-general/err-elem-cit-gen-name-5/pass.xml"/>
            <x:result href="result-d8039.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-gen-name-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-general-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-general-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-general/err-elem-cit-gen-name-5/fail.xml"/>
            <x:result href="result-d8048.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-gen-name-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-general-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-general-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-general/err-elem-cit-gen-date-1-9/pass.xml"/>
            <x:result href="result-d8057.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-gen-date-1-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-general-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-general-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-general/err-elem-cit-gen-date-1-9/fail.xml"/>
            <x:result href="result-d8066.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-gen-date-1-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-general-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-general-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-gen-name-3-1</x:label>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-3-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-gen-name-3-1/err-elem-cit-gen-name-3-1/pass.xml"/>
            <x:result href="result-d8075.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-gen-name-3-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-gen-name-3-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-gen-name-3-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-3-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-gen-name-3-1/err-elem-cit-gen-name-3-1/fail.xml"/>
            <x:result href="result-d8084.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-gen-name-3-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-gen-name-3-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-gen-name-3-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-gen-name-3-2</x:label>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-3-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-gen-name-3-2/err-elem-cit-gen-name-3-2/pass.xml"/>
            <x:result href="result-d8093.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-name-3-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-gen-name-3-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-gen-name-3-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-3-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-gen-name-3-2/err-elem-cit-gen-name-3-2/fail.xml"/>
            <x:result href="result-d8102.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-gen-name-3-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-gen-name-3-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-gen-name-3-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-gen-name-4</x:label>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-gen-name-4/err-elem-cit-gen-name-4/pass.xml"/>
            <x:result href="result-d8111.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-name-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-gen-name-4-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-gen-name-4-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-gen-name-4/err-elem-cit-gen-name-4/fail.xml"/>
            <x:result href="result-d8120.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-gen-name-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-gen-name-4-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-gen-name-4-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-year</x:label>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-1/pass.xml"/>
            <x:result href="result-d8129.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-1/fail.xml"/>
            <x:result href="result-d8138.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-gen-date-1-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-2/pass.xml"/>
            <x:result href="result-d8147.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-2/fail.xml"/>
            <x:result href="result-d8156.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-gen-date-1-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-3/pass.xml"/>
            <x:result href="result-d8165.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-3/fail.xml"/>
            <x:result href="result-d8174.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-gen-date-1-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-4/pass.xml"/>
            <x:result href="result-d8183.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-4/fail.xml"/>
            <x:result href="result-d8192.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-gen-date-1-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-5/pass.xml"/>
            <x:result href="result-d8201.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-5/fail.xml"/>
            <x:result href="result-d8210.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-gen-date-1-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-6/pass.xml"/>
            <x:result href="result-d8219.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-6/fail.xml"/>
            <x:result href="result-d8228.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-gen-date-1-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-7/pass.xml"/>
            <x:result href="result-d8237.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-7/fail.xml"/>
            <x:result href="result-d8246.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-gen-date-1-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-8/pass.xml"/>
            <x:result href="result-d8255.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-gen-date-1-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-8/fail.xml"/>
            <x:result href="result-d8264.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-gen-date-1-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-source</x:label>
         <x:scenario>
            <x:label>elem-cit-source-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-source/elem-cit-source/pass.xml"/>
            <x:result href="result-d8273.xml"/>
            <x:test successful="true">
               <x:label>not assert elem-cit-source error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-cit-source'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>elem-cit-source-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-source/elem-cit-source/fail.xml"/>
            <x:result href="result-d8282.xml"/>
            <x:test successful="true">
               <x:label>assert elem-cit-source error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-cit-source'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-ext-link</x:label>
         <x:scenario>
            <x:label>ext-link-attribute-content-match-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-ext-link/ext-link-attribute-content-match/pass.xml"/>
            <x:result href="result-d8291.xml"/>
            <x:test successful="true">
               <x:label>not assert ext-link-attribute-content-match error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-attribute-content-match'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ext-link-attribute-content-match-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-ext-link/ext-link-attribute-content-match/fail.xml"/>
            <x:result href="result-d8300.xml"/>
            <x:test successful="true">
               <x:label>assert ext-link-attribute-content-match error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-attribute-content-match'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>link-href-conformance-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-ext-link/link-href-conformance/pass.xml"/>
            <x:result href="result-d8309.xml"/>
            <x:test successful="true">
               <x:label>not assert link-href-conformance error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'link-href-conformance'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>link-href-conformance-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-ext-link/link-href-conformance/fail.xml"/>
            <x:result href="result-d8318.xml"/>
            <x:test successful="true">
               <x:label>assert link-href-conformance error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'link-href-conformance'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref</x:label>
         <x:scenario>
            <x:label>err-elem-cit-high-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-1/pass.xml"/>
            <x:result href="result-d8327.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-1/fail.xml"/>
            <x:result href="result-d8336.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-high-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-2-2/pass.xml"/>
            <x:result href="result-d8345.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-2-2/fail.xml"/>
            <x:result href="result-d8354.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-high-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-3-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-3-1/pass.xml"/>
            <x:result href="result-d8363.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-3-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-3-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-3-1/fail.xml"/>
            <x:result href="result-d8372.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-high-3-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-3-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-3-2/pass.xml"/>
            <x:result href="result-d8381.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-3-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-3-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-3-2/fail.xml"/>
            <x:result href="result-d8390.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-high-3-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-3-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-3-3/pass.xml"/>
            <x:result href="result-d8399.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-3-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-3-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-3-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-3-3/fail.xml"/>
            <x:result href="result-d8408.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-high-3-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-3-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>xref</x:label>
         <x:scenario>
            <x:label>err-xref-high-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref/err-xref-high-2-1/pass.xml"/>
            <x:result href="result-d8417.xml"/>
            <x:test successful="true">
               <x:label>not assert err-xref-high-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-xref-high-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-xref-high-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref/err-xref-high-2-1/fail.xml"/>
            <x:result href="result-d8426.xml"/>
            <x:test successful="true">
               <x:label>assert err-xref-high-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-xref-high-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation</x:label>
         <x:scenario>
            <x:label>err-elem-cit-high-6-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation/err-elem-cit-high-6-1/pass.xml"/>
            <x:result href="result-d8435.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-6-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-6-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-6-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation/err-elem-cit-high-6-1/fail.xml"/>
            <x:result href="result-d8444.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-high-6-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-6-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-6-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation/err-elem-cit-high-6-2/pass.xml"/>
            <x:result href="result-d8453.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-6-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-6-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-6-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation/err-elem-cit-high-6-2/fail.xml"/>
            <x:result href="result-d8462.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-high-6-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-6-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-2-1/pass.xml"/>
            <x:result href="result-d8471.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-2-1/fail.xml"/>
            <x:result href="result-d8480.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-2-2/pass.xml"/>
            <x:result href="result-d8489.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-2-2/fail.xml"/>
            <x:result href="result-d8498.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-3-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-3-1/pass.xml"/>
            <x:result href="result-d8507.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-3-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-3-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-3-1/fail.xml"/>
            <x:result href="result-d8516.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-3-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-4-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-4-1/pass.xml"/>
            <x:result href="result-d8525.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-4-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-4-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-4-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-4-1/fail.xml"/>
            <x:result href="result-d8534.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-4-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-4-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-4-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-4-2-2/pass.xml"/>
            <x:result href="result-d8543.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-4-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-4-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-4-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-4-2-2/fail.xml"/>
            <x:result href="result-d8552.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-4-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-4-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-5-1-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-5-1-3/pass.xml"/>
            <x:result href="result-d8561.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-5-1-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-5-1-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-5-1-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-5-1-3/fail.xml"/>
            <x:result href="result-d8570.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-5-1-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-5-1-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-5-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-6-5-1/pass.xml"/>
            <x:result href="result-d8579.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-journal-6-5-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-5-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-5-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-6-5-1/fail.xml"/>
            <x:result href="result-d8588.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-journal-6-5-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-5-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-5-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-6-5-2/pass.xml"/>
            <x:result href="result-d8597.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-journal-6-5-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-5-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-5-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-6-5-2/fail.xml"/>
            <x:result href="result-d8606.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-journal-6-5-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-5-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-6-7/pass.xml"/>
            <x:result href="result-d8615.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-journal-6-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-6-7/fail.xml"/>
            <x:result href="result-d8624.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-journal-6-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-12-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-12/pass.xml"/>
            <x:result href="result-d8633.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-12 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-12-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-12/fail.xml"/>
            <x:result href="result-d8642.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-12 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-3-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-article-title/err-elem-cit-journal-3-2/pass.xml"/>
            <x:result href="result-d8651.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-3-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-3-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-article-title/err-elem-cit-journal-3-2/fail.xml"/>
            <x:result href="result-d8660.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-3-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-volume</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-5-1-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-volume/err-elem-cit-journal-5-1-2/pass.xml"/>
            <x:result href="result-d8669.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-5-1-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-5-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-volume-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-volume-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-5-1-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-volume/err-elem-cit-journal-5-1-2/fail.xml"/>
            <x:result href="result-d8678.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-5-1-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-5-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-volume-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-volume-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-fpage</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-fpage/err-elem-cit-journal-6-2/pass.xml"/>
            <x:result href="result-d8687.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-6-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-fpage/err-elem-cit-journal-6-2/fail.xml"/>
            <x:result href="result-d8696.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-6-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-fpage/err-elem-cit-journal-6-6/pass.xml"/>
            <x:result href="result-d8705.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-6-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-fpage/err-elem-cit-journal-6-6/fail.xml"/>
            <x:result href="result-d8714.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-6-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-elocation-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-elocation-id/err-elem-cit-journal-6-3/pass.xml"/>
            <x:result href="result-d8723.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-6-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-elocation-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-elocation-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-elocation-id/err-elem-cit-journal-6-3/fail.xml"/>
            <x:result href="result-d8732.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-6-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-elocation-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-elocation-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-comment</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-comment/err-elem-cit-journal-6-4/pass.xml"/>
            <x:result href="result-d8741.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-6-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-comment-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-comment-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-comment/err-elem-cit-journal-6-4/fail.xml"/>
            <x:result href="result-d8750.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-6-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-comment-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-comment-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-comment/err-elem-cit-journal-13/pass.xml"/>
            <x:result href="result-d8759.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-13 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-comment-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-comment-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-comment/err-elem-cit-journal-13/fail.xml"/>
            <x:result href="result-d8768.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-13 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-comment-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-comment-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-pub-id-pmid</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-10-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-pub-id-pmid/err-elem-cit-journal-10/pass.xml"/>
            <x:result href="result-d8777.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-journal-10 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-pub-id-pmid-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-pub-id-pmid-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-10-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-pub-id-pmid/err-elem-cit-journal-10/fail.xml"/>
            <x:result href="result-d8786.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-journal-10 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-pub-id-pmid-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-pub-id-pmid-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-pub-id/err-elem-cit-journal-9-1/pass.xml"/>
            <x:result href="result-d8795.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-pub-id/err-elem-cit-journal-9-1/fail.xml"/>
            <x:result href="result-d8804.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-journal-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-journal-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-2-2/pass.xml"/>
            <x:result href="result-d8813.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-2-2/fail.xml"/>
            <x:result href="result-d8822.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-book-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-2-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-2-3/pass.xml"/>
            <x:result href="result-d8831.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-2-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-2-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-2-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-2-3/fail.xml"/>
            <x:result href="result-d8840.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-book-2-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-2-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-10-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-10-1/pass.xml"/>
            <x:result href="result-d8849.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-10-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-10-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-10-1/fail.xml"/>
            <x:result href="result-d8858.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-book-10-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-10-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-10-2-2/pass.xml"/>
            <x:result href="result-d8867.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-10-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-10-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-10-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-10-2-2/fail.xml"/>
            <x:result href="result-d8876.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-book-10-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-10-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-13-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-13-1/pass.xml"/>
            <x:result href="result-d8885.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-13-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-13-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-13-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-13-1/fail.xml"/>
            <x:result href="result-d8894.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-book-13-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-13-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>warning-elem-cit-book-13-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/warning-elem-cit-book-13-3/pass.xml"/>
            <x:result href="result-d8903.xml"/>
            <x:test successful="true">
               <x:label>not report warning-elem-cit-book-13-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'warning-elem-cit-book-13-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>warning-elem-cit-book-13-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/warning-elem-cit-book-13-3/fail.xml"/>
            <x:result href="result-d8912.xml"/>
            <x:test successful="true">
               <x:label>report warning-elem-cit-book-13-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'warning-elem-cit-book-13-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-16-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-16/pass.xml"/>
            <x:result href="result-d8921.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-book-16 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-16-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-16/fail.xml"/>
            <x:result href="result-d8930.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-book-16 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-36-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-36/pass.xml"/>
            <x:result href="result-d8939.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-book-36 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-36'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-36-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-36/fail.xml"/>
            <x:result href="result-d8948.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-book-36 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-36'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-36-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-36-2/pass.xml"/>
            <x:result href="result-d8957.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-book-36-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-36-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-36-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-36-2/fail.xml"/>
            <x:result href="result-d8966.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-book-36-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-36-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-36-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-36-6/pass.xml"/>
            <x:result href="result-d8975.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-book-36-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-36-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-36-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-36-6/fail.xml"/>
            <x:result href="result-d8984.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-book-36-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-36-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-40-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-40/pass.xml"/>
            <x:result href="result-d8993.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-40 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-40'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-40-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-40/fail.xml"/>
            <x:result href="result-d9002.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-book-40 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-40'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book-person-group</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-person-group/err-elem-cit-book-2-1/pass.xml"/>
            <x:result href="result-d9011.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-person-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-person-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-person-group/err-elem-cit-book-2-1/fail.xml"/>
            <x:result href="result-d9020.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-book-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-person-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-person-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book-chapter-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-22-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-chapter-title/err-elem-cit-book-22/pass.xml"/>
            <x:result href="result-d9029.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-22 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-22'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-chapter-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-chapter-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-22-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-chapter-title/err-elem-cit-book-22/fail.xml"/>
            <x:result href="result-d9038.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-book-22 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-22'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-chapter-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-chapter-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-28-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-chapter-title/err-elem-cit-book-28-1/pass.xml"/>
            <x:result href="result-d9047.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-28-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-28-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-chapter-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-chapter-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-28-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-chapter-title/err-elem-cit-book-28-1/fail.xml"/>
            <x:result href="result-d9056.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-book-28-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-28-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-chapter-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-chapter-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-31-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-chapter-title/err-elem-cit-book-31/pass.xml"/>
            <x:result href="result-d9065.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-31 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-31'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-chapter-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-chapter-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-31-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-chapter-title/err-elem-cit-book-31/fail.xml"/>
            <x:result href="result-d9074.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-book-31 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-31'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-chapter-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-chapter-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book-publisher-name</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-13-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-publisher-name/err-elem-cit-book-13-2/pass.xml"/>
            <x:result href="result-d9083.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-13-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-13-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-publisher-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-publisher-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-13-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-publisher-name/err-elem-cit-book-13-2/fail.xml"/>
            <x:result href="result-d9092.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-book-13-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-13-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-publisher-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-publisher-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book-edition</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-15-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-edition/err-elem-cit-book-15/pass.xml"/>
            <x:result href="result-d9101.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-15 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-edition-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-edition-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-15-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-edition/err-elem-cit-book-15/fail.xml"/>
            <x:result href="result-d9110.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-book-15 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-edition-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-edition-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book-pub-id-pmid</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-18-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-pub-id-pmid/err-elem-cit-book-18/pass.xml"/>
            <x:result href="result-d9119.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-book-18 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-pub-id-pmid-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-pub-id-pmid-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-18-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-pub-id-pmid/err-elem-cit-book-18/fail.xml"/>
            <x:result href="result-d9128.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-book-18 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-pub-id-pmid-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-pub-id-pmid-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-17-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-pub-id/err-elem-cit-book-17/pass.xml"/>
            <x:result href="result-d9137.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-17 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-17'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-17-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-pub-id/err-elem-cit-book-17/fail.xml"/>
            <x:result href="result-d9146.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-book-17 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-17'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-book-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-data</x:label>
         <x:scenario>
            <x:label>err-elem-cit-data-3-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-3-1/pass.xml"/>
            <x:result href="result-d9155.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-3-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-3-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-3-1/fail.xml"/>
            <x:result href="result-d9164.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-data-3-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-3-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-3-2/pass.xml"/>
            <x:result href="result-d9173.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-3-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-3-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-3-2/fail.xml"/>
            <x:result href="result-d9182.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-data-3-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-10-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-10/pass.xml"/>
            <x:result href="result-d9191.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-10 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-10-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-10/fail.xml"/>
            <x:result href="result-d9200.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-data-10 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-11-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-11-2/pass.xml"/>
            <x:result href="result-d9209.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-11-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-11-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-11-2/fail.xml"/>
            <x:result href="result-d9218.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-data-11-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-11-3-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-11-3-2/pass.xml"/>
            <x:result href="result-d9227.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-11-3-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-11-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-11-3-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-11-3-2/fail.xml"/>
            <x:result href="result-d9236.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-data-11-3-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-11-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-13-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-13-1/pass.xml"/>
            <x:result href="result-d9245.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-13-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-13-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-13-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-13-1/fail.xml"/>
            <x:result href="result-d9254.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-data-13-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-13-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-17-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-17-1/pass.xml"/>
            <x:result href="result-d9263.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-17-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-17-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-17-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-17-1/fail.xml"/>
            <x:result href="result-d9272.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-data-17-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-17-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-18-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-18/pass.xml"/>
            <x:result href="result-d9281.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-18 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-18-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-18/fail.xml"/>
            <x:result href="result-d9290.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-data-18 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-data-pub-id-doi</x:label>
         <x:scenario>
            <x:label>err-elem-cit-data-14-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-pub-id-doi/err-elem-cit-data-14-2/pass.xml"/>
            <x:result href="result-d9299.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-14-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-14-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-pub-id-doi-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-pub-id-doi-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-14-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-pub-id-doi/err-elem-cit-data-14-2/fail.xml"/>
            <x:result href="result-d9308.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-data-14-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-14-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-pub-id-doi-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-pub-id-doi-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-data-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-data-13-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-pub-id/err-elem-cit-data-13-2/pass.xml"/>
            <x:result href="result-d9317.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-13-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-13-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-13-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-pub-id/err-elem-cit-data-13-2/fail.xml"/>
            <x:result href="result-d9326.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-data-13-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-13-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-14-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-pub-id/err-elem-cit-data-14-1/pass.xml"/>
            <x:result href="result-d9335.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-data-14-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-14-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-14-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-pub-id/err-elem-cit-data-14-1/fail.xml"/>
            <x:result href="result-d9344.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-data-14-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-14-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-data-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-patent</x:label>
         <x:scenario>
            <x:label>err-elem-cit-patent-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-2-1/pass.xml"/>
            <x:result href="result-d9353.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-2-1/fail.xml"/>
            <x:result href="result-d9362.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-patent-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-2-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-2-3/pass.xml"/>
            <x:result href="result-d9371.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-2-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-2-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-2-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-2-3/fail.xml"/>
            <x:result href="result-d9380.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-patent-2-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-2-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-2A-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-2A/pass.xml"/>
            <x:result href="result-d9389.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-2A error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-2A'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-2A-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-2A/fail.xml"/>
            <x:result href="result-d9398.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-patent-2A error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-2A'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-8-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-8-1/pass.xml"/>
            <x:result href="result-d9407.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-8-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-8-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-8-1/fail.xml"/>
            <x:result href="result-d9416.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-patent-8-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-9-1/pass.xml"/>
            <x:result href="result-d9425.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-9-1/fail.xml"/>
            <x:result href="result-d9434.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-patent-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-10-1-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-10-1-1/pass.xml"/>
            <x:result href="result-d9443.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-10-1-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-10-1-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-10-1-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-10-1-1/fail.xml"/>
            <x:result href="result-d9452.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-patent-10-1-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-10-1-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-11-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-11-1/pass.xml"/>
            <x:result href="result-d9461.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-11-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-11-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-11-1/fail.xml"/>
            <x:result href="result-d9470.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-patent-11-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-18-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-18/pass.xml"/>
            <x:result href="result-d9479.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-18 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-18-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-18/fail.xml"/>
            <x:result href="result-d9488.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-patent-18 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-patent-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-patent-8-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-article-title/err-elem-cit-patent-8-2-1/pass.xml"/>
            <x:result href="result-d9497.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-8-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-8-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-8-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-article-title/err-elem-cit-patent-8-2-1/fail.xml"/>
            <x:result href="result-d9506.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-patent-8-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-8-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-8-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-article-title/err-elem-cit-patent-8-2-2/pass.xml"/>
            <x:result href="result-d9515.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-8-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-8-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-8-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-article-title/err-elem-cit-patent-8-2-2/fail.xml"/>
            <x:result href="result-d9524.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-patent-8-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-8-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-patent-source</x:label>
         <x:scenario>
            <x:label>err-elem-cit-patent-9-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-source/err-elem-cit-patent-9-2-2/pass.xml"/>
            <x:result href="result-d9533.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-9-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-9-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-source/err-elem-cit-patent-9-2-2/fail.xml"/>
            <x:result href="result-d9542.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-patent-9-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-patent-patent</x:label>
         <x:scenario>
            <x:label>err-elem-cit-patent-10-1-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-patent/err-elem-cit-patent-10-1-2/pass.xml"/>
            <x:result href="result-d9551.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-10-1-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-10-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-10-1-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-patent/err-elem-cit-patent-10-1-2/fail.xml"/>
            <x:result href="result-d9560.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-patent-10-1-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-10-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-10-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-patent/err-elem-cit-patent-10-2/pass.xml"/>
            <x:result href="result-d9569.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-10-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-10-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-patent/err-elem-cit-patent-10-2/fail.xml"/>
            <x:result href="result-d9578.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-patent-10-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-patent-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-software</x:label>
         <x:scenario>
            <x:label>err-elem-cit-software-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-2-1/pass.xml"/>
            <x:result href="result-d9587.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-software-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-2-1/fail.xml"/>
            <x:result href="result-d9596.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-software-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-2-2/pass.xml"/>
            <x:result href="result-d9605.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-software-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-2-2/fail.xml"/>
            <x:result href="result-d9614.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-software-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-10-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-10-1/pass.xml"/>
            <x:result href="result-d9623.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-software-10-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-10-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-10-1/fail.xml"/>
            <x:result href="result-d9632.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-software-10-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-16-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-16/pass.xml"/>
            <x:result href="result-d9641.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-software-16 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-16-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-16/fail.xml"/>
            <x:result href="result-d9650.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-software-16 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-software-data-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-software-10-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software-data-title/err-elem-cit-software-10-2/pass.xml"/>
            <x:result href="result-d9659.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-software-10-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-software-data-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-data-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-10-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software-data-title/err-elem-cit-software-10-2/fail.xml"/>
            <x:result href="result-d9668.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-software-10-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-software-data-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-data-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-preprint</x:label>
         <x:scenario>
            <x:label>err-elem-cit-preprint-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-2-1/pass.xml"/>
            <x:result href="result-d9677.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-2-1/fail.xml"/>
            <x:result href="result-d9686.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-preprint-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-8-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-8-1/pass.xml"/>
            <x:result href="result-d9695.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-8-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-8-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-8-1/fail.xml"/>
            <x:result href="result-d9704.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-preprint-8-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-9-1/pass.xml"/>
            <x:result href="result-d9713.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-9-1/fail.xml"/>
            <x:result href="result-d9722.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-preprint-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-10-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-10-1/pass.xml"/>
            <x:result href="result-d9731.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-10-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-10-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-10-1/fail.xml"/>
            <x:result href="result-d9740.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-preprint-10-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-10-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-10-3/pass.xml"/>
            <x:result href="result-d9749.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-10-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-10-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-10-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-10-3/fail.xml"/>
            <x:result href="result-d9758.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-preprint-10-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-10-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-13/pass.xml"/>
            <x:result href="result-d9767.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-13 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-13/fail.xml"/>
            <x:result href="result-d9776.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-preprint-13 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-preprint-person-group</x:label>
         <x:scenario>
            <x:label>err-elem-cit-preprint-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-person-group/err-elem-cit-preprint-2-2/pass.xml"/>
            <x:result href="result-d9785.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-person-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-person-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-person-group/err-elem-cit-preprint-2-2/fail.xml"/>
            <x:result href="result-d9794.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-preprint-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-person-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-person-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-preprint-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-preprint-10-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-pub-id/err-elem-cit-preprint-10-2/pass.xml"/>
            <x:result href="result-d9803.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-10-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-10-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-pub-id/err-elem-cit-preprint-10-2/fail.xml"/>
            <x:result href="result-d9812.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-preprint-10-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-preprint-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-preprint-8-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-article-title/err-elem-cit-preprint-8-2-1/pass.xml"/>
            <x:result href="result-d9821.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-8-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-8-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-8-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-article-title/err-elem-cit-preprint-8-2-1/fail.xml"/>
            <x:result href="result-d9830.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-preprint-8-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-8-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-8-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-article-title/err-elem-cit-preprint-8-2-2/pass.xml"/>
            <x:result href="result-d9839.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-8-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-8-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-8-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-article-title/err-elem-cit-preprint-8-2-2/fail.xml"/>
            <x:result href="result-d9848.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-preprint-8-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-8-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-preprint-source</x:label>
         <x:scenario>
            <x:label>err-elem-cit-preprint-9-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-source/err-elem-cit-preprint-9-2-2/pass.xml"/>
            <x:result href="result-d9857.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-9-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-9-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-source/err-elem-cit-preprint-9-2-2/fail.xml"/>
            <x:result href="result-d9866.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-preprint-9-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-preprint-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-web</x:label>
         <x:scenario>
            <x:label>err-elem-cit-web-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-2-1/pass.xml"/>
            <x:result href="result-d9875.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-2-1/fail.xml"/>
            <x:result href="result-d9884.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-web-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-8-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-8-1/pass.xml"/>
            <x:result href="result-d9893.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-8-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-8-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-8-1/fail.xml"/>
            <x:result href="result-d9902.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-web-8-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-9-1/pass.xml"/>
            <x:result href="result-d9911.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-web-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-9-1/fail.xml"/>
            <x:result href="result-d9920.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-web-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-10-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-10-1/pass.xml"/>
            <x:result href="result-d9929.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-10-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-10-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-10-1/fail.xml"/>
            <x:result href="result-d9938.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-web-10-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-11-1/pass.xml"/>
            <x:result href="result-d9947.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-11-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-11-1/fail.xml"/>
            <x:result href="result-d9956.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-web-11-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-12-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-12/pass.xml"/>
            <x:result href="result-d9965.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-12 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-12-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-12/fail.xml"/>
            <x:result href="result-d9974.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-web-12 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-web-person-group</x:label>
         <x:scenario>
            <x:label>err-elem-cit-web-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-person-group/err-elem-cit-web-2-2/pass.xml"/>
            <x:result href="result-d9983.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-person-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-person-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-person-group/err-elem-cit-web-2-2/fail.xml"/>
            <x:result href="result-d9992.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-web-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-person-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-person-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-web-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-web-8-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-article-title/err-elem-cit-web-8-2-1/pass.xml"/>
            <x:result href="result-d10001.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-8-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-8-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-8-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-article-title/err-elem-cit-web-8-2-1/fail.xml"/>
            <x:result href="result-d10010.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-web-8-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-8-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-8-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-article-title/err-elem-cit-web-8-2-2/pass.xml"/>
            <x:result href="result-d10019.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-8-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-8-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-8-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-article-title/err-elem-cit-web-8-2-2/fail.xml"/>
            <x:result href="result-d10028.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-web-8-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-8-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-web-source</x:label>
         <x:scenario>
            <x:label>err-elem-cit-web-9-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-source/err-elem-cit-web-9-2-2/pass.xml"/>
            <x:result href="result-d10037.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-9-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-9-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-source/err-elem-cit-web-9-2-2/fail.xml"/>
            <x:result href="result-d10046.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-web-9-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-web-date-in-citation</x:label>
         <x:scenario>
            <x:label>err-elem-cit-web-11-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-2-1/pass.xml"/>
            <x:result href="result-d10055.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-11-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-2-1/fail.xml"/>
            <x:result href="result-d10064.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-web-11-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-2-2/pass.xml"/>
            <x:result href="result-d10073.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-11-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-2-2/fail.xml"/>
            <x:result href="result-d10082.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-web-11-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-3/pass.xml"/>
            <x:result href="result-d10091.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-11-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-3/fail.xml"/>
            <x:result href="result-d10100.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-web-11-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-4/pass.xml"/>
            <x:result href="result-d10109.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-web-11-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-4/fail.xml"/>
            <x:result href="result-d10118.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-web-11-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-report</x:label>
         <x:scenario>
            <x:label>err-elem-cit-report-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-2-1/pass.xml"/>
            <x:result href="result-d10127.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-2-1/fail.xml"/>
            <x:result href="result-d10136.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-report-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-9-1/pass.xml"/>
            <x:result href="result-d10145.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-9-1/fail.xml"/>
            <x:result href="result-d10154.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-report-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-11-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-11-1/pass.xml"/>
            <x:result href="result-d10163.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-11-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-11-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-11-1/fail.xml"/>
            <x:result href="result-d10172.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-report-11-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>warning-elem-cit-report-11-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/warning-elem-cit-report-11-3/pass.xml"/>
            <x:result href="result-d10181.xml"/>
            <x:test successful="true">
               <x:label>not report warning-elem-cit-report-11-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'warning-elem-cit-report-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>warning-elem-cit-report-11-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/warning-elem-cit-report-11-3/fail.xml"/>
            <x:result href="result-d10190.xml"/>
            <x:test successful="true">
               <x:label>report warning-elem-cit-report-11-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'warning-elem-cit-report-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-15-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-15/pass.xml"/>
            <x:result href="result-d10199.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-15 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-15-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-15/fail.xml"/>
            <x:result href="result-d10208.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-report-15 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-report-preson-group</x:label>
         <x:scenario>
            <x:label>err-elem-cit-report-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-preson-group/err-elem-cit-report-2-2/pass.xml"/>
            <x:result href="result-d10217.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-preson-group/err-elem-cit-report-2-2/fail.xml"/>
            <x:result href="result-d10226.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-report-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-report-source</x:label>
         <x:scenario>
            <x:label>err-elem-cit-report-9-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-source/err-elem-cit-report-9-2-2/pass.xml"/>
            <x:result href="result-d10235.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-9-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-9-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-source/err-elem-cit-report-9-2-2/fail.xml"/>
            <x:result href="result-d10244.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-report-9-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-report-publisher-name</x:label>
         <x:scenario>
            <x:label>err-elem-cit-report-11-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-publisher-name/err-elem-cit-report-11-2/pass.xml"/>
            <x:result href="result-d10253.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-11-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-publisher-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-publisher-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-11-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-publisher-name/err-elem-cit-report-11-2/fail.xml"/>
            <x:result href="result-d10262.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-report-11-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-publisher-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-publisher-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-report-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-report-12-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-pub-id/err-elem-cit-report-12-2/pass.xml"/>
            <x:result href="result-d10271.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-12-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-12-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-12-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-pub-id/err-elem-cit-report-12-2/fail.xml"/>
            <x:result href="result-d10280.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-report-12-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-12-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-report-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-2-1/pass.xml"/>
            <x:result href="result-d10289.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-2-1/fail.xml"/>
            <x:result href="result-d10298.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-8-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-8-1/pass.xml"/>
            <x:result href="result-d10307.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-8-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-8-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-8-1/fail.xml"/>
            <x:result href="result-d10316.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-8-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-9-1/pass.xml"/>
            <x:result href="result-d10325.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-9-1/fail.xml"/>
            <x:result href="result-d10334.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-10-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-10-1/pass.xml"/>
            <x:result href="result-d10343.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-10-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-10-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-10-1/fail.xml"/>
            <x:result href="result-d10352.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-10-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-1/pass.xml"/>
            <x:result href="result-d10361.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-confproc-12-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-1/fail.xml"/>
            <x:result href="result-d10370.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-confproc-12-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-2/pass.xml"/>
            <x:result href="result-d10379.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-confproc-12-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-2/fail.xml"/>
            <x:result href="result-d10388.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-confproc-12-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-3/pass.xml"/>
            <x:result href="result-d10397.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-confproc-12-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-3/fail.xml"/>
            <x:result href="result-d10406.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-confproc-12-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-4/pass.xml"/>
            <x:result href="result-d10415.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-12-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-4/fail.xml"/>
            <x:result href="result-d10424.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-12-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-16-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-16-1/pass.xml"/>
            <x:result href="result-d10433.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-16-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-16-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-16-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-16-1/fail.xml"/>
            <x:result href="result-d10442.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-16-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-16-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-17-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-17/pass.xml"/>
            <x:result href="result-d10451.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-17 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-17'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-17-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-17/fail.xml"/>
            <x:result href="result-d10460.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-17 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-17'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-preson-group</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-preson-group/err-elem-cit-confproc-2-2/pass.xml"/>
            <x:result href="result-d10469.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-preson-group/err-elem-cit-confproc-2-2/fail.xml"/>
            <x:result href="result-d10478.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-source</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-9-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-source/err-elem-cit-confproc-9-2-2/pass.xml"/>
            <x:result href="result-d10487.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-9-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-9-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-source/err-elem-cit-confproc-9-2-2/fail.xml"/>
            <x:result href="result-d10496.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-9-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-8-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-article-title/err-elem-cit-confproc-8-2/pass.xml"/>
            <x:result href="result-d10505.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-8-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-8-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-8-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-article-title/err-elem-cit-confproc-8-2/fail.xml"/>
            <x:result href="result-d10514.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-8-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-8-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-conf-name</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-10-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-conf-name/err-elem-cit-confproc-10-2/pass.xml"/>
            <x:result href="result-d10523.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-10-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-conf-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-conf-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-10-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-conf-name/err-elem-cit-confproc-10-2/fail.xml"/>
            <x:result href="result-d10532.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-10-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-conf-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-conf-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-conf-loc</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-11-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-conf-loc/err-elem-cit-confproc-11-2/pass.xml"/>
            <x:result href="result-d10541.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-11-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-conf-loc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-conf-loc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-11-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-conf-loc/err-elem-cit-confproc-11-2/fail.xml"/>
            <x:result href="result-d10550.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-11-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-conf-loc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-conf-loc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-fpage</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-fpage/err-elem-cit-confproc-12-5/pass.xml"/>
            <x:result href="result-d10559.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-12-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-fpage/err-elem-cit-confproc-12-5/fail.xml"/>
            <x:result href="result-d10568.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-12-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-16-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-pub-id/err-elem-cit-confproc-16-2/pass.xml"/>
            <x:result href="result-d10577.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-16-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-16-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-16-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-pub-id/err-elem-cit-confproc-16-2/fail.xml"/>
            <x:result href="result-d10586.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-confproc-16-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-16-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-confproc-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-thesis</x:label>
         <x:scenario>
            <x:label>err-elem-cit-thesis-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-2-1/pass.xml"/>
            <x:result href="result-d10595.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-2-1/fail.xml"/>
            <x:result href="result-d10604.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-thesis-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-3/pass.xml"/>
            <x:result href="result-d10613.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-3/fail.xml"/>
            <x:result href="result-d10622.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-thesis-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-6/pass.xml"/>
            <x:result href="result-d10631.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-6/fail.xml"/>
            <x:result href="result-d10640.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-thesis-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-8-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-8-1/pass.xml"/>
            <x:result href="result-d10649.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-8-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-8-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-8-1/fail.xml"/>
            <x:result href="result-d10658.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-thesis-8-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-9-1/pass.xml"/>
            <x:result href="result-d10667.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-9-1/fail.xml"/>
            <x:result href="result-d10676.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-thesis-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-11-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-11-1/pass.xml"/>
            <x:result href="result-d10685.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-11-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-11-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-11-1/fail.xml"/>
            <x:result href="result-d10694.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-thesis-11-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-13/pass.xml"/>
            <x:result href="result-d10703.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-13 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-13/fail.xml"/>
            <x:result href="result-d10712.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-thesis-13 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-thesis-preson-group</x:label>
         <x:scenario>
            <x:label>err-elem-cit-thesis-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-preson-group/err-elem-cit-thesis-2-2/pass.xml"/>
            <x:result href="result-d10721.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-preson-group/err-elem-cit-thesis-2-2/fail.xml"/>
            <x:result href="result-d10730.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-thesis-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-2-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-preson-group/err-elem-cit-thesis-2-3/pass.xml"/>
            <x:result href="result-d10739.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-2-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-2-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-2-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-preson-group/err-elem-cit-thesis-2-3/fail.xml"/>
            <x:result href="result-d10748.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-thesis-2-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-2-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-thesis-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-thesis-8-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-article-title/err-elem-cit-thesis-8-2/pass.xml"/>
            <x:result href="result-d10757.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-8-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-8-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-8-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-article-title/err-elem-cit-thesis-8-2/fail.xml"/>
            <x:result href="result-d10766.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-thesis-8-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-8-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-thesis-publisher-name</x:label>
         <x:scenario>
            <x:label>err-elem-cit-thesis-9-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-publisher-name/err-elem-cit-thesis-9-2/pass.xml"/>
            <x:result href="result-d10775.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-9-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-9-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-publisher-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-publisher-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-9-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-publisher-name/err-elem-cit-thesis-9-2/fail.xml"/>
            <x:result href="result-d10784.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-thesis-9-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-9-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-publisher-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-publisher-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-thesis-publisher-loc</x:label>
         <x:scenario>
            <x:label>err-elem-cit-thesis-10-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-publisher-loc/err-elem-cit-thesis-10-2/pass.xml"/>
            <x:result href="result-d10793.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-10-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-publisher-loc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-publisher-loc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-10-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-publisher-loc/err-elem-cit-thesis-10-2/fail.xml"/>
            <x:result href="result-d10802.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-thesis-10-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-publisher-loc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-publisher-loc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-thesis-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-thesis-11-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-pub-id/err-elem-cit-thesis-11-2/pass.xml"/>
            <x:result href="result-d10811.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-11-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-11-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-pub-id/err-elem-cit-thesis-11-2/fail.xml"/>
            <x:result href="result-d10820.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-thesis-11-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-thesis-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-2-1/pass.xml"/>
            <x:result href="result-d10829.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-2-1/fail.xml"/>
            <x:result href="result-d10838.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-2-2/pass.xml"/>
            <x:result href="result-d10847.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-2-2/fail.xml"/>
            <x:result href="result-d10856.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-7-1/pass.xml"/>
            <x:result href="result-d10865.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-7-1/fail.xml"/>
            <x:result href="result-d10874.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-7-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-8-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-8-1/pass.xml"/>
            <x:result href="result-d10883.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-8-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-8-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-8-1/fail.xml"/>
            <x:result href="result-d10892.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-8-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-9-1/pass.xml"/>
            <x:result href="result-d10901.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-9-1/fail.xml"/>
            <x:result href="result-d10910.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-9-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-9-2-2/pass.xml"/>
            <x:result href="result-d10919.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-9-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-9-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-9-2-2/fail.xml"/>
            <x:result href="result-d10928.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-9-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-10-1-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-10-1-3/pass.xml"/>
            <x:result href="result-d10937.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-10-1-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-10-1-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-10-1-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-10-1-3/fail.xml"/>
            <x:result href="result-d10946.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-10-1-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-10-1-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-1/pass.xml"/>
            <x:result href="result-d10955.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-periodical-11-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-1/fail.xml"/>
            <x:result href="result-d10964.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-periodical-11-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-2/pass.xml"/>
            <x:result href="result-d10973.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-periodical-11-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-2/fail.xml"/>
            <x:result href="result-d10982.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-periodical-11-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-3/pass.xml"/>
            <x:result href="result-d10991.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-periodical-11-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-3/fail.xml"/>
            <x:result href="result-d11000.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-periodical-11-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-4/pass.xml"/>
            <x:result href="result-d11009.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-11-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-4/fail.xml"/>
            <x:result href="result-d11018.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-11-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-13/pass.xml"/>
            <x:result href="result-d11027.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-13 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-13/fail.xml"/>
            <x:result href="result-d11036.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-13 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-14-1/pass.xml"/>
            <x:result href="result-d11045.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-14-1/fail.xml"/>
            <x:result href="result-d11054.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-14-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-year</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-2/pass.xml"/>
            <x:result href="result-d11063.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-2/fail.xml"/>
            <x:result href="result-d11072.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-7-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-3/pass.xml"/>
            <x:result href="result-d11081.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-3/fail.xml"/>
            <x:result href="result-d11090.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-7-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-4-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-4-1/pass.xml"/>
            <x:result href="result-d11099.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-4-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-4-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-4-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-4-1/fail.xml"/>
            <x:result href="result-d11108.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-7-4-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-4-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-4-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-4-2/pass.xml"/>
            <x:result href="result-d11117.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-4-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-4-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-4-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-4-2/fail.xml"/>
            <x:result href="result-d11126.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-7-4-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-4-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-5/pass.xml"/>
            <x:result href="result-d11135.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-5/fail.xml"/>
            <x:result href="result-d11144.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-7-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-6/pass.xml"/>
            <x:result href="result-d11153.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-6/fail.xml"/>
            <x:result href="result-d11162.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-7-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-7/pass.xml"/>
            <x:result href="result-d11171.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-7/fail.xml"/>
            <x:result href="result-d11180.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-7-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-8/pass.xml"/>
            <x:result href="result-d11189.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-periodical-7-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-8/fail.xml"/>
            <x:result href="result-d11198.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-periodical-7-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-8-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-article-title/err-elem-cit-periodical-8-2/pass.xml"/>
            <x:result href="result-d11207.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-8-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-8-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-8-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-article-title/err-elem-cit-periodical-8-2/fail.xml"/>
            <x:result href="result-d11216.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-8-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-8-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-volume</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-10-1-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-volume/err-elem-cit-periodical-10-1-2/pass.xml"/>
            <x:result href="result-d11225.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-10-1-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-10-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-volume-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-volume-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-10-1-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-volume/err-elem-cit-periodical-10-1-2/fail.xml"/>
            <x:result href="result-d11234.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-10-1-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-10-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-volume-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-volume-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-fpage</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-fpage/err-elem-cit-periodical-11-5/pass.xml"/>
            <x:result href="result-d11243.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-11-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-fpage/err-elem-cit-periodical-11-5/fail.xml"/>
            <x:result href="result-d11252.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-11-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-string-date</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-string-date/err-elem-cit-periodical-14-2/pass.xml"/>
            <x:result href="result-d11261.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-string-date-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-string-date-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-string-date/err-elem-cit-periodical-14-2/fail.xml"/>
            <x:result href="result-d11270.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-14-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-string-date-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-string-date-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-string-date/err-elem-cit-periodical-14-3/pass.xml"/>
            <x:result href="result-d11279.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-string-date-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-string-date-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-string-date/err-elem-cit-periodical-14-3/fail.xml"/>
            <x:result href="result-d11288.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-14-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-string-date-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-string-date-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-string-date/err-elem-cit-periodical-14-8/pass.xml"/>
            <x:result href="result-d11297.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-string-date-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-string-date-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-string-date/err-elem-cit-periodical-14-8/fail.xml"/>
            <x:result href="result-d11306.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-14-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-string-date-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-string-date-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-month</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-month/err-elem-cit-periodical-14-4/pass.xml"/>
            <x:result href="result-d11315.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-month-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-month-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-month/err-elem-cit-periodical-14-4/fail.xml"/>
            <x:result href="result-d11324.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-14-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-month-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-month-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-month/err-elem-cit-periodical-14-5/pass.xml"/>
            <x:result href="result-d11333.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-periodical-14-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-month-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-month-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-month/err-elem-cit-periodical-14-5/fail.xml"/>
            <x:result href="result-d11342.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-periodical-14-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-month-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-month-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-day</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-day/err-elem-cit-periodical-14-6/pass.xml"/>
            <x:result href="result-d11351.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-day-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-day-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-day/err-elem-cit-periodical-14-6/fail.xml"/>
            <x:result href="result-d11360.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-periodical-14-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-day-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-day-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-day/err-elem-cit-periodical-14-7/pass.xml"/>
            <x:result href="result-d11369.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-periodical-14-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-day-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-day-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-day/err-elem-cit-periodical-14-7/fail.xml"/>
            <x:result href="result-d11378.xml"/>
            <x:test successful="true">
               <x:label>report err-elem-cit-periodical-14-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-periodical-day-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-day-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>pub-id-tests</x:label>
         <x:scenario>
            <x:label>pub-id-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-id-tests/pub-id-test-1/pass.xml"/>
            <x:result href="result-d11387.xml"/>
            <x:test successful="true">
               <x:label>not report pub-id-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-id-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-id-tests/pub-id-test-1/fail.xml"/>
            <x:result href="result-d11396.xml"/>
            <x:test successful="true">
               <x:label>report pub-id-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-id-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-id-tests/pub-id-test-2/pass.xml"/>
            <x:result href="result-d11405.xml"/>
            <x:test successful="true">
               <x:label>not report pub-id-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-id-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-id-tests/pub-id-test-2/fail.xml"/>
            <x:result href="result-d11414.xml"/>
            <x:test successful="true">
               <x:label>report pub-id-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-id-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-id-tests/pub-id-test-3/pass.xml"/>
            <x:result href="result-d11423.xml"/>
            <x:test successful="true">
               <x:label>not report pub-id-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-id-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-id-tests/pub-id-test-3/fail.xml"/>
            <x:result href="result-d11432.xml"/>
            <x:test successful="true">
               <x:label>report pub-id-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pub-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-title-tests</x:label>
         <x:scenario>
            <x:label>feature-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-title-tests/feature-title-test-1/pass.xml"/>
            <x:result href="result-d11441.xml"/>
            <x:test successful="true">
               <x:label>not report feature-title-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-title-tests/feature-title-test-1/fail.xml"/>
            <x:result href="result-d11450.xml"/>
            <x:test successful="true">
               <x:label>report feature-title-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-abstract-tests</x:label>
         <x:scenario>
            <x:label>feature-abstract-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-abstract-tests/feature-abstract-test-1/pass.xml"/>
            <x:result href="result-d11459.xml"/>
            <x:test successful="true">
               <x:label>not assert feature-abstract-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-abstract-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-abstract-tests/feature-abstract-test-1/fail.xml"/>
            <x:result href="result-d11468.xml"/>
            <x:test successful="true">
               <x:label>assert feature-abstract-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-abstract-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-abstract-tests/feature-abstract-test-2/pass.xml"/>
            <x:result href="result-d11477.xml"/>
            <x:test successful="true">
               <x:label>not assert feature-abstract-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-abstract-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-abstract-tests/feature-abstract-test-2/fail.xml"/>
            <x:result href="result-d11486.xml"/>
            <x:test successful="true">
               <x:label>assert feature-abstract-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-subj-tests-1</x:label>
         <x:scenario>
            <x:label>feature-subj-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-1/feature-subj-test-1/pass.xml"/>
            <x:result href="result-d11495.xml"/>
            <x:test successful="true">
               <x:label>not assert feature-subj-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-subj-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-1/feature-subj-test-1/fail.xml"/>
            <x:result href="result-d11504.xml"/>
            <x:test successful="true">
               <x:label>assert feature-subj-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-subj-tests-2</x:label>
         <x:scenario>
            <x:label>feature-subj-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-2/feature-subj-test-2/pass.xml"/>
            <x:result href="result-d11513.xml"/>
            <x:test successful="true">
               <x:label>not report feature-subj-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-subj-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-2/feature-subj-test-2/fail.xml"/>
            <x:result href="result-d11522.xml"/>
            <x:test successful="true">
               <x:label>report feature-subj-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-subj-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-2/feature-subj-test-3/pass.xml"/>
            <x:result href="result-d11531.xml"/>
            <x:test successful="true">
               <x:label>not report feature-subj-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-subj-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-2/feature-subj-test-3/fail.xml"/>
            <x:result href="result-d11540.xml"/>
            <x:test successful="true">
               <x:label>report feature-subj-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-subj-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-2/feature-subj-test-4/pass.xml"/>
            <x:result href="result-d11549.xml"/>
            <x:test successful="true">
               <x:label>not report feature-subj-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-subj-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-2/feature-subj-test-4/fail.xml"/>
            <x:result href="result-d11558.xml"/>
            <x:test successful="true">
               <x:label>report feature-subj-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-article-category-tests</x:label>
         <x:scenario>
            <x:label>feature-article-category-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-article-category-tests/feature-article-category-test-1/pass.xml"/>
            <x:result href="result-d11567.xml"/>
            <x:test successful="true">
               <x:label>not assert feature-article-category-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-article-category-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-article-category-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-article-category-tests/feature-article-category-test-1/fail.xml"/>
            <x:result href="result-d11576.xml"/>
            <x:test successful="true">
               <x:label>assert feature-article-category-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-article-category-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-article-category-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-article-category-tests/feature-article-category-test-2/pass.xml"/>
            <x:result href="result-d11585.xml"/>
            <x:test successful="true">
               <x:label>not report feature-article-category-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-article-category-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-article-category-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-article-category-tests/feature-article-category-test-2/fail.xml"/>
            <x:result href="result-d11594.xml"/>
            <x:test successful="true">
               <x:label>report feature-article-category-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-article-category-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-author-tests</x:label>
         <x:scenario>
            <x:label>feature-author-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-author-tests/feature-author-test-1/pass.xml"/>
            <x:result href="result-d11603.xml"/>
            <x:test successful="true">
               <x:label>not assert feature-author-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-author-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-author-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-author-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-author-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-author-tests/feature-author-test-1/fail.xml"/>
            <x:result href="result-d11612.xml"/>
            <x:test successful="true">
               <x:label>assert feature-author-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-author-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-author-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-author-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-bio-tests</x:label>
         <x:scenario>
            <x:label>feature-bio-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-bio-tests/feature-bio-test-1/pass.xml"/>
            <x:result href="result-d11621.xml"/>
            <x:test successful="true">
               <x:label>not assert feature-bio-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-bio-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-bio-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-bio-tests/feature-bio-test-1/fail.xml"/>
            <x:result href="result-d11630.xml"/>
            <x:test successful="true">
               <x:label>assert feature-bio-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-bio-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-bio-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-bio-tests/feature-bio-test-2/pass.xml"/>
            <x:result href="result-d11639.xml"/>
            <x:test successful="true">
               <x:label>not report feature-bio-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-bio-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-bio-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-bio-tests/feature-bio-test-2/fail.xml"/>
            <x:result href="result-d11648.xml"/>
            <x:test successful="true">
               <x:label>report feature-bio-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-bio-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-bio-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-bio-tests/feature-bio-test-3/pass.xml"/>
            <x:result href="result-d11657.xml"/>
            <x:test successful="true">
               <x:label>not report feature-bio-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-bio-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-bio-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-bio-tests/feature-bio-test-3/fail.xml"/>
            <x:result href="result-d11666.xml"/>
            <x:test successful="true">
               <x:label>report feature-bio-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-bio-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>correction-tests</x:label>
         <x:scenario>
            <x:label>corr-aff-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-aff-presence/pass.xml"/>
            <x:result href="result-d11675.xml"/>
            <x:test successful="true">
               <x:label>not report corr-aff-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-aff-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-aff-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-aff-presence/fail.xml"/>
            <x:result href="result-d11684.xml"/>
            <x:test successful="true">
               <x:label>report corr-aff-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-aff-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-auth-kw-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-auth-kw-presence/pass.xml"/>
            <x:result href="result-d11693.xml"/>
            <x:test successful="true">
               <x:label>not report corr-auth-kw-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-auth-kw-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-auth-kw-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-auth-kw-presence/fail.xml"/>
            <x:result href="result-d11702.xml"/>
            <x:test successful="true">
               <x:label>report corr-auth-kw-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-auth-kw-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-COI-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-COI-presence/pass.xml"/>
            <x:result href="result-d11711.xml"/>
            <x:test successful="true">
               <x:label>not report corr-COI-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-COI-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-COI-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-COI-presence/fail.xml"/>
            <x:result href="result-d11720.xml"/>
            <x:test successful="true">
               <x:label>report corr-COI-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-COI-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-self-uri-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-self-uri-presence/pass.xml"/>
            <x:result href="result-d11729.xml"/>
            <x:test successful="true">
               <x:label>not report corr-self-uri-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-self-uri-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-self-uri-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-self-uri-presence/fail.xml"/>
            <x:result href="result-d11738.xml"/>
            <x:test successful="true">
               <x:label>report corr-self-uri-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-self-uri-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-abstract-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-abstract-presence/pass.xml"/>
            <x:result href="result-d11747.xml"/>
            <x:test successful="true">
               <x:label>not report corr-abstract-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-abstract-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-abstract-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-abstract-presence/fail.xml"/>
            <x:result href="result-d11756.xml"/>
            <x:test successful="true">
               <x:label>report corr-abstract-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-abstract-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-back-sec-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-back-sec/pass.xml"/>
            <x:result href="result-d11765.xml"/>
            <x:test successful="true">
               <x:label>not report corr-back-sec error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-back-sec'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-back-sec-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-back-sec/fail.xml"/>
            <x:result href="result-d11774.xml"/>
            <x:test successful="true">
               <x:label>report corr-back-sec error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-back-sec'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-impact-statement-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-impact-statement/pass.xml"/>
            <x:result href="result-d11783.xml"/>
            <x:test successful="true">
               <x:label>not report corr-impact-statement error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-impact-statement'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-impact-statement-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-impact-statement/fail.xml"/>
            <x:result href="result-d11792.xml"/>
            <x:test successful="true">
               <x:label>report corr-impact-statement error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-impact-statement'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-SE-BRE-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-SE-BRE/pass.xml"/>
            <x:result href="result-d11801.xml"/>
            <x:test successful="true">
               <x:label>not report corr-SE-BRE error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-SE-BRE'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-SE-BRE-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-SE-BRE/fail.xml"/>
            <x:result href="result-d11810.xml"/>
            <x:test successful="true">
               <x:label>report corr-SE-BRE error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-SE-BRE'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>retraction-tests</x:label>
         <x:scenario>
            <x:label>retr-aff-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-aff-presence/pass.xml"/>
            <x:result href="result-d11819.xml"/>
            <x:test successful="true">
               <x:label>not report retr-aff-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-aff-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-aff-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-aff-presence/fail.xml"/>
            <x:result href="result-d11828.xml"/>
            <x:test successful="true">
               <x:label>report retr-aff-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-aff-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-auth-kw-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-auth-kw-presence/pass.xml"/>
            <x:result href="result-d11837.xml"/>
            <x:test successful="true">
               <x:label>not report retr-auth-kw-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-auth-kw-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-auth-kw-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-auth-kw-presence/fail.xml"/>
            <x:result href="result-d11846.xml"/>
            <x:test successful="true">
               <x:label>report retr-auth-kw-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-auth-kw-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-COI-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-COI-presence/pass.xml"/>
            <x:result href="result-d11855.xml"/>
            <x:test successful="true">
               <x:label>not report retr-COI-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-COI-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-COI-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-COI-presence/fail.xml"/>
            <x:result href="result-d11864.xml"/>
            <x:test successful="true">
               <x:label>report retr-COI-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-COI-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-self-uri-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-self-uri-presence/pass.xml"/>
            <x:result href="result-d11873.xml"/>
            <x:test successful="true">
               <x:label>not report retr-self-uri-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-self-uri-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-self-uri-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-self-uri-presence/fail.xml"/>
            <x:result href="result-d11882.xml"/>
            <x:test successful="true">
               <x:label>report retr-self-uri-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-self-uri-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-abstract-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-abstract-presence/pass.xml"/>
            <x:result href="result-d11891.xml"/>
            <x:test successful="true">
               <x:label>not report retr-abstract-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-abstract-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-abstract-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-abstract-presence/fail.xml"/>
            <x:result href="result-d11900.xml"/>
            <x:test successful="true">
               <x:label>report retr-abstract-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-abstract-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-back-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-back/pass.xml"/>
            <x:result href="result-d11909.xml"/>
            <x:test successful="true">
               <x:label>not report retr-back error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-back'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-back-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-back/fail.xml"/>
            <x:result href="result-d11918.xml"/>
            <x:test successful="true">
               <x:label>report retr-back error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-back'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-impact-statement-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-impact-statement/pass.xml"/>
            <x:result href="result-d11927.xml"/>
            <x:test successful="true">
               <x:label>not report retr-impact-statement error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-impact-statement'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-impact-statement-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-impact-statement/fail.xml"/>
            <x:result href="result-d11936.xml"/>
            <x:test successful="true">
               <x:label>report retr-impact-statement error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-impact-statement'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-SE-BRE-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-SE-BRE/pass.xml"/>
            <x:result href="result-d11945.xml"/>
            <x:test successful="true">
               <x:label>not report retr-SE-BRE error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-SE-BRE'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-SE-BRE-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-SE-BRE/fail.xml"/>
            <x:result href="result-d11954.xml"/>
            <x:test successful="true">
               <x:label>report retr-SE-BRE error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-SE-BRE'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>final-gene-primer-sequence</x:label>
         <x:scenario>
            <x:label>gene-primer-sequence-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/final-gene-primer-sequence/gene-primer-sequence-test/pass.xml"/>
            <x:result href="result-d11963.xml"/>
            <x:test successful="true">
               <x:label>not assert gene-primer-sequence-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'gene-primer-sequence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert final-gene-primer-sequence-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-gene-primer-sequence-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>gene-primer-sequence-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/final-gene-primer-sequence/gene-primer-sequence-test/fail.xml"/>
            <x:result href="result-d11972.xml"/>
            <x:test successful="true">
               <x:label>assert gene-primer-sequence-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'gene-primer-sequence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert final-gene-primer-sequence-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-gene-primer-sequence-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>rrid-org-code</x:label>
         <x:scenario>
            <x:label>rrid-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/rrid-test/pass.xml"/>
            <x:result href="result-d11981.xml"/>
            <x:test successful="true">
               <x:label>not report rrid-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>rrid-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/rrid-test/fail.xml"/>
            <x:result href="result-d11990.xml"/>
            <x:test successful="true">
               <x:label>report rrid-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>org-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/org-test/pass.xml"/>
            <x:result href="result-d11999.xml"/>
            <x:test successful="true">
               <x:label>not report org-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>org-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/org-test/fail.xml"/>
            <x:result href="result-d12008.xml"/>
            <x:test successful="true">
               <x:label>report org-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>code-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/code-test/pass.xml"/>
            <x:result href="result-d12017.xml"/>
            <x:test successful="true">
               <x:label>not report code-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'code-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>code-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/code-test/fail.xml"/>
            <x:result href="result-d12026.xml"/>
            <x:test successful="true">
               <x:label>report code-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'code-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cell-spacing-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/cell-spacing-test/pass.xml"/>
            <x:result href="result-d12035.xml"/>
            <x:test successful="true">
               <x:label>not report cell-spacing-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cell-spacing-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cell-spacing-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/cell-spacing-test/fail.xml"/>
            <x:result href="result-d12044.xml"/>
            <x:test successful="true">
               <x:label>report cell-spacing-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cell-spacing-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-spacing-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/equal-spacing-test/pass.xml"/>
            <x:result href="result-d12053.xml"/>
            <x:test successful="true">
               <x:label>not report equal-spacing-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-spacing-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-spacing-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/equal-spacing-test/fail.xml"/>
            <x:result href="result-d12062.xml"/>
            <x:test successful="true">
               <x:label>report equal-spacing-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-spacing-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ring-diacritic-symbol-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/ring-diacritic-symbol-test/pass.xml"/>
            <x:result href="result-d12071.xml"/>
            <x:test successful="true">
               <x:label>not report ring-diacritic-symbol-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ring-diacritic-symbol-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ring-diacritic-symbol-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/ring-diacritic-symbol-test/fail.xml"/>
            <x:result href="result-d12080.xml"/>
            <x:test successful="true">
               <x:label>report ring-diacritic-symbol-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ring-diacritic-symbol-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>diabetes-1-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/diabetes-1-test/pass.xml"/>
            <x:result href="result-d12089.xml"/>
            <x:test successful="true">
               <x:label>not report diabetes-1-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'diabetes-1-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>diabetes-1-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/diabetes-1-test/fail.xml"/>
            <x:result href="result-d12098.xml"/>
            <x:test successful="true">
               <x:label>report diabetes-1-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'diabetes-1-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>diabetes-2-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/diabetes-2-test/pass.xml"/>
            <x:result href="result-d12107.xml"/>
            <x:test successful="true">
               <x:label>not report diabetes-2-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'diabetes-2-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>diabetes-2-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/diabetes-2-test/fail.xml"/>
            <x:result href="result-d12116.xml"/>
            <x:test successful="true">
               <x:label>report diabetes-2-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'diabetes-2-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>unlinked-url-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/unlinked-url/pass.xml"/>
            <x:result href="result-d12125.xml"/>
            <x:test successful="true">
               <x:label>not assert unlinked-url warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unlinked-url'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>unlinked-url-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/unlinked-url/fail.xml"/>
            <x:result href="result-d12134.xml"/>
            <x:test successful="true">
               <x:label>assert unlinked-url warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unlinked-url'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>duplicate-ref</x:label>
         <x:scenario>
            <x:label>duplicate-ref-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-1/pass.xml"/>
            <x:result href="result-d12143.xml"/>
            <x:test successful="true">
               <x:label>not report duplicate-ref-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-1/fail.xml"/>
            <x:result href="result-d12152.xml"/>
            <x:test successful="true">
               <x:label>report duplicate-ref-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-2/pass.xml"/>
            <x:result href="result-d12161.xml"/>
            <x:test successful="true">
               <x:label>not report duplicate-ref-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-2/fail.xml"/>
            <x:result href="result-d12170.xml"/>
            <x:test successful="true">
               <x:label>report duplicate-ref-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-3/pass.xml"/>
            <x:result href="result-d12179.xml"/>
            <x:test successful="true">
               <x:label>not report duplicate-ref-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-3/fail.xml"/>
            <x:result href="result-d12188.xml"/>
            <x:test successful="true">
               <x:label>report duplicate-ref-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-4/pass.xml"/>
            <x:result href="result-d12197.xml"/>
            <x:test successful="true">
               <x:label>not report duplicate-ref-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-4/fail.xml"/>
            <x:result href="result-d12206.xml"/>
            <x:test successful="true">
               <x:label>report duplicate-ref-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-6/pass.xml"/>
            <x:result href="result-d12215.xml"/>
            <x:test successful="true">
               <x:label>not report duplicate-ref-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-6/fail.xml"/>
            <x:result href="result-d12224.xml"/>
            <x:test successful="true">
               <x:label>report duplicate-ref-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref-xref-conformance</x:label>
         <x:scenario>
            <x:label>ref-xref-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-1/pass.xml"/>
            <x:result href="result-d12233.xml"/>
            <x:test successful="true">
               <x:label>not assert ref-xref-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-1/fail.xml"/>
            <x:result href="result-d12242.xml"/>
            <x:test successful="true">
               <x:label>assert ref-xref-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-2/pass.xml"/>
            <x:result href="result-d12251.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-2/fail.xml"/>
            <x:result href="result-d12260.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-3/pass.xml"/>
            <x:result href="result-d12269.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-3/fail.xml"/>
            <x:result href="result-d12278.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-4/pass.xml"/>
            <x:result href="result-d12287.xml"/>
            <x:test successful="true">
               <x:label>not assert ref-xref-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-4/fail.xml"/>
            <x:result href="result-d12296.xml"/>
            <x:test successful="true">
               <x:label>assert ref-xref-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-5/pass.xml"/>
            <x:result href="result-d12305.xml"/>
            <x:test successful="true">
               <x:label>not assert ref-xref-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-5/fail.xml"/>
            <x:result href="result-d12314.xml"/>
            <x:test successful="true">
               <x:label>assert ref-xref-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-6/pass.xml"/>
            <x:result href="result-d12323.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-6/fail.xml"/>
            <x:result href="result-d12332.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-7/pass.xml"/>
            <x:result href="result-d12341.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-7/fail.xml"/>
            <x:result href="result-d12350.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-8/pass.xml"/>
            <x:result href="result-d12359.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-8 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-8/fail.xml"/>
            <x:result href="result-d12368.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-8 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-9/pass.xml"/>
            <x:result href="result-d12377.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-9 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-9/fail.xml"/>
            <x:result href="result-d12386.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-9 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-11-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-11/pass.xml"/>
            <x:result href="result-d12395.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-11 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-11-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-11/fail.xml"/>
            <x:result href="result-d12404.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-11 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-12-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-12/pass.xml"/>
            <x:result href="result-d12413.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-12 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-12-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-12/fail.xml"/>
            <x:result href="result-d12422.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-12 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-13/pass.xml"/>
            <x:result href="result-d12431.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-13 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-13/fail.xml"/>
            <x:result href="result-d12440.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-13 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-23-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-23/pass.xml"/>
            <x:result href="result-d12449.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-23 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-23'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-23-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-23/fail.xml"/>
            <x:result href="result-d12458.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-23 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-23'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-14-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-14/pass.xml"/>
            <x:result href="result-d12467.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-14 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-14'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-14-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-14/fail.xml"/>
            <x:result href="result-d12476.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-14 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-14'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-15-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-15/pass.xml"/>
            <x:result href="result-d12485.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-15 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-15-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-15/fail.xml"/>
            <x:result href="result-d12494.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-15 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-16-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-16/pass.xml"/>
            <x:result href="result-d12503.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-16 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-16-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-16/fail.xml"/>
            <x:result href="result-d12512.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-16 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-17-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-17/pass.xml"/>
            <x:result href="result-d12521.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-17 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-17'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-17-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-17/fail.xml"/>
            <x:result href="result-d12530.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-17 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-17'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-18-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-18/pass.xml"/>
            <x:result href="result-d12539.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-18 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-18-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-18/fail.xml"/>
            <x:result href="result-d12548.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-18 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-19-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-19/pass.xml"/>
            <x:result href="result-d12557.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-19 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-19'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-19-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-19/fail.xml"/>
            <x:result href="result-d12566.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-19 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-19'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-20-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-20/pass.xml"/>
            <x:result href="result-d12575.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-20 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-20'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-20-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-20/fail.xml"/>
            <x:result href="result-d12584.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-20 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-20'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-21-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-21/pass.xml"/>
            <x:result href="result-d12593.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-21 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-21'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-21-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-21/fail.xml"/>
            <x:result href="result-d12602.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-21 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-21'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-22-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-22/pass.xml"/>
            <x:result href="result-d12611.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-22 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-22'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-22-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-22/fail.xml"/>
            <x:result href="result-d12620.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-test-22 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-22'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>unlinked-ref-cite</x:label>
         <x:scenario>
            <x:label>text-v-cite-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unlinked-ref-cite/text-v-cite-test/pass.xml"/>
            <x:result href="result-d12629.xml"/>
            <x:test successful="true">
               <x:label>not report text-v-cite-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'text-v-cite-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unlinked-ref-cite-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unlinked-ref-cite-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>text-v-cite-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unlinked-ref-cite/text-v-cite-test/fail.xml"/>
            <x:result href="result-d12638.xml"/>
            <x:test successful="true">
               <x:label>report text-v-cite-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'text-v-cite-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unlinked-ref-cite-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unlinked-ref-cite-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>vid-xref-conformance</x:label>
         <x:scenario>
            <x:label>vid-xref-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-conformity-1/pass.xml"/>
            <x:result href="result-d12647.xml"/>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformity-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-conformity-1/fail.xml"/>
            <x:result href="result-d12656.xml"/>
            <x:test successful="true">
               <x:label>assert vid-xref-conformity-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-conformity-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-conformity-2/pass.xml"/>
            <x:result href="result-d12665.xml"/>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformity-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-conformity-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-conformity-2/fail.xml"/>
            <x:result href="result-d12674.xml"/>
            <x:test successful="true">
               <x:label>assert vid-xref-conformity-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-2/pass.xml"/>
            <x:result href="result-d12683.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-2/fail.xml"/>
            <x:result href="result-d12692.xml"/>
            <x:test successful="true">
               <x:label>report vid-xref-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-3/pass.xml"/>
            <x:result href="result-d12701.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-3/fail.xml"/>
            <x:result href="result-d12710.xml"/>
            <x:test successful="true">
               <x:label>report vid-xref-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-4/pass.xml"/>
            <x:result href="result-d12719.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-4/fail.xml"/>
            <x:result href="result-d12728.xml"/>
            <x:test successful="true">
               <x:label>report vid-xref-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-5/pass.xml"/>
            <x:result href="result-d12737.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-5/fail.xml"/>
            <x:result href="result-d12746.xml"/>
            <x:test successful="true">
               <x:label>report vid-xref-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-6/pass.xml"/>
            <x:result href="result-d12755.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-6/fail.xml"/>
            <x:result href="result-d12764.xml"/>
            <x:test successful="true">
               <x:label>report vid-xref-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-7/pass.xml"/>
            <x:result href="result-d12773.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-test-7 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-7/fail.xml"/>
            <x:result href="result-d12782.xml"/>
            <x:test successful="true">
               <x:label>report vid-xref-test-7 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-xref-conformance</x:label>
         <x:scenario>
            <x:label>fig-xref-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-1/pass.xml"/>
            <x:result href="result-d12791.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformity-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-1/fail.xml"/>
            <x:result href="result-d12800.xml"/>
            <x:test successful="true">
               <x:label>assert fig-xref-conformity-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-2/pass.xml"/>
            <x:result href="result-d12809.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-conformity-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-2/fail.xml"/>
            <x:result href="result-d12818.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-conformity-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-3/pass.xml"/>
            <x:result href="result-d12827.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-conformity-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-3/fail.xml"/>
            <x:result href="result-d12836.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-conformity-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-4/pass.xml"/>
            <x:result href="result-d12845.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-conformity-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-4/fail.xml"/>
            <x:result href="result-d12854.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-conformity-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-5/pass.xml"/>
            <x:result href="result-d12863.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-conformity-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-5/fail.xml"/>
            <x:result href="result-d12872.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-conformity-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-6/pass.xml"/>
            <x:result href="result-d12881.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-conformity-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-6/fail.xml"/>
            <x:result href="result-d12890.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-conformity-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-2/pass.xml"/>
            <x:result href="result-d12899.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-2/fail.xml"/>
            <x:result href="result-d12908.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-3/pass.xml"/>
            <x:result href="result-d12917.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-3/fail.xml"/>
            <x:result href="result-d12926.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-4/pass.xml"/>
            <x:result href="result-d12935.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-4/fail.xml"/>
            <x:result href="result-d12944.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-5/pass.xml"/>
            <x:result href="result-d12953.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-5/fail.xml"/>
            <x:result href="result-d12962.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-6/pass.xml"/>
            <x:result href="result-d12971.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-6/fail.xml"/>
            <x:result href="result-d12980.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-7/pass.xml"/>
            <x:result href="result-d12989.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-7 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-7/fail.xml"/>
            <x:result href="result-d12998.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-test-7 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-8/pass.xml"/>
            <x:result href="result-d13007.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-8 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-8/fail.xml"/>
            <x:result href="result-d13016.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-test-8 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-9/pass.xml"/>
            <x:result href="result-d13025.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-9 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-9/fail.xml"/>
            <x:result href="result-d13034.xml"/>
            <x:test successful="true">
               <x:label>report fig-xref-test-9 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>table-xref-conformance</x:label>
         <x:scenario>
            <x:label>table-xref-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-1/pass.xml"/>
            <x:result href="result-d13043.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-conformity-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-1/fail.xml"/>
            <x:result href="result-d13052.xml"/>
            <x:test successful="true">
               <x:label>report table-xref-conformity-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-2/pass.xml"/>
            <x:result href="result-d13061.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-conformity-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-2/fail.xml"/>
            <x:result href="result-d13070.xml"/>
            <x:test successful="true">
               <x:label>report table-xref-conformity-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-3/pass.xml"/>
            <x:result href="result-d13079.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-conformity-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-3/fail.xml"/>
            <x:result href="result-d13088.xml"/>
            <x:test successful="true">
               <x:label>report table-xref-conformity-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-4/pass.xml"/>
            <x:result href="result-d13097.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-conformity-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-4/fail.xml"/>
            <x:result href="result-d13106.xml"/>
            <x:test successful="true">
               <x:label>report table-xref-conformity-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-test-1/pass.xml"/>
            <x:result href="result-d13115.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-test-1/fail.xml"/>
            <x:result href="result-d13124.xml"/>
            <x:test successful="true">
               <x:label>report table-xref-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-test-2/pass.xml"/>
            <x:result href="result-d13133.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-test-2/fail.xml"/>
            <x:result href="result-d13142.xml"/>
            <x:test successful="true">
               <x:label>report table-xref-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-test-3/pass.xml"/>
            <x:result href="result-d13151.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-test-3/fail.xml"/>
            <x:result href="result-d13160.xml"/>
            <x:test successful="true">
               <x:label>report table-xref-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>supp-file-xref-conformance</x:label>
         <x:scenario>
            <x:label>supp-file-xref-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-1/pass.xml"/>
            <x:result href="result-d13169.xml"/>
            <x:test successful="true">
               <x:label>not report supp-file-xref-conformity-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-1/fail.xml"/>
            <x:result href="result-d13178.xml"/>
            <x:test successful="true">
               <x:label>report supp-file-xref-conformity-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-2/pass.xml"/>
            <x:result href="result-d13187.xml"/>
            <x:test successful="true">
               <x:label>not report supp-file-xref-conformity-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-2/fail.xml"/>
            <x:result href="result-d13196.xml"/>
            <x:test successful="true">
               <x:label>report supp-file-xref-conformity-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-3/pass.xml"/>
            <x:result href="result-d13205.xml"/>
            <x:test successful="true">
               <x:label>not report supp-file-xref-conformity-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-3/fail.xml"/>
            <x:result href="result-d13214.xml"/>
            <x:test successful="true">
               <x:label>report supp-file-xref-conformity-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-4/pass.xml"/>
            <x:result href="result-d13223.xml"/>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformity-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-4/fail.xml"/>
            <x:result href="result-d13232.xml"/>
            <x:test successful="true">
               <x:label>assert supp-file-xref-conformity-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-5/pass.xml"/>
            <x:result href="result-d13241.xml"/>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformity-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-5/fail.xml"/>
            <x:result href="result-d13250.xml"/>
            <x:test successful="true">
               <x:label>assert supp-file-xref-conformity-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-test-1/pass.xml"/>
            <x:result href="result-d13259.xml"/>
            <x:test successful="true">
               <x:label>not report supp-file-xref-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-test-1/fail.xml"/>
            <x:result href="result-d13268.xml"/>
            <x:test successful="true">
               <x:label>report supp-file-xref-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-xref-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-xref-test-2/pass.xml"/>
            <x:result href="result-d13277.xml"/>
            <x:test successful="true">
               <x:label>not report supp-xref-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-xref-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-xref-test-2/fail.xml"/>
            <x:result href="result-d13286.xml"/>
            <x:test successful="true">
               <x:label>report supp-xref-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-xref-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-xref-test-3/pass.xml"/>
            <x:result href="result-d13295.xml"/>
            <x:test successful="true">
               <x:label>not report supp-xref-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-xref-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-xref-test-3/fail.xml"/>
            <x:result href="result-d13304.xml"/>
            <x:test successful="true">
               <x:label>report supp-xref-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>equation-xref-conformance</x:label>
         <x:scenario>
            <x:label>equ-xref-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equation-xref-conformance/equ-xref-conformity-1/pass.xml"/>
            <x:result href="result-d13313.xml"/>
            <x:test successful="true">
               <x:label>not report equ-xref-conformity-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equ-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equation-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equation-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equ-xref-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equation-xref-conformance/equ-xref-conformity-1/fail.xml"/>
            <x:result href="result-d13322.xml"/>
            <x:test successful="true">
               <x:label>report equ-xref-conformity-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equ-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equation-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equation-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equ-xref-conformity-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equation-xref-conformance/equ-xref-conformity-2/pass.xml"/>
            <x:result href="result-d13331.xml"/>
            <x:test successful="true">
               <x:label>not assert equ-xref-conformity-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equ-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equation-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equation-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equ-xref-conformity-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equation-xref-conformance/equ-xref-conformity-2/fail.xml"/>
            <x:result href="result-d13340.xml"/>
            <x:test successful="true">
               <x:label>assert equ-xref-conformity-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equ-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equation-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equation-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>org-ref-article-book-title</x:label>
         <x:scenario>
            <x:label>bssubtilis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/bssubtilis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13349.xml"/>
            <x:test successful="true">
               <x:label>not report bssubtilis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bssubtilis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bssubtilis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/bssubtilis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13358.xml"/>
            <x:test successful="true">
               <x:label>report bssubtilis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bssubtilis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bacillusssubtilis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/bacillusssubtilis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13367.xml"/>
            <x:test successful="true">
               <x:label>not report bacillusssubtilis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bacillusssubtilis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bacillusssubtilis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/bacillusssubtilis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13376.xml"/>
            <x:test successful="true">
               <x:label>report bacillusssubtilis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bacillusssubtilis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsmelanogaster-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dsmelanogaster-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13385.xml"/>
            <x:test successful="true">
               <x:label>not report dsmelanogaster-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsmelanogaster-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsmelanogaster-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dsmelanogaster-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13394.xml"/>
            <x:test successful="true">
               <x:label>report dsmelanogaster-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsmelanogaster-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasmelanogaster-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilasmelanogaster-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13403.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilasmelanogaster-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasmelanogaster-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasmelanogaster-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilasmelanogaster-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13412.xml"/>
            <x:test successful="true">
               <x:label>report drosophilasmelanogaster-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasmelanogaster-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escoli-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escoli-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13421.xml"/>
            <x:test successful="true">
               <x:label>not report escoli-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escoli-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escoli-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escoli-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13430.xml"/>
            <x:test successful="true">
               <x:label>report escoli-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escoli-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escherichiascoli-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escherichiascoli-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13439.xml"/>
            <x:test successful="true">
               <x:label>not report escherichiascoli-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escherichiascoli-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escherichiascoli-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escherichiascoli-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13448.xml"/>
            <x:test successful="true">
               <x:label>report escherichiascoli-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escherichiascoli-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspombe-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sspombe-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13457.xml"/>
            <x:test successful="true">
               <x:label>not report sspombe-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspombe-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspombe-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sspombe-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13466.xml"/>
            <x:test successful="true">
               <x:label>report sspombe-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspombe-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schizosaccharomycesspombe-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/schizosaccharomycesspombe-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13475.xml"/>
            <x:test successful="true">
               <x:label>not report schizosaccharomycesspombe-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schizosaccharomycesspombe-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schizosaccharomycesspombe-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/schizosaccharomycesspombe-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13484.xml"/>
            <x:test successful="true">
               <x:label>report schizosaccharomycesspombe-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schizosaccharomycesspombe-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sscerevisiae-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sscerevisiae-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13493.xml"/>
            <x:test successful="true">
               <x:label>not report sscerevisiae-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sscerevisiae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sscerevisiae-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sscerevisiae-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13502.xml"/>
            <x:test successful="true">
               <x:label>report sscerevisiae-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sscerevisiae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>saccharomycesscerevisiae-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/saccharomycesscerevisiae-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13511.xml"/>
            <x:test successful="true">
               <x:label>not report saccharomycesscerevisiae-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'saccharomycesscerevisiae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>saccharomycesscerevisiae-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/saccharomycesscerevisiae-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13520.xml"/>
            <x:test successful="true">
               <x:label>report saccharomycesscerevisiae-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'saccharomycesscerevisiae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cselegans-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/cselegans-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13529.xml"/>
            <x:test successful="true">
               <x:label>not report cselegans-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cselegans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cselegans-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/cselegans-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13538.xml"/>
            <x:test successful="true">
               <x:label>report cselegans-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cselegans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>caenorhabditisselegans-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/caenorhabditisselegans-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13547.xml"/>
            <x:test successful="true">
               <x:label>not report caenorhabditisselegans-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'caenorhabditisselegans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>caenorhabditisselegans-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/caenorhabditisselegans-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13556.xml"/>
            <x:test successful="true">
               <x:label>report caenorhabditisselegans-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'caenorhabditisselegans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>asthaliana-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/asthaliana-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13565.xml"/>
            <x:test successful="true">
               <x:label>not report asthaliana-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'asthaliana-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>asthaliana-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/asthaliana-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13574.xml"/>
            <x:test successful="true">
               <x:label>report asthaliana-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'asthaliana-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arabidopsissthaliana-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/arabidopsissthaliana-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13583.xml"/>
            <x:test successful="true">
               <x:label>not report arabidopsissthaliana-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arabidopsissthaliana-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arabidopsissthaliana-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/arabidopsissthaliana-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13592.xml"/>
            <x:test successful="true">
               <x:label>report arabidopsissthaliana-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arabidopsissthaliana-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>msthermophila-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/msthermophila-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13601.xml"/>
            <x:test successful="true">
               <x:label>not report msthermophila-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'msthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>msthermophila-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/msthermophila-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13610.xml"/>
            <x:test successful="true">
               <x:label>report msthermophila-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'msthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>myceliophthorasthermophila-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/myceliophthorasthermophila-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13619.xml"/>
            <x:test successful="true">
               <x:label>not report myceliophthorasthermophila-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'myceliophthorasthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>myceliophthorasthermophila-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/myceliophthorasthermophila-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13628.xml"/>
            <x:test successful="true">
               <x:label>report myceliophthorasthermophila-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'myceliophthorasthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dictyostelium-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dictyostelium-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13637.xml"/>
            <x:test successful="true">
               <x:label>not report dictyostelium-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dictyostelium-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dictyostelium-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dictyostelium-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13646.xml"/>
            <x:test successful="true">
               <x:label>report dictyostelium-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dictyostelium-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psfalciparum-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/psfalciparum-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13655.xml"/>
            <x:test successful="true">
               <x:label>not report psfalciparum-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psfalciparum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psfalciparum-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/psfalciparum-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13664.xml"/>
            <x:test successful="true">
               <x:label>report psfalciparum-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psfalciparum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plasmodiumsfalciparum-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/plasmodiumsfalciparum-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13673.xml"/>
            <x:test successful="true">
               <x:label>not report plasmodiumsfalciparum-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plasmodiumsfalciparum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plasmodiumsfalciparum-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/plasmodiumsfalciparum-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13682.xml"/>
            <x:test successful="true">
               <x:label>report plasmodiumsfalciparum-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plasmodiumsfalciparum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssenterica-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssenterica-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13691.xml"/>
            <x:test successful="true">
               <x:label>not report ssenterica-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssenterica-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssenterica-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssenterica-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13700.xml"/>
            <x:test successful="true">
               <x:label>report ssenterica-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssenterica-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salmonellasenterica-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/salmonellasenterica-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13709.xml"/>
            <x:test successful="true">
               <x:label>not report salmonellasenterica-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salmonellasenterica-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salmonellasenterica-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/salmonellasenterica-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13718.xml"/>
            <x:test successful="true">
               <x:label>report salmonellasenterica-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salmonellasenterica-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspyogenes-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sspyogenes-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13727.xml"/>
            <x:test successful="true">
               <x:label>not report sspyogenes-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspyogenes-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspyogenes-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sspyogenes-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13736.xml"/>
            <x:test successful="true">
               <x:label>report sspyogenes-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspyogenes-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>streptococcusspyogenes-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/streptococcusspyogenes-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13745.xml"/>
            <x:test successful="true">
               <x:label>not report streptococcusspyogenes-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'streptococcusspyogenes-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>streptococcusspyogenes-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/streptococcusspyogenes-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13754.xml"/>
            <x:test successful="true">
               <x:label>report streptococcusspyogenes-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'streptococcusspyogenes-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psdumerilii-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/psdumerilii-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13763.xml"/>
            <x:test successful="true">
               <x:label>not report psdumerilii-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psdumerilii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psdumerilii-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/psdumerilii-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13772.xml"/>
            <x:test successful="true">
               <x:label>report psdumerilii-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psdumerilii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>platynereissdumerilii-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/platynereissdumerilii-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13781.xml"/>
            <x:test successful="true">
               <x:label>not report platynereissdumerilii-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'platynereissdumerilii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>platynereissdumerilii-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/platynereissdumerilii-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13790.xml"/>
            <x:test successful="true">
               <x:label>report platynereissdumerilii-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'platynereissdumerilii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pscynocephalus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/pscynocephalus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13799.xml"/>
            <x:test successful="true">
               <x:label>not report pscynocephalus-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pscynocephalus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pscynocephalus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/pscynocephalus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13808.xml"/>
            <x:test successful="true">
               <x:label>report pscynocephalus-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pscynocephalus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>papioscynocephalus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/papioscynocephalus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13817.xml"/>
            <x:test successful="true">
               <x:label>not report papioscynocephalus-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'papioscynocephalus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>papioscynocephalus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/papioscynocephalus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13826.xml"/>
            <x:test successful="true">
               <x:label>report papioscynocephalus-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'papioscynocephalus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>osfasciatus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/osfasciatus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13835.xml"/>
            <x:test successful="true">
               <x:label>not report osfasciatus-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'osfasciatus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>osfasciatus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/osfasciatus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13844.xml"/>
            <x:test successful="true">
               <x:label>report osfasciatus-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'osfasciatus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>oncopeltussfasciatus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/oncopeltussfasciatus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13853.xml"/>
            <x:test successful="true">
               <x:label>not report oncopeltussfasciatus-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'oncopeltussfasciatus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>oncopeltussfasciatus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/oncopeltussfasciatus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13862.xml"/>
            <x:test successful="true">
               <x:label>report oncopeltussfasciatus-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'oncopeltussfasciatus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nscrassa-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nscrassa-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13871.xml"/>
            <x:test successful="true">
               <x:label>not report nscrassa-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nscrassa-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nscrassa-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nscrassa-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13880.xml"/>
            <x:test successful="true">
               <x:label>report nscrassa-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nscrassa-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>neurosporascrassa-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/neurosporascrassa-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13889.xml"/>
            <x:test successful="true">
               <x:label>not report neurosporascrassa-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'neurosporascrassa-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>neurosporascrassa-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/neurosporascrassa-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13898.xml"/>
            <x:test successful="true">
               <x:label>report neurosporascrassa-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'neurosporascrassa-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csintestinalis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/csintestinalis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13907.xml"/>
            <x:test successful="true">
               <x:label>not report csintestinalis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csintestinalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csintestinalis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/csintestinalis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13916.xml"/>
            <x:test successful="true">
               <x:label>report csintestinalis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csintestinalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cionasintestinalis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/cionasintestinalis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13925.xml"/>
            <x:test successful="true">
               <x:label>not report cionasintestinalis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cionasintestinalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cionasintestinalis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/cionasintestinalis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13934.xml"/>
            <x:test successful="true">
               <x:label>report cionasintestinalis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cionasintestinalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escuniculi-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escuniculi-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13943.xml"/>
            <x:test successful="true">
               <x:label>not report escuniculi-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escuniculi-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escuniculi-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escuniculi-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13952.xml"/>
            <x:test successful="true">
               <x:label>report escuniculi-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escuniculi-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>encephalitozoonscuniculi-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/encephalitozoonscuniculi-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13961.xml"/>
            <x:test successful="true">
               <x:label>not report encephalitozoonscuniculi-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'encephalitozoonscuniculi-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>encephalitozoonscuniculi-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/encephalitozoonscuniculi-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13970.xml"/>
            <x:test successful="true">
               <x:label>report encephalitozoonscuniculi-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'encephalitozoonscuniculi-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hssalinarum-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/hssalinarum-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13979.xml"/>
            <x:test successful="true">
               <x:label>not report hssalinarum-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hssalinarum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hssalinarum-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/hssalinarum-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13988.xml"/>
            <x:test successful="true">
               <x:label>report hssalinarum-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hssalinarum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>halobacteriumssalinarum-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/halobacteriumssalinarum-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13997.xml"/>
            <x:test successful="true">
               <x:label>not report halobacteriumssalinarum-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'halobacteriumssalinarum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>halobacteriumssalinarum-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/halobacteriumssalinarum-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14006.xml"/>
            <x:test successful="true">
               <x:label>report halobacteriumssalinarum-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'halobacteriumssalinarum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sssolfataricus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sssolfataricus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14015.xml"/>
            <x:test successful="true">
               <x:label>not report sssolfataricus-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sssolfataricus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sssolfataricus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sssolfataricus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14024.xml"/>
            <x:test successful="true">
               <x:label>report sssolfataricus-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sssolfataricus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sulfolobusssolfataricus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sulfolobusssolfataricus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14033.xml"/>
            <x:test successful="true">
               <x:label>not report sulfolobusssolfataricus-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sulfolobusssolfataricus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sulfolobusssolfataricus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sulfolobusssolfataricus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14042.xml"/>
            <x:test successful="true">
               <x:label>report sulfolobusssolfataricus-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sulfolobusssolfataricus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssmediterranea-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssmediterranea-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14051.xml"/>
            <x:test successful="true">
               <x:label>not report ssmediterranea-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssmediterranea-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssmediterranea-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssmediterranea-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14060.xml"/>
            <x:test successful="true">
               <x:label>report ssmediterranea-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssmediterranea-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schmidteasmediterranea-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/schmidteasmediterranea-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14069.xml"/>
            <x:test successful="true">
               <x:label>not report schmidteasmediterranea-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schmidteasmediterranea-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schmidteasmediterranea-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/schmidteasmediterranea-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14078.xml"/>
            <x:test successful="true">
               <x:label>report schmidteasmediterranea-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schmidteasmediterranea-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssrosetta-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssrosetta-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14087.xml"/>
            <x:test successful="true">
               <x:label>not report ssrosetta-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssrosetta-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssrosetta-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssrosetta-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14096.xml"/>
            <x:test successful="true">
               <x:label>report ssrosetta-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssrosetta-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salpingoecasrosetta-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/salpingoecasrosetta-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14105.xml"/>
            <x:test successful="true">
               <x:label>not report salpingoecasrosetta-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salpingoecasrosetta-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salpingoecasrosetta-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/salpingoecasrosetta-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14114.xml"/>
            <x:test successful="true">
               <x:label>report salpingoecasrosetta-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salpingoecasrosetta-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsvectensis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nsvectensis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14123.xml"/>
            <x:test successful="true">
               <x:label>not report nsvectensis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsvectensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsvectensis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nsvectensis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14132.xml"/>
            <x:test successful="true">
               <x:label>report nsvectensis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsvectensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nematostellasvectensis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nematostellasvectensis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14141.xml"/>
            <x:test successful="true">
               <x:label>not report nematostellasvectensis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nematostellasvectensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nematostellasvectensis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nematostellasvectensis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14150.xml"/>
            <x:test successful="true">
               <x:label>report nematostellasvectensis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nematostellasvectensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssaureus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssaureus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14159.xml"/>
            <x:test successful="true">
               <x:label>not report ssaureus-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssaureus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssaureus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssaureus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14168.xml"/>
            <x:test successful="true">
               <x:label>report ssaureus-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssaureus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>staphylococcussaureus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/staphylococcussaureus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14177.xml"/>
            <x:test successful="true">
               <x:label>not report staphylococcussaureus-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'staphylococcussaureus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>staphylococcussaureus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/staphylococcussaureus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14186.xml"/>
            <x:test successful="true">
               <x:label>report staphylococcussaureus-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'staphylococcussaureus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vscholerae-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/vscholerae-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14195.xml"/>
            <x:test successful="true">
               <x:label>not report vscholerae-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vscholerae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vscholerae-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/vscholerae-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14204.xml"/>
            <x:test successful="true">
               <x:label>report vscholerae-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vscholerae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vibrioscholerae-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/vibrioscholerae-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14213.xml"/>
            <x:test successful="true">
               <x:label>not report vibrioscholerae-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vibrioscholerae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vibrioscholerae-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/vibrioscholerae-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14222.xml"/>
            <x:test successful="true">
               <x:label>report vibrioscholerae-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vibrioscholerae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tsthermophila-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/tsthermophila-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14231.xml"/>
            <x:test successful="true">
               <x:label>not report tsthermophila-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tsthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tsthermophila-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/tsthermophila-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14240.xml"/>
            <x:test successful="true">
               <x:label>report tsthermophila-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tsthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tetrahymenasthermophila-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/tetrahymenasthermophila-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14249.xml"/>
            <x:test successful="true">
               <x:label>not report tetrahymenasthermophila-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tetrahymenasthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tetrahymenasthermophila-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/tetrahymenasthermophila-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14258.xml"/>
            <x:test successful="true">
               <x:label>report tetrahymenasthermophila-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tetrahymenasthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csreinhardtii-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/csreinhardtii-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14267.xml"/>
            <x:test successful="true">
               <x:label>not report csreinhardtii-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csreinhardtii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csreinhardtii-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/csreinhardtii-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14276.xml"/>
            <x:test successful="true">
               <x:label>report csreinhardtii-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csreinhardtii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydomonassreinhardtii-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/chlamydomonassreinhardtii-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14285.xml"/>
            <x:test successful="true">
               <x:label>not report chlamydomonassreinhardtii-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydomonassreinhardtii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydomonassreinhardtii-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/chlamydomonassreinhardtii-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14294.xml"/>
            <x:test successful="true">
               <x:label>report chlamydomonassreinhardtii-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydomonassreinhardtii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsattenuata-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nsattenuata-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14303.xml"/>
            <x:test successful="true">
               <x:label>not report nsattenuata-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsattenuata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsattenuata-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nsattenuata-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14312.xml"/>
            <x:test successful="true">
               <x:label>report nsattenuata-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsattenuata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nicotianasattenuata-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nicotianasattenuata-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14321.xml"/>
            <x:test successful="true">
               <x:label>not report nicotianasattenuata-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nicotianasattenuata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nicotianasattenuata-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nicotianasattenuata-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14330.xml"/>
            <x:test successful="true">
               <x:label>report nicotianasattenuata-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nicotianasattenuata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escarotovora-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escarotovora-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14339.xml"/>
            <x:test successful="true">
               <x:label>not report escarotovora-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escarotovora-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escarotovora-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escarotovora-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14348.xml"/>
            <x:test successful="true">
               <x:label>report escarotovora-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escarotovora-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>erwiniascarotovora-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/erwiniascarotovora-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14357.xml"/>
            <x:test successful="true">
               <x:label>not report erwiniascarotovora-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'erwiniascarotovora-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>erwiniascarotovora-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/erwiniascarotovora-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14366.xml"/>
            <x:test successful="true">
               <x:label>report erwiniascarotovora-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'erwiniascarotovora-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>esfaecalis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/esfaecalis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14375.xml"/>
            <x:test successful="true">
               <x:label>not report esfaecalis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'esfaecalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>esfaecalis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/esfaecalis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14384.xml"/>
            <x:test successful="true">
               <x:label>report esfaecalis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'esfaecalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hsapiens-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/hsapiens-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14393.xml"/>
            <x:test successful="true">
               <x:label>not report hsapiens-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hsapiens-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hsapiens-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/hsapiens-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14402.xml"/>
            <x:test successful="true">
               <x:label>report hsapiens-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hsapiens-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>homosapiens-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/homosapiens-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14411.xml"/>
            <x:test successful="true">
               <x:label>not report homosapiens-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'homosapiens-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>homosapiens-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/homosapiens-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14420.xml"/>
            <x:test successful="true">
               <x:label>report homosapiens-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'homosapiens-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ctrachomatis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ctrachomatis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14429.xml"/>
            <x:test successful="true">
               <x:label>not report ctrachomatis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ctrachomatis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ctrachomatis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ctrachomatis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14438.xml"/>
            <x:test successful="true">
               <x:label>report ctrachomatis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ctrachomatis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydiatrachomatis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/chlamydiatrachomatis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14447.xml"/>
            <x:test successful="true">
               <x:label>not report chlamydiatrachomatis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydiatrachomatis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydiatrachomatis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/chlamydiatrachomatis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14456.xml"/>
            <x:test successful="true">
               <x:label>report chlamydiatrachomatis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydiatrachomatis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>enterococcussfaecalis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/enterococcussfaecalis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14465.xml"/>
            <x:test successful="true">
               <x:label>not report enterococcussfaecalis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'enterococcussfaecalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>enterococcussfaecalis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/enterococcussfaecalis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14474.xml"/>
            <x:test successful="true">
               <x:label>report enterococcussfaecalis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'enterococcussfaecalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xlaevis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xlaevis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14483.xml"/>
            <x:test successful="true">
               <x:label>not report xlaevis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xlaevis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xlaevis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xlaevis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14492.xml"/>
            <x:test successful="true">
               <x:label>report xlaevis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xlaevis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopuslaevis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xenopuslaevis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14501.xml"/>
            <x:test successful="true">
               <x:label>not report xenopuslaevis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopuslaevis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopuslaevis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xenopuslaevis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14510.xml"/>
            <x:test successful="true">
               <x:label>report xenopuslaevis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopuslaevis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xtropicalis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xtropicalis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14519.xml"/>
            <x:test successful="true">
               <x:label>not report xtropicalis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xtropicalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xtropicalis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xtropicalis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14528.xml"/>
            <x:test successful="true">
               <x:label>report xtropicalis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xtropicalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopustropicalis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xenopustropicalis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14537.xml"/>
            <x:test successful="true">
               <x:label>not report xenopustropicalis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopustropicalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopustropicalis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xenopustropicalis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14546.xml"/>
            <x:test successful="true">
               <x:label>report xenopustropicalis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopustropicalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>mmusculus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/mmusculus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14555.xml"/>
            <x:test successful="true">
               <x:label>not report mmusculus-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mmusculus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>mmusculus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/mmusculus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14564.xml"/>
            <x:test successful="true">
               <x:label>report mmusculus-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mmusculus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>musmusculus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/musmusculus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14573.xml"/>
            <x:test successful="true">
               <x:label>not report musmusculus-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'musmusculus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>musmusculus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/musmusculus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14582.xml"/>
            <x:test successful="true">
               <x:label>report musmusculus-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'musmusculus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dimmigrans-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dimmigrans-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14591.xml"/>
            <x:test successful="true">
               <x:label>not report dimmigrans-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dimmigrans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dimmigrans-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dimmigrans-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14600.xml"/>
            <x:test successful="true">
               <x:label>report dimmigrans-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dimmigrans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaimmigrans-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilaimmigrans-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14609.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilaimmigrans-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaimmigrans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaimmigrans-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilaimmigrans-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14618.xml"/>
            <x:test successful="true">
               <x:label>report drosophilaimmigrans-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaimmigrans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsubobscura-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dsubobscura-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14627.xml"/>
            <x:test successful="true">
               <x:label>not report dsubobscura-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsubobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsubobscura-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dsubobscura-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14636.xml"/>
            <x:test successful="true">
               <x:label>report dsubobscura-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsubobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasubobscura-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilasubobscura-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14645.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilasubobscura-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasubobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasubobscura-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilasubobscura-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14654.xml"/>
            <x:test successful="true">
               <x:label>report drosophilasubobscura-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasubobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daffinis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/daffinis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14663.xml"/>
            <x:test successful="true">
               <x:label>not report daffinis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daffinis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daffinis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/daffinis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14672.xml"/>
            <x:test successful="true">
               <x:label>report daffinis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daffinis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaaffinis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilaaffinis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14681.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilaaffinis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaaffinis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaaffinis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilaaffinis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14690.xml"/>
            <x:test successful="true">
               <x:label>report drosophilaaffinis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaaffinis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dobscura-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dobscura-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14699.xml"/>
            <x:test successful="true">
               <x:label>not report dobscura-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dobscura-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dobscura-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14708.xml"/>
            <x:test successful="true">
               <x:label>report dobscura-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaobscura-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilaobscura-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14717.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilaobscura-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaobscura-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilaobscura-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14726.xml"/>
            <x:test successful="true">
               <x:label>report drosophilaobscura-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ftularensis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ftularensis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14735.xml"/>
            <x:test successful="true">
               <x:label>not report ftularensis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ftularensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ftularensis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ftularensis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14744.xml"/>
            <x:test successful="true">
               <x:label>report ftularensis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ftularensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>francisellatularensis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/francisellatularensis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14753.xml"/>
            <x:test successful="true">
               <x:label>not report francisellatularensis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'francisellatularensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>francisellatularensis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/francisellatularensis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14762.xml"/>
            <x:test successful="true">
               <x:label>report francisellatularensis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'francisellatularensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pplantaginis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/pplantaginis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14771.xml"/>
            <x:test successful="true">
               <x:label>not report pplantaginis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pplantaginis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pplantaginis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/pplantaginis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14780.xml"/>
            <x:test successful="true">
               <x:label>report pplantaginis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pplantaginis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>podosphaeraplantaginis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/podosphaeraplantaginis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14789.xml"/>
            <x:test successful="true">
               <x:label>not report podosphaeraplantaginis-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'podosphaeraplantaginis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>podosphaeraplantaginis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/podosphaeraplantaginis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14798.xml"/>
            <x:test successful="true">
               <x:label>report podosphaeraplantaginis-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'podosphaeraplantaginis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>planceolata-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/planceolata-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14807.xml"/>
            <x:test successful="true">
               <x:label>not report planceolata-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'planceolata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>planceolata-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/planceolata-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14816.xml"/>
            <x:test successful="true">
               <x:label>report planceolata-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'planceolata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plantagolanceolata-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/plantagolanceolata-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14825.xml"/>
            <x:test successful="true">
               <x:label>not report plantagolanceolata-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plantagolanceolata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plantagolanceolata-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/plantagolanceolata-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14834.xml"/>
            <x:test successful="true">
               <x:label>report plantagolanceolata-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plantagolanceolata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drerio-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drerio-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14843.xml"/>
            <x:test successful="true">
               <x:label>not report drerio-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drerio-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drerio-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drerio-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14852.xml"/>
            <x:test successful="true">
               <x:label>report drerio-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drerio-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daniorerio-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/daniorerio-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14861.xml"/>
            <x:test successful="true">
               <x:label>not report daniorerio-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daniorerio-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daniorerio-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/daniorerio-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14870.xml"/>
            <x:test successful="true">
               <x:label>report daniorerio-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daniorerio-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophila-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophila-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14879.xml"/>
            <x:test successful="true">
               <x:label>not report drosophila-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophila-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophila-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14888.xml"/>
            <x:test successful="true">
               <x:label>report drosophila-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xenopus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14897.xml"/>
            <x:test successful="true">
               <x:label>not report xenopus-ref-article-title-check info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xenopus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14906.xml"/>
            <x:test successful="true">
               <x:label>report xenopus-ref-article-title-check info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>org-title-kwd</x:label>
         <x:scenario>
            <x:label>bssubtilis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/bssubtilis-article-title-check/pass.xml"/>
            <x:result href="result-d14915.xml"/>
            <x:test successful="true">
               <x:label>not report bssubtilis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bssubtilis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bssubtilis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/bssubtilis-article-title-check/fail.xml"/>
            <x:result href="result-d14924.xml"/>
            <x:test successful="true">
               <x:label>report bssubtilis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bssubtilis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bacillusssubtilis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/bacillusssubtilis-article-title-check/pass.xml"/>
            <x:result href="result-d14933.xml"/>
            <x:test successful="true">
               <x:label>not report bacillusssubtilis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bacillusssubtilis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bacillusssubtilis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/bacillusssubtilis-article-title-check/fail.xml"/>
            <x:result href="result-d14942.xml"/>
            <x:test successful="true">
               <x:label>report bacillusssubtilis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bacillusssubtilis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsmelanogaster-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dsmelanogaster-article-title-check/pass.xml"/>
            <x:result href="result-d14951.xml"/>
            <x:test successful="true">
               <x:label>not report dsmelanogaster-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsmelanogaster-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsmelanogaster-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dsmelanogaster-article-title-check/fail.xml"/>
            <x:result href="result-d14960.xml"/>
            <x:test successful="true">
               <x:label>report dsmelanogaster-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsmelanogaster-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasmelanogaster-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilasmelanogaster-article-title-check/pass.xml"/>
            <x:result href="result-d14969.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilasmelanogaster-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasmelanogaster-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasmelanogaster-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilasmelanogaster-article-title-check/fail.xml"/>
            <x:result href="result-d14978.xml"/>
            <x:test successful="true">
               <x:label>report drosophilasmelanogaster-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasmelanogaster-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escoli-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escoli-article-title-check/pass.xml"/>
            <x:result href="result-d14987.xml"/>
            <x:test successful="true">
               <x:label>not report escoli-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escoli-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escoli-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escoli-article-title-check/fail.xml"/>
            <x:result href="result-d14996.xml"/>
            <x:test successful="true">
               <x:label>report escoli-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escoli-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escherichiascoli-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escherichiascoli-article-title-check/pass.xml"/>
            <x:result href="result-d15005.xml"/>
            <x:test successful="true">
               <x:label>not report escherichiascoli-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escherichiascoli-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escherichiascoli-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escherichiascoli-article-title-check/fail.xml"/>
            <x:result href="result-d15014.xml"/>
            <x:test successful="true">
               <x:label>report escherichiascoli-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escherichiascoli-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspombe-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sspombe-article-title-check/pass.xml"/>
            <x:result href="result-d15023.xml"/>
            <x:test successful="true">
               <x:label>not report sspombe-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspombe-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspombe-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sspombe-article-title-check/fail.xml"/>
            <x:result href="result-d15032.xml"/>
            <x:test successful="true">
               <x:label>report sspombe-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspombe-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schizosaccharomycesspombe-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/schizosaccharomycesspombe-article-title-check/pass.xml"/>
            <x:result href="result-d15041.xml"/>
            <x:test successful="true">
               <x:label>not report schizosaccharomycesspombe-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schizosaccharomycesspombe-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schizosaccharomycesspombe-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/schizosaccharomycesspombe-article-title-check/fail.xml"/>
            <x:result href="result-d15050.xml"/>
            <x:test successful="true">
               <x:label>report schizosaccharomycesspombe-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schizosaccharomycesspombe-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sscerevisiae-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sscerevisiae-article-title-check/pass.xml"/>
            <x:result href="result-d15059.xml"/>
            <x:test successful="true">
               <x:label>not report sscerevisiae-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sscerevisiae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sscerevisiae-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sscerevisiae-article-title-check/fail.xml"/>
            <x:result href="result-d15068.xml"/>
            <x:test successful="true">
               <x:label>report sscerevisiae-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sscerevisiae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>saccharomycesscerevisiae-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/saccharomycesscerevisiae-article-title-check/pass.xml"/>
            <x:result href="result-d15077.xml"/>
            <x:test successful="true">
               <x:label>not report saccharomycesscerevisiae-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'saccharomycesscerevisiae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>saccharomycesscerevisiae-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/saccharomycesscerevisiae-article-title-check/fail.xml"/>
            <x:result href="result-d15086.xml"/>
            <x:test successful="true">
               <x:label>report saccharomycesscerevisiae-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'saccharomycesscerevisiae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cselegans-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/cselegans-article-title-check/pass.xml"/>
            <x:result href="result-d15095.xml"/>
            <x:test successful="true">
               <x:label>not report cselegans-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cselegans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cselegans-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/cselegans-article-title-check/fail.xml"/>
            <x:result href="result-d15104.xml"/>
            <x:test successful="true">
               <x:label>report cselegans-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cselegans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>caenorhabditisselegans-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/caenorhabditisselegans-article-title-check/pass.xml"/>
            <x:result href="result-d15113.xml"/>
            <x:test successful="true">
               <x:label>not report caenorhabditisselegans-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'caenorhabditisselegans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>caenorhabditisselegans-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/caenorhabditisselegans-article-title-check/fail.xml"/>
            <x:result href="result-d15122.xml"/>
            <x:test successful="true">
               <x:label>report caenorhabditisselegans-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'caenorhabditisselegans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>asthaliana-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/asthaliana-article-title-check/pass.xml"/>
            <x:result href="result-d15131.xml"/>
            <x:test successful="true">
               <x:label>not report asthaliana-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'asthaliana-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>asthaliana-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/asthaliana-article-title-check/fail.xml"/>
            <x:result href="result-d15140.xml"/>
            <x:test successful="true">
               <x:label>report asthaliana-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'asthaliana-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arabidopsissthaliana-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/arabidopsissthaliana-article-title-check/pass.xml"/>
            <x:result href="result-d15149.xml"/>
            <x:test successful="true">
               <x:label>not report arabidopsissthaliana-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arabidopsissthaliana-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arabidopsissthaliana-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/arabidopsissthaliana-article-title-check/fail.xml"/>
            <x:result href="result-d15158.xml"/>
            <x:test successful="true">
               <x:label>report arabidopsissthaliana-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arabidopsissthaliana-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>msthermophila-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/msthermophila-article-title-check/pass.xml"/>
            <x:result href="result-d15167.xml"/>
            <x:test successful="true">
               <x:label>not report msthermophila-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'msthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>msthermophila-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/msthermophila-article-title-check/fail.xml"/>
            <x:result href="result-d15176.xml"/>
            <x:test successful="true">
               <x:label>report msthermophila-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'msthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>myceliophthorasthermophila-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/myceliophthorasthermophila-article-title-check/pass.xml"/>
            <x:result href="result-d15185.xml"/>
            <x:test successful="true">
               <x:label>not report myceliophthorasthermophila-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'myceliophthorasthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>myceliophthorasthermophila-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/myceliophthorasthermophila-article-title-check/fail.xml"/>
            <x:result href="result-d15194.xml"/>
            <x:test successful="true">
               <x:label>report myceliophthorasthermophila-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'myceliophthorasthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dictyostelium-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dictyostelium-article-title-check/pass.xml"/>
            <x:result href="result-d15203.xml"/>
            <x:test successful="true">
               <x:label>not report dictyostelium-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dictyostelium-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dictyostelium-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dictyostelium-article-title-check/fail.xml"/>
            <x:result href="result-d15212.xml"/>
            <x:test successful="true">
               <x:label>report dictyostelium-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dictyostelium-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psfalciparum-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/psfalciparum-article-title-check/pass.xml"/>
            <x:result href="result-d15221.xml"/>
            <x:test successful="true">
               <x:label>not report psfalciparum-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psfalciparum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psfalciparum-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/psfalciparum-article-title-check/fail.xml"/>
            <x:result href="result-d15230.xml"/>
            <x:test successful="true">
               <x:label>report psfalciparum-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psfalciparum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plasmodiumsfalciparum-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/plasmodiumsfalciparum-article-title-check/pass.xml"/>
            <x:result href="result-d15239.xml"/>
            <x:test successful="true">
               <x:label>not report plasmodiumsfalciparum-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plasmodiumsfalciparum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plasmodiumsfalciparum-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/plasmodiumsfalciparum-article-title-check/fail.xml"/>
            <x:result href="result-d15248.xml"/>
            <x:test successful="true">
               <x:label>report plasmodiumsfalciparum-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plasmodiumsfalciparum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssenterica-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssenterica-article-title-check/pass.xml"/>
            <x:result href="result-d15257.xml"/>
            <x:test successful="true">
               <x:label>not report ssenterica-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssenterica-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssenterica-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssenterica-article-title-check/fail.xml"/>
            <x:result href="result-d15266.xml"/>
            <x:test successful="true">
               <x:label>report ssenterica-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssenterica-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salmonellasenterica-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/salmonellasenterica-article-title-check/pass.xml"/>
            <x:result href="result-d15275.xml"/>
            <x:test successful="true">
               <x:label>not report salmonellasenterica-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salmonellasenterica-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salmonellasenterica-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/salmonellasenterica-article-title-check/fail.xml"/>
            <x:result href="result-d15284.xml"/>
            <x:test successful="true">
               <x:label>report salmonellasenterica-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salmonellasenterica-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspyogenes-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sspyogenes-article-title-check/pass.xml"/>
            <x:result href="result-d15293.xml"/>
            <x:test successful="true">
               <x:label>not report sspyogenes-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspyogenes-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspyogenes-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sspyogenes-article-title-check/fail.xml"/>
            <x:result href="result-d15302.xml"/>
            <x:test successful="true">
               <x:label>report sspyogenes-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspyogenes-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>streptococcusspyogenes-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/streptococcusspyogenes-article-title-check/pass.xml"/>
            <x:result href="result-d15311.xml"/>
            <x:test successful="true">
               <x:label>not report streptococcusspyogenes-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'streptococcusspyogenes-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>streptococcusspyogenes-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/streptococcusspyogenes-article-title-check/fail.xml"/>
            <x:result href="result-d15320.xml"/>
            <x:test successful="true">
               <x:label>report streptococcusspyogenes-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'streptococcusspyogenes-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psdumerilii-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/psdumerilii-article-title-check/pass.xml"/>
            <x:result href="result-d15329.xml"/>
            <x:test successful="true">
               <x:label>not report psdumerilii-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psdumerilii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psdumerilii-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/psdumerilii-article-title-check/fail.xml"/>
            <x:result href="result-d15338.xml"/>
            <x:test successful="true">
               <x:label>report psdumerilii-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psdumerilii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>platynereissdumerilii-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/platynereissdumerilii-article-title-check/pass.xml"/>
            <x:result href="result-d15347.xml"/>
            <x:test successful="true">
               <x:label>not report platynereissdumerilii-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'platynereissdumerilii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>platynereissdumerilii-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/platynereissdumerilii-article-title-check/fail.xml"/>
            <x:result href="result-d15356.xml"/>
            <x:test successful="true">
               <x:label>report platynereissdumerilii-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'platynereissdumerilii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pscynocephalus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/pscynocephalus-article-title-check/pass.xml"/>
            <x:result href="result-d15365.xml"/>
            <x:test successful="true">
               <x:label>not report pscynocephalus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pscynocephalus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pscynocephalus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/pscynocephalus-article-title-check/fail.xml"/>
            <x:result href="result-d15374.xml"/>
            <x:test successful="true">
               <x:label>report pscynocephalus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pscynocephalus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>papioscynocephalus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/papioscynocephalus-article-title-check/pass.xml"/>
            <x:result href="result-d15383.xml"/>
            <x:test successful="true">
               <x:label>not report papioscynocephalus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'papioscynocephalus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>papioscynocephalus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/papioscynocephalus-article-title-check/fail.xml"/>
            <x:result href="result-d15392.xml"/>
            <x:test successful="true">
               <x:label>report papioscynocephalus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'papioscynocephalus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>osfasciatus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/osfasciatus-article-title-check/pass.xml"/>
            <x:result href="result-d15401.xml"/>
            <x:test successful="true">
               <x:label>not report osfasciatus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'osfasciatus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>osfasciatus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/osfasciatus-article-title-check/fail.xml"/>
            <x:result href="result-d15410.xml"/>
            <x:test successful="true">
               <x:label>report osfasciatus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'osfasciatus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>oncopeltussfasciatus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/oncopeltussfasciatus-article-title-check/pass.xml"/>
            <x:result href="result-d15419.xml"/>
            <x:test successful="true">
               <x:label>not report oncopeltussfasciatus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'oncopeltussfasciatus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>oncopeltussfasciatus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/oncopeltussfasciatus-article-title-check/fail.xml"/>
            <x:result href="result-d15428.xml"/>
            <x:test successful="true">
               <x:label>report oncopeltussfasciatus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'oncopeltussfasciatus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nscrassa-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nscrassa-article-title-check/pass.xml"/>
            <x:result href="result-d15437.xml"/>
            <x:test successful="true">
               <x:label>not report nscrassa-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nscrassa-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nscrassa-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nscrassa-article-title-check/fail.xml"/>
            <x:result href="result-d15446.xml"/>
            <x:test successful="true">
               <x:label>report nscrassa-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nscrassa-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>neurosporascrassa-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/neurosporascrassa-article-title-check/pass.xml"/>
            <x:result href="result-d15455.xml"/>
            <x:test successful="true">
               <x:label>not report neurosporascrassa-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'neurosporascrassa-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>neurosporascrassa-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/neurosporascrassa-article-title-check/fail.xml"/>
            <x:result href="result-d15464.xml"/>
            <x:test successful="true">
               <x:label>report neurosporascrassa-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'neurosporascrassa-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csintestinalis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/csintestinalis-article-title-check/pass.xml"/>
            <x:result href="result-d15473.xml"/>
            <x:test successful="true">
               <x:label>not report csintestinalis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csintestinalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csintestinalis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/csintestinalis-article-title-check/fail.xml"/>
            <x:result href="result-d15482.xml"/>
            <x:test successful="true">
               <x:label>report csintestinalis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csintestinalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cionasintestinalis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/cionasintestinalis-article-title-check/pass.xml"/>
            <x:result href="result-d15491.xml"/>
            <x:test successful="true">
               <x:label>not report cionasintestinalis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cionasintestinalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cionasintestinalis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/cionasintestinalis-article-title-check/fail.xml"/>
            <x:result href="result-d15500.xml"/>
            <x:test successful="true">
               <x:label>report cionasintestinalis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cionasintestinalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escuniculi-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escuniculi-article-title-check/pass.xml"/>
            <x:result href="result-d15509.xml"/>
            <x:test successful="true">
               <x:label>not report escuniculi-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escuniculi-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escuniculi-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escuniculi-article-title-check/fail.xml"/>
            <x:result href="result-d15518.xml"/>
            <x:test successful="true">
               <x:label>report escuniculi-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escuniculi-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>encephalitozoonscuniculi-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/encephalitozoonscuniculi-article-title-check/pass.xml"/>
            <x:result href="result-d15527.xml"/>
            <x:test successful="true">
               <x:label>not report encephalitozoonscuniculi-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'encephalitozoonscuniculi-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>encephalitozoonscuniculi-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/encephalitozoonscuniculi-article-title-check/fail.xml"/>
            <x:result href="result-d15536.xml"/>
            <x:test successful="true">
               <x:label>report encephalitozoonscuniculi-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'encephalitozoonscuniculi-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hssalinarum-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/hssalinarum-article-title-check/pass.xml"/>
            <x:result href="result-d15545.xml"/>
            <x:test successful="true">
               <x:label>not report hssalinarum-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hssalinarum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hssalinarum-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/hssalinarum-article-title-check/fail.xml"/>
            <x:result href="result-d15554.xml"/>
            <x:test successful="true">
               <x:label>report hssalinarum-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hssalinarum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>halobacteriumssalinarum-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/halobacteriumssalinarum-article-title-check/pass.xml"/>
            <x:result href="result-d15563.xml"/>
            <x:test successful="true">
               <x:label>not report halobacteriumssalinarum-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'halobacteriumssalinarum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>halobacteriumssalinarum-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/halobacteriumssalinarum-article-title-check/fail.xml"/>
            <x:result href="result-d15572.xml"/>
            <x:test successful="true">
               <x:label>report halobacteriumssalinarum-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'halobacteriumssalinarum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sssolfataricus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sssolfataricus-article-title-check/pass.xml"/>
            <x:result href="result-d15581.xml"/>
            <x:test successful="true">
               <x:label>not report sssolfataricus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sssolfataricus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sssolfataricus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sssolfataricus-article-title-check/fail.xml"/>
            <x:result href="result-d15590.xml"/>
            <x:test successful="true">
               <x:label>report sssolfataricus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sssolfataricus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sulfolobusssolfataricus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sulfolobusssolfataricus-article-title-check/pass.xml"/>
            <x:result href="result-d15599.xml"/>
            <x:test successful="true">
               <x:label>not report sulfolobusssolfataricus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sulfolobusssolfataricus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sulfolobusssolfataricus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sulfolobusssolfataricus-article-title-check/fail.xml"/>
            <x:result href="result-d15608.xml"/>
            <x:test successful="true">
               <x:label>report sulfolobusssolfataricus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sulfolobusssolfataricus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssmediterranea-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssmediterranea-article-title-check/pass.xml"/>
            <x:result href="result-d15617.xml"/>
            <x:test successful="true">
               <x:label>not report ssmediterranea-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssmediterranea-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssmediterranea-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssmediterranea-article-title-check/fail.xml"/>
            <x:result href="result-d15626.xml"/>
            <x:test successful="true">
               <x:label>report ssmediterranea-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssmediterranea-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schmidteasmediterranea-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/schmidteasmediterranea-article-title-check/pass.xml"/>
            <x:result href="result-d15635.xml"/>
            <x:test successful="true">
               <x:label>not report schmidteasmediterranea-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schmidteasmediterranea-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schmidteasmediterranea-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/schmidteasmediterranea-article-title-check/fail.xml"/>
            <x:result href="result-d15644.xml"/>
            <x:test successful="true">
               <x:label>report schmidteasmediterranea-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schmidteasmediterranea-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssrosetta-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssrosetta-article-title-check/pass.xml"/>
            <x:result href="result-d15653.xml"/>
            <x:test successful="true">
               <x:label>not report ssrosetta-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssrosetta-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssrosetta-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssrosetta-article-title-check/fail.xml"/>
            <x:result href="result-d15662.xml"/>
            <x:test successful="true">
               <x:label>report ssrosetta-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssrosetta-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salpingoecasrosetta-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/salpingoecasrosetta-article-title-check/pass.xml"/>
            <x:result href="result-d15671.xml"/>
            <x:test successful="true">
               <x:label>not report salpingoecasrosetta-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salpingoecasrosetta-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salpingoecasrosetta-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/salpingoecasrosetta-article-title-check/fail.xml"/>
            <x:result href="result-d15680.xml"/>
            <x:test successful="true">
               <x:label>report salpingoecasrosetta-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salpingoecasrosetta-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsvectensis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nsvectensis-article-title-check/pass.xml"/>
            <x:result href="result-d15689.xml"/>
            <x:test successful="true">
               <x:label>not report nsvectensis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsvectensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsvectensis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nsvectensis-article-title-check/fail.xml"/>
            <x:result href="result-d15698.xml"/>
            <x:test successful="true">
               <x:label>report nsvectensis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsvectensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nematostellasvectensis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nematostellasvectensis-article-title-check/pass.xml"/>
            <x:result href="result-d15707.xml"/>
            <x:test successful="true">
               <x:label>not report nematostellasvectensis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nematostellasvectensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nematostellasvectensis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nematostellasvectensis-article-title-check/fail.xml"/>
            <x:result href="result-d15716.xml"/>
            <x:test successful="true">
               <x:label>report nematostellasvectensis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nematostellasvectensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssaureus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssaureus-article-title-check/pass.xml"/>
            <x:result href="result-d15725.xml"/>
            <x:test successful="true">
               <x:label>not report ssaureus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssaureus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssaureus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssaureus-article-title-check/fail.xml"/>
            <x:result href="result-d15734.xml"/>
            <x:test successful="true">
               <x:label>report ssaureus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssaureus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>staphylococcussaureus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/staphylococcussaureus-article-title-check/pass.xml"/>
            <x:result href="result-d15743.xml"/>
            <x:test successful="true">
               <x:label>not report staphylococcussaureus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'staphylococcussaureus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>staphylococcussaureus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/staphylococcussaureus-article-title-check/fail.xml"/>
            <x:result href="result-d15752.xml"/>
            <x:test successful="true">
               <x:label>report staphylococcussaureus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'staphylococcussaureus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vscholerae-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/vscholerae-article-title-check/pass.xml"/>
            <x:result href="result-d15761.xml"/>
            <x:test successful="true">
               <x:label>not report vscholerae-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vscholerae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vscholerae-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/vscholerae-article-title-check/fail.xml"/>
            <x:result href="result-d15770.xml"/>
            <x:test successful="true">
               <x:label>report vscholerae-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vscholerae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vibrioscholerae-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/vibrioscholerae-article-title-check/pass.xml"/>
            <x:result href="result-d15779.xml"/>
            <x:test successful="true">
               <x:label>not report vibrioscholerae-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vibrioscholerae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vibrioscholerae-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/vibrioscholerae-article-title-check/fail.xml"/>
            <x:result href="result-d15788.xml"/>
            <x:test successful="true">
               <x:label>report vibrioscholerae-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vibrioscholerae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tsthermophila-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/tsthermophila-article-title-check/pass.xml"/>
            <x:result href="result-d15797.xml"/>
            <x:test successful="true">
               <x:label>not report tsthermophila-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tsthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tsthermophila-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/tsthermophila-article-title-check/fail.xml"/>
            <x:result href="result-d15806.xml"/>
            <x:test successful="true">
               <x:label>report tsthermophila-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tsthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tetrahymenasthermophila-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/tetrahymenasthermophila-article-title-check/pass.xml"/>
            <x:result href="result-d15815.xml"/>
            <x:test successful="true">
               <x:label>not report tetrahymenasthermophila-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tetrahymenasthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tetrahymenasthermophila-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/tetrahymenasthermophila-article-title-check/fail.xml"/>
            <x:result href="result-d15824.xml"/>
            <x:test successful="true">
               <x:label>report tetrahymenasthermophila-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tetrahymenasthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csreinhardtii-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/csreinhardtii-article-title-check/pass.xml"/>
            <x:result href="result-d15833.xml"/>
            <x:test successful="true">
               <x:label>not report csreinhardtii-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csreinhardtii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csreinhardtii-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/csreinhardtii-article-title-check/fail.xml"/>
            <x:result href="result-d15842.xml"/>
            <x:test successful="true">
               <x:label>report csreinhardtii-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csreinhardtii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydomonassreinhardtii-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/chlamydomonassreinhardtii-article-title-check/pass.xml"/>
            <x:result href="result-d15851.xml"/>
            <x:test successful="true">
               <x:label>not report chlamydomonassreinhardtii-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydomonassreinhardtii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydomonassreinhardtii-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/chlamydomonassreinhardtii-article-title-check/fail.xml"/>
            <x:result href="result-d15860.xml"/>
            <x:test successful="true">
               <x:label>report chlamydomonassreinhardtii-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydomonassreinhardtii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsattenuata-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nsattenuata-article-title-check/pass.xml"/>
            <x:result href="result-d15869.xml"/>
            <x:test successful="true">
               <x:label>not report nsattenuata-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsattenuata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsattenuata-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nsattenuata-article-title-check/fail.xml"/>
            <x:result href="result-d15878.xml"/>
            <x:test successful="true">
               <x:label>report nsattenuata-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsattenuata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nicotianasattenuata-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nicotianasattenuata-article-title-check/pass.xml"/>
            <x:result href="result-d15887.xml"/>
            <x:test successful="true">
               <x:label>not report nicotianasattenuata-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nicotianasattenuata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nicotianasattenuata-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nicotianasattenuata-article-title-check/fail.xml"/>
            <x:result href="result-d15896.xml"/>
            <x:test successful="true">
               <x:label>report nicotianasattenuata-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nicotianasattenuata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escarotovora-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escarotovora-article-title-check/pass.xml"/>
            <x:result href="result-d15905.xml"/>
            <x:test successful="true">
               <x:label>not report escarotovora-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escarotovora-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escarotovora-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escarotovora-article-title-check/fail.xml"/>
            <x:result href="result-d15914.xml"/>
            <x:test successful="true">
               <x:label>report escarotovora-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escarotovora-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>erwiniascarotovora-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/erwiniascarotovora-article-title-check/pass.xml"/>
            <x:result href="result-d15923.xml"/>
            <x:test successful="true">
               <x:label>not report erwiniascarotovora-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'erwiniascarotovora-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>erwiniascarotovora-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/erwiniascarotovora-article-title-check/fail.xml"/>
            <x:result href="result-d15932.xml"/>
            <x:test successful="true">
               <x:label>report erwiniascarotovora-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'erwiniascarotovora-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hsapiens-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/hsapiens-article-title-check/pass.xml"/>
            <x:result href="result-d15941.xml"/>
            <x:test successful="true">
               <x:label>not report hsapiens-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hsapiens-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hsapiens-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/hsapiens-article-title-check/fail.xml"/>
            <x:result href="result-d15950.xml"/>
            <x:test successful="true">
               <x:label>report hsapiens-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hsapiens-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>homosapiens-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/homosapiens-article-title-check/pass.xml"/>
            <x:result href="result-d15959.xml"/>
            <x:test successful="true">
               <x:label>not report homosapiens-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'homosapiens-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>homosapiens-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/homosapiens-article-title-check/fail.xml"/>
            <x:result href="result-d15968.xml"/>
            <x:test successful="true">
               <x:label>report homosapiens-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'homosapiens-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ctrachomatis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ctrachomatis-article-title-check/pass.xml"/>
            <x:result href="result-d15977.xml"/>
            <x:test successful="true">
               <x:label>not report ctrachomatis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ctrachomatis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ctrachomatis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ctrachomatis-article-title-check/fail.xml"/>
            <x:result href="result-d15986.xml"/>
            <x:test successful="true">
               <x:label>report ctrachomatis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ctrachomatis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydiatrachomatis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/chlamydiatrachomatis-article-title-check/pass.xml"/>
            <x:result href="result-d15995.xml"/>
            <x:test successful="true">
               <x:label>not report chlamydiatrachomatis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydiatrachomatis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydiatrachomatis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/chlamydiatrachomatis-article-title-check/fail.xml"/>
            <x:result href="result-d16004.xml"/>
            <x:test successful="true">
               <x:label>report chlamydiatrachomatis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydiatrachomatis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>esfaecalis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/esfaecalis-article-title-check/pass.xml"/>
            <x:result href="result-d16013.xml"/>
            <x:test successful="true">
               <x:label>not report esfaecalis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'esfaecalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>esfaecalis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/esfaecalis-article-title-check/fail.xml"/>
            <x:result href="result-d16022.xml"/>
            <x:test successful="true">
               <x:label>report esfaecalis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'esfaecalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>enterococcussfaecalis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/enterococcussfaecalis-article-title-check/pass.xml"/>
            <x:result href="result-d16031.xml"/>
            <x:test successful="true">
               <x:label>not report enterococcussfaecalis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'enterococcussfaecalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>enterococcussfaecalis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/enterococcussfaecalis-article-title-check/fail.xml"/>
            <x:result href="result-d16040.xml"/>
            <x:test successful="true">
               <x:label>report enterococcussfaecalis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'enterococcussfaecalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xlaevis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xlaevis-article-title-check/pass.xml"/>
            <x:result href="result-d16049.xml"/>
            <x:test successful="true">
               <x:label>not report xlaevis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xlaevis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xlaevis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xlaevis-article-title-check/fail.xml"/>
            <x:result href="result-d16058.xml"/>
            <x:test successful="true">
               <x:label>report xlaevis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xlaevis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopuslaevis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xenopuslaevis-article-title-check/pass.xml"/>
            <x:result href="result-d16067.xml"/>
            <x:test successful="true">
               <x:label>not report xenopuslaevis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopuslaevis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopuslaevis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xenopuslaevis-article-title-check/fail.xml"/>
            <x:result href="result-d16076.xml"/>
            <x:test successful="true">
               <x:label>report xenopuslaevis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopuslaevis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xtropicalis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xtropicalis-article-title-check/pass.xml"/>
            <x:result href="result-d16085.xml"/>
            <x:test successful="true">
               <x:label>not report xtropicalis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xtropicalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xtropicalis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xtropicalis-article-title-check/fail.xml"/>
            <x:result href="result-d16094.xml"/>
            <x:test successful="true">
               <x:label>report xtropicalis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xtropicalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopustropicalis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xenopustropicalis-article-title-check/pass.xml"/>
            <x:result href="result-d16103.xml"/>
            <x:test successful="true">
               <x:label>not report xenopustropicalis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopustropicalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopustropicalis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xenopustropicalis-article-title-check/fail.xml"/>
            <x:result href="result-d16112.xml"/>
            <x:test successful="true">
               <x:label>report xenopustropicalis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopustropicalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>mmusculus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/mmusculus-article-title-check/pass.xml"/>
            <x:result href="result-d16121.xml"/>
            <x:test successful="true">
               <x:label>not report mmusculus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mmusculus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>mmusculus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/mmusculus-article-title-check/fail.xml"/>
            <x:result href="result-d16130.xml"/>
            <x:test successful="true">
               <x:label>report mmusculus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mmusculus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>musmusculus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/musmusculus-article-title-check/pass.xml"/>
            <x:result href="result-d16139.xml"/>
            <x:test successful="true">
               <x:label>not report musmusculus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'musmusculus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>musmusculus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/musmusculus-article-title-check/fail.xml"/>
            <x:result href="result-d16148.xml"/>
            <x:test successful="true">
               <x:label>report musmusculus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'musmusculus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dimmigrans-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dimmigrans-article-title-check/pass.xml"/>
            <x:result href="result-d16157.xml"/>
            <x:test successful="true">
               <x:label>not report dimmigrans-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dimmigrans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dimmigrans-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dimmigrans-article-title-check/fail.xml"/>
            <x:result href="result-d16166.xml"/>
            <x:test successful="true">
               <x:label>report dimmigrans-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dimmigrans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaimmigrans-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilaimmigrans-article-title-check/pass.xml"/>
            <x:result href="result-d16175.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilaimmigrans-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaimmigrans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaimmigrans-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilaimmigrans-article-title-check/fail.xml"/>
            <x:result href="result-d16184.xml"/>
            <x:test successful="true">
               <x:label>report drosophilaimmigrans-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaimmigrans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsubobscura-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dsubobscura-article-title-check/pass.xml"/>
            <x:result href="result-d16193.xml"/>
            <x:test successful="true">
               <x:label>not report dsubobscura-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsubobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsubobscura-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dsubobscura-article-title-check/fail.xml"/>
            <x:result href="result-d16202.xml"/>
            <x:test successful="true">
               <x:label>report dsubobscura-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsubobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasubobscura-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilasubobscura-article-title-check/pass.xml"/>
            <x:result href="result-d16211.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilasubobscura-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasubobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasubobscura-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilasubobscura-article-title-check/fail.xml"/>
            <x:result href="result-d16220.xml"/>
            <x:test successful="true">
               <x:label>report drosophilasubobscura-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasubobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daffinis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/daffinis-article-title-check/pass.xml"/>
            <x:result href="result-d16229.xml"/>
            <x:test successful="true">
               <x:label>not report daffinis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daffinis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daffinis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/daffinis-article-title-check/fail.xml"/>
            <x:result href="result-d16238.xml"/>
            <x:test successful="true">
               <x:label>report daffinis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daffinis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaaffinis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilaaffinis-article-title-check/pass.xml"/>
            <x:result href="result-d16247.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilaaffinis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaaffinis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaaffinis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilaaffinis-article-title-check/fail.xml"/>
            <x:result href="result-d16256.xml"/>
            <x:test successful="true">
               <x:label>report drosophilaaffinis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaaffinis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dobscura-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dobscura-article-title-check/pass.xml"/>
            <x:result href="result-d16265.xml"/>
            <x:test successful="true">
               <x:label>not report dobscura-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dobscura-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dobscura-article-title-check/fail.xml"/>
            <x:result href="result-d16274.xml"/>
            <x:test successful="true">
               <x:label>report dobscura-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaobscura-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilaobscura-article-title-check/pass.xml"/>
            <x:result href="result-d16283.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilaobscura-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaobscura-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilaobscura-article-title-check/fail.xml"/>
            <x:result href="result-d16292.xml"/>
            <x:test successful="true">
               <x:label>report drosophilaobscura-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ftularensis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ftularensis-article-title-check/pass.xml"/>
            <x:result href="result-d16301.xml"/>
            <x:test successful="true">
               <x:label>not report ftularensis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ftularensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ftularensis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ftularensis-article-title-check/fail.xml"/>
            <x:result href="result-d16310.xml"/>
            <x:test successful="true">
               <x:label>report ftularensis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ftularensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>francisellatularensis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/francisellatularensis-article-title-check/pass.xml"/>
            <x:result href="result-d16319.xml"/>
            <x:test successful="true">
               <x:label>not report francisellatularensis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'francisellatularensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>francisellatularensis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/francisellatularensis-article-title-check/fail.xml"/>
            <x:result href="result-d16328.xml"/>
            <x:test successful="true">
               <x:label>report francisellatularensis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'francisellatularensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pplantaginis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/pplantaginis-article-title-check/pass.xml"/>
            <x:result href="result-d16337.xml"/>
            <x:test successful="true">
               <x:label>not report pplantaginis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pplantaginis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pplantaginis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/pplantaginis-article-title-check/fail.xml"/>
            <x:result href="result-d16346.xml"/>
            <x:test successful="true">
               <x:label>report pplantaginis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pplantaginis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>podosphaeraplantaginis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/podosphaeraplantaginis-article-title-check/pass.xml"/>
            <x:result href="result-d16355.xml"/>
            <x:test successful="true">
               <x:label>not report podosphaeraplantaginis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'podosphaeraplantaginis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>podosphaeraplantaginis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/podosphaeraplantaginis-article-title-check/fail.xml"/>
            <x:result href="result-d16364.xml"/>
            <x:test successful="true">
               <x:label>report podosphaeraplantaginis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'podosphaeraplantaginis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>planceolata-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/planceolata-article-title-check/pass.xml"/>
            <x:result href="result-d16373.xml"/>
            <x:test successful="true">
               <x:label>not report planceolata-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'planceolata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>planceolata-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/planceolata-article-title-check/fail.xml"/>
            <x:result href="result-d16382.xml"/>
            <x:test successful="true">
               <x:label>report planceolata-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'planceolata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plantagolanceolata-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/plantagolanceolata-article-title-check/pass.xml"/>
            <x:result href="result-d16391.xml"/>
            <x:test successful="true">
               <x:label>not report plantagolanceolata-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plantagolanceolata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plantagolanceolata-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/plantagolanceolata-article-title-check/fail.xml"/>
            <x:result href="result-d16400.xml"/>
            <x:test successful="true">
               <x:label>report plantagolanceolata-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plantagolanceolata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drerio-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drerio-article-title-check/pass.xml"/>
            <x:result href="result-d16409.xml"/>
            <x:test successful="true">
               <x:label>not report drerio-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drerio-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drerio-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drerio-article-title-check/fail.xml"/>
            <x:result href="result-d16418.xml"/>
            <x:test successful="true">
               <x:label>report drerio-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drerio-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daniorerio-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/daniorerio-article-title-check/pass.xml"/>
            <x:result href="result-d16427.xml"/>
            <x:test successful="true">
               <x:label>not report daniorerio-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daniorerio-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daniorerio-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/daniorerio-article-title-check/fail.xml"/>
            <x:result href="result-d16436.xml"/>
            <x:test successful="true">
               <x:label>report daniorerio-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daniorerio-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophila-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophila-article-title-check/pass.xml"/>
            <x:result href="result-d16445.xml"/>
            <x:test successful="true">
               <x:label>not report drosophila-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophila-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophila-article-title-check/fail.xml"/>
            <x:result href="result-d16454.xml"/>
            <x:test successful="true">
               <x:label>report drosophila-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xenopus-article-title-check/pass.xml"/>
            <x:result href="result-d16463.xml"/>
            <x:test successful="true">
               <x:label>not report xenopus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xenopus-article-title-check/fail.xml"/>
            <x:result href="result-d16472.xml"/>
            <x:test successful="true">
               <x:label>report xenopus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>unallowed-symbol-tests</x:label>
         <x:scenario>
            <x:label>copyright-symbol-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/copyright-symbol/pass.xml"/>
            <x:result href="result-d16481.xml"/>
            <x:test successful="true">
               <x:label>not report copyright-symbol error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'copyright-symbol'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>copyright-symbol-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/copyright-symbol/fail.xml"/>
            <x:result href="result-d16490.xml"/>
            <x:test successful="true">
               <x:label>report copyright-symbol error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'copyright-symbol'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>trademark-symbol-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/trademark-symbol/pass.xml"/>
            <x:result href="result-d16499.xml"/>
            <x:test successful="true">
               <x:label>not report trademark-symbol error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'trademark-symbol'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>trademark-symbol-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/trademark-symbol/fail.xml"/>
            <x:result href="result-d16508.xml"/>
            <x:test successful="true">
               <x:label>report trademark-symbol error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'trademark-symbol'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reg-trademark-symbol-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/reg-trademark-symbol/pass.xml"/>
            <x:result href="result-d16517.xml"/>
            <x:test successful="true">
               <x:label>not report reg-trademark-symbol error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reg-trademark-symbol'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reg-trademark-symbol-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/reg-trademark-symbol/fail.xml"/>
            <x:result href="result-d16526.xml"/>
            <x:test successful="true">
               <x:label>report reg-trademark-symbol error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reg-trademark-symbol'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>Inc-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/Inc-presence/pass.xml"/>
            <x:result href="result-d16535.xml"/>
            <x:test successful="true">
               <x:label>not report Inc-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'Inc-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>Inc-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/Inc-presence/fail.xml"/>
            <x:result href="result-d16544.xml"/>
            <x:test successful="true">
               <x:label>report Inc-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'Inc-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>andand-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/andand-presence/pass.xml"/>
            <x:result href="result-d16553.xml"/>
            <x:test successful="true">
               <x:label>not report andand-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'andand-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>andand-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/andand-presence/fail.xml"/>
            <x:result href="result-d16562.xml"/>
            <x:test successful="true">
               <x:label>report andand-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'andand-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>figurefigure-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/figurefigure-presence/pass.xml"/>
            <x:result href="result-d16571.xml"/>
            <x:test successful="true">
               <x:label>not report figurefigure-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'figurefigure-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>figurefigure-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/figurefigure-presence/fail.xml"/>
            <x:result href="result-d16580.xml"/>
            <x:test successful="true">
               <x:label>report figurefigure-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'figurefigure-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementalfigure-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/supplementalfigure-presence/pass.xml"/>
            <x:result href="result-d16589.xml"/>
            <x:test successful="true">
               <x:label>not report supplementalfigure-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementalfigure-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementalfigure-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/supplementalfigure-presence/fail.xml"/>
            <x:result href="result-d16598.xml"/>
            <x:test successful="true">
               <x:label>report supplementalfigure-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementalfigure-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementalfile-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/supplementalfile-presence/pass.xml"/>
            <x:result href="result-d16607.xml"/>
            <x:test successful="true">
               <x:label>not report supplementalfile-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementalfile-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementalfile-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/supplementalfile-presence/fail.xml"/>
            <x:result href="result-d16616.xml"/>
            <x:test successful="true">
               <x:label>report supplementalfile-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementalfile-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/ref-presence/pass.xml"/>
            <x:result href="result-d16625.xml"/>
            <x:test successful="true">
               <x:label>not report ref-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/ref-presence/fail.xml"/>
            <x:result href="result-d16634.xml"/>
            <x:test successful="true">
               <x:label>report ref-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>refs-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/refs-presence/pass.xml"/>
            <x:result href="result-d16643.xml"/>
            <x:test successful="true">
               <x:label>not report refs-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'refs-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>refs-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/refs-presence/fail.xml"/>
            <x:result href="result-d16652.xml"/>
            <x:test successful="true">
               <x:label>report refs-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'refs-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/replacement-character-presence/pass.xml"/>
            <x:result href="result-d16661.xml"/>
            <x:test successful="true">
               <x:label>not report replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/replacement-character-presence/fail.xml"/>
            <x:result href="result-d16670.xml"/>
            <x:test successful="true">
               <x:label>report replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>junk-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/junk-character-presence/pass.xml"/>
            <x:result href="result-d16679.xml"/>
            <x:test successful="true">
               <x:label>not report junk-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'junk-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>junk-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/junk-character-presence/fail.xml"/>
            <x:result href="result-d16688.xml"/>
            <x:test successful="true">
               <x:label>report junk-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'junk-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>unallowed-symbol-tests-sup</x:label>
         <x:scenario>
            <x:label>copyright-symbol-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/copyright-symbol-sup/pass.xml"/>
            <x:result href="result-d16697.xml"/>
            <x:test successful="true">
               <x:label>not report copyright-symbol-sup error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'copyright-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>copyright-symbol-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/copyright-symbol-sup/fail.xml"/>
            <x:result href="result-d16706.xml"/>
            <x:test successful="true">
               <x:label>report copyright-symbol-sup error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'copyright-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>trademark-symbol-1-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/trademark-symbol-1-sup/pass.xml"/>
            <x:result href="result-d16715.xml"/>
            <x:test successful="true">
               <x:label>not report trademark-symbol-1-sup error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'trademark-symbol-1-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>trademark-symbol-1-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/trademark-symbol-1-sup/fail.xml"/>
            <x:result href="result-d16724.xml"/>
            <x:test successful="true">
               <x:label>report trademark-symbol-1-sup error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'trademark-symbol-1-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>trademark-symbol-2-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/trademark-symbol-2-sup/pass.xml"/>
            <x:result href="result-d16733.xml"/>
            <x:test successful="true">
               <x:label>not report trademark-symbol-2-sup warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'trademark-symbol-2-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>trademark-symbol-2-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/trademark-symbol-2-sup/fail.xml"/>
            <x:result href="result-d16742.xml"/>
            <x:test successful="true">
               <x:label>report trademark-symbol-2-sup warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'trademark-symbol-2-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reg-trademark-symbol-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/reg-trademark-symbol-sup/pass.xml"/>
            <x:result href="result-d16751.xml"/>
            <x:test successful="true">
               <x:label>not report reg-trademark-symbol-sup error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reg-trademark-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reg-trademark-symbol-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/reg-trademark-symbol-sup/fail.xml"/>
            <x:result href="result-d16760.xml"/>
            <x:test successful="true">
               <x:label>report reg-trademark-symbol-sup error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reg-trademark-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>degree-symbol-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/degree-symbol-sup/pass.xml"/>
            <x:result href="result-d16769.xml"/>
            <x:test successful="true">
               <x:label>not report degree-symbol-sup error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'degree-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>degree-symbol-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/degree-symbol-sup/fail.xml"/>
            <x:result href="result-d16778.xml"/>
            <x:test successful="true">
               <x:label>report degree-symbol-sup error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'degree-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>white-circle-symbol-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/white-circle-symbol-sup/pass.xml"/>
            <x:result href="result-d16787.xml"/>
            <x:test successful="true">
               <x:label>not report white-circle-symbol-sup warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'white-circle-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>white-circle-symbol-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/white-circle-symbol-sup/fail.xml"/>
            <x:result href="result-d16796.xml"/>
            <x:test successful="true">
               <x:label>report white-circle-symbol-sup warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'white-circle-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ring-op-symbol-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/ring-op-symbol-sup/pass.xml"/>
            <x:result href="result-d16805.xml"/>
            <x:test successful="true">
               <x:label>not report ring-op-symbol-sup warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ring-op-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ring-op-symbol-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/ring-op-symbol-sup/fail.xml"/>
            <x:result href="result-d16814.xml"/>
            <x:test successful="true">
               <x:label>report ring-op-symbol-sup warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ring-op-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ring-diacritic-symbol-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/ring-diacritic-symbol-sup/pass.xml"/>
            <x:result href="result-d16823.xml"/>
            <x:test successful="true">
               <x:label>not report ring-diacritic-symbol-sup warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ring-diacritic-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ring-diacritic-symbol-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/ring-diacritic-symbol-sup/fail.xml"/>
            <x:result href="result-d16832.xml"/>
            <x:test successful="true">
               <x:label>report ring-diacritic-symbol-sup warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ring-diacritic-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>country-tests</x:label>
         <x:scenario>
            <x:label>united-states-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/united-states-test-1/pass.xml"/>
            <x:result href="result-d16841.xml"/>
            <x:test successful="true">
               <x:label>not report united-states-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'united-states-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>united-states-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/united-states-test-1/fail.xml"/>
            <x:result href="result-d16850.xml"/>
            <x:test successful="true">
               <x:label>report united-states-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'united-states-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>united-states-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/united-states-test-2/pass.xml"/>
            <x:result href="result-d16859.xml"/>
            <x:test successful="true">
               <x:label>not report united-states-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'united-states-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>united-states-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/united-states-test-2/fail.xml"/>
            <x:result href="result-d16868.xml"/>
            <x:test successful="true">
               <x:label>report united-states-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'united-states-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>united-kingdom-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/united-kingdom-test-2/pass.xml"/>
            <x:result href="result-d16877.xml"/>
            <x:test successful="true">
               <x:label>not report united-kingdom-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'united-kingdom-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>united-kingdom-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/united-kingdom-test-2/fail.xml"/>
            <x:result href="result-d16886.xml"/>
            <x:test successful="true">
               <x:label>report united-kingdom-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'united-kingdom-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>gen-country-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/gen-country-test/pass.xml"/>
            <x:result href="result-d16895.xml"/>
            <x:test successful="true">
               <x:label>not assert gen-country-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'gen-country-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>gen-country-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/gen-country-test/fail.xml"/>
            <x:result href="result-d16904.xml"/>
            <x:test successful="true">
               <x:label>assert gen-country-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'gen-country-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>singapore-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/singapore-test-1/pass.xml"/>
            <x:result href="result-d16913.xml"/>
            <x:test successful="true">
               <x:label>not report singapore-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'singapore-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>singapore-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/singapore-test-1/fail.xml"/>
            <x:result href="result-d16922.xml"/>
            <x:test successful="true">
               <x:label>report singapore-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'singapore-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>city-tests</x:label>
         <x:scenario>
            <x:label>pre-US-states-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/pre-US-states-test/pass.xml"/>
            <x:result href="result-d16931.xml"/>
            <x:test successful="true">
               <x:label>not report pre-US-states-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-US-states-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-US-states-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/pre-US-states-test/fail.xml"/>
            <x:result href="result-d16940.xml"/>
            <x:test successful="true">
               <x:label>report pre-US-states-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-US-states-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-US-states-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/final-US-states-test/pass.xml"/>
            <x:result href="result-d16949.xml"/>
            <x:test successful="true">
               <x:label>not report final-US-states-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-US-states-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-US-states-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/final-US-states-test/fail.xml"/>
            <x:result href="result-d16958.xml"/>
            <x:test successful="true">
               <x:label>report final-US-states-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-US-states-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>singapore-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/singapore-test-2/pass.xml"/>
            <x:result href="result-d16967.xml"/>
            <x:test successful="true">
               <x:label>not report singapore-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'singapore-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>singapore-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/singapore-test-2/fail.xml"/>
            <x:result href="result-d16976.xml"/>
            <x:test successful="true">
               <x:label>report singapore-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'singapore-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>city-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/city-replacement-character-presence/pass.xml"/>
            <x:result href="result-d16985.xml"/>
            <x:test successful="true">
               <x:label>not report city-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>city-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/city-replacement-character-presence/fail.xml"/>
            <x:result href="result-d16994.xml"/>
            <x:test successful="true">
               <x:label>report city-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>institution-tests</x:label>
         <x:scenario>
            <x:label>UC-no-test1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/institution-tests/UC-no-test1/pass.xml"/>
            <x:result href="result-d17003.xml"/>
            <x:test successful="true">
               <x:label>not report UC-no-test1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'UC-no-test1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert institution-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>UC-no-test1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/institution-tests/UC-no-test1/fail.xml"/>
            <x:result href="result-d17012.xml"/>
            <x:test successful="true">
               <x:label>report UC-no-test1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'UC-no-test1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert institution-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>institution-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/institution-tests/institution-replacement-character-presence/pass.xml"/>
            <x:result href="result-d17021.xml"/>
            <x:test successful="true">
               <x:label>not report institution-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert institution-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>institution-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/institution-tests/institution-replacement-character-presence/fail.xml"/>
            <x:result href="result-d17030.xml"/>
            <x:test successful="true">
               <x:label>report institution-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert institution-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>department-tests</x:label>
         <x:scenario>
            <x:label>plural-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-1/pass.xml"/>
            <x:result href="result-d17039.xml"/>
            <x:test successful="true">
               <x:label>not report plural-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-1/fail.xml"/>
            <x:result href="result-d17048.xml"/>
            <x:test successful="true">
               <x:label>report plural-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-2/pass.xml"/>
            <x:result href="result-d17057.xml"/>
            <x:test successful="true">
               <x:label>not report plural-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-2/fail.xml"/>
            <x:result href="result-d17066.xml"/>
            <x:test successful="true">
               <x:label>report plural-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-3/pass.xml"/>
            <x:result href="result-d17075.xml"/>
            <x:test successful="true">
               <x:label>not report plural-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-3/fail.xml"/>
            <x:result href="result-d17084.xml"/>
            <x:test successful="true">
               <x:label>report plural-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-4/pass.xml"/>
            <x:result href="result-d17093.xml"/>
            <x:test successful="true">
               <x:label>not report plural-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-4/fail.xml"/>
            <x:result href="result-d17102.xml"/>
            <x:test successful="true">
               <x:label>report plural-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dept-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/dept-replacement-character-presence/pass.xml"/>
            <x:result href="result-d17111.xml"/>
            <x:test successful="true">
               <x:label>not report dept-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dept-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dept-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/dept-replacement-character-presence/fail.xml"/>
            <x:result href="result-d17120.xml"/>
            <x:test successful="true">
               <x:label>report dept-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dept-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>journal-title-tests</x:label>
         <x:scenario>
            <x:label>PLOS-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/PLOS-1/pass.xml"/>
            <x:result href="result-d17129.xml"/>
            <x:test successful="true">
               <x:label>not report PLOS-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PLOS-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PLOS-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/PLOS-1/fail.xml"/>
            <x:result href="result-d17138.xml"/>
            <x:test successful="true">
               <x:label>report PLOS-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PLOS-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PLOS-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/PLOS-2/pass.xml"/>
            <x:result href="result-d17147.xml"/>
            <x:test successful="true">
               <x:label>not report PLOS-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PLOS-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PLOS-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/PLOS-2/fail.xml"/>
            <x:result href="result-d17156.xml"/>
            <x:test successful="true">
               <x:label>report PLOS-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PLOS-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PNAS-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/PNAS/pass.xml"/>
            <x:result href="result-d17165.xml"/>
            <x:test successful="true">
               <x:label>not report PNAS error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PNAS'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PNAS-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/PNAS/fail.xml"/>
            <x:result href="result-d17174.xml"/>
            <x:test successful="true">
               <x:label>report PNAS error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PNAS'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>RNA-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/RNA/pass.xml"/>
            <x:result href="result-d17183.xml"/>
            <x:test successful="true">
               <x:label>not report RNA error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'RNA'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>RNA-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/RNA/fail.xml"/>
            <x:result href="result-d17192.xml"/>
            <x:test successful="true">
               <x:label>report RNA error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'RNA'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bmj-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/bmj/pass.xml"/>
            <x:result href="result-d17201.xml"/>
            <x:test successful="true">
               <x:label>not report bmj error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bmj'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bmj-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/bmj/fail.xml"/>
            <x:result href="result-d17210.xml"/>
            <x:test successful="true">
               <x:label>report bmj error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bmj'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>G3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/G3/pass.xml"/>
            <x:result href="result-d17219.xml"/>
            <x:test successful="true">
               <x:label>not report G3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'G3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>G3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/G3/fail.xml"/>
            <x:result href="result-d17228.xml"/>
            <x:test successful="true">
               <x:label>report G3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'G3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ampersand-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/ampersand-check/pass.xml"/>
            <x:result href="result-d17237.xml"/>
            <x:test successful="true">
               <x:label>not report ampersand-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ampersand-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ampersand-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/ampersand-check/fail.xml"/>
            <x:result href="result-d17246.xml"/>
            <x:test successful="true">
               <x:label>report ampersand-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ampersand-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>Research-gate-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/Research-gate-check/pass.xml"/>
            <x:result href="result-d17255.xml"/>
            <x:test successful="true">
               <x:label>not report Research-gate-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'Research-gate-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>Research-gate-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/Research-gate-check/fail.xml"/>
            <x:result href="result-d17264.xml"/>
            <x:test successful="true">
               <x:label>report Research-gate-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'Research-gate-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>journal-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/journal-replacement-character-presence/pass.xml"/>
            <x:result href="result-d17273.xml"/>
            <x:test successful="true">
               <x:label>not report journal-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>journal-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/journal-replacement-character-presence/fail.xml"/>
            <x:result href="result-d17282.xml"/>
            <x:test successful="true">
               <x:label>report journal-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>journal-off-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/journal-off-presence/pass.xml"/>
            <x:result href="result-d17291.xml"/>
            <x:test successful="true">
               <x:label>not report journal-off-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-off-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>journal-off-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/journal-off-presence/fail.xml"/>
            <x:result href="result-d17300.xml"/>
            <x:test successful="true">
               <x:label>report journal-off-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-off-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref-article-title-tests</x:label>
         <x:scenario>
            <x:label>article-title-fullstop-check-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-fullstop-check-1/pass.xml"/>
            <x:result href="result-d17309.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-fullstop-check-1 info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-fullstop-check-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-fullstop-check-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-fullstop-check-1/fail.xml"/>
            <x:result href="result-d17318.xml"/>
            <x:test successful="true">
               <x:label>report article-title-fullstop-check-1 info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-fullstop-check-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-fullstop-check-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-fullstop-check-2/pass.xml"/>
            <x:result href="result-d17327.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-fullstop-check-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-fullstop-check-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-fullstop-check-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-fullstop-check-2/fail.xml"/>
            <x:result href="result-d17336.xml"/>
            <x:test successful="true">
               <x:label>report article-title-fullstop-check-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-fullstop-check-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-fullstop-check-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-fullstop-check-3/pass.xml"/>
            <x:result href="result-d17345.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-fullstop-check-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-fullstop-check-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-fullstop-check-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-fullstop-check-3/fail.xml"/>
            <x:result href="result-d17354.xml"/>
            <x:test successful="true">
               <x:label>report article-title-fullstop-check-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-fullstop-check-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-correction-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-correction-check/pass.xml"/>
            <x:result href="result-d17363.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-correction-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-correction-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-correction-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-correction-check/fail.xml"/>
            <x:result href="result-d17372.xml"/>
            <x:test successful="true">
               <x:label>report article-title-correction-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-correction-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-journal-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-journal-check/pass.xml"/>
            <x:result href="result-d17381.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-journal-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-journal-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-journal-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-journal-check/fail.xml"/>
            <x:result href="result-d17390.xml"/>
            <x:test successful="true">
               <x:label>report article-title-journal-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-journal-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-child-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-child-1/pass.xml"/>
            <x:result href="result-d17399.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-child-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-child-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-child-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-child-1/fail.xml"/>
            <x:result href="result-d17408.xml"/>
            <x:test successful="true">
               <x:label>report article-title-child-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-child-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>a-title-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/a-title-replacement-character-presence/pass.xml"/>
            <x:result href="result-d17417.xml"/>
            <x:test successful="true">
               <x:label>not report a-title-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'a-title-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>a-title-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/a-title-replacement-character-presence/fail.xml"/>
            <x:result href="result-d17426.xml"/>
            <x:test successful="true">
               <x:label>report a-title-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'a-title-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>journal-tests</x:label>
         <x:scenario>
            <x:label>eloc-page-assert-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-tests/eloc-page-assert/pass.xml"/>
            <x:result href="result-d17435.xml"/>
            <x:test successful="true">
               <x:label>not report eloc-page-assert warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'eloc-page-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>eloc-page-assert-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-tests/eloc-page-assert/fail.xml"/>
            <x:result href="result-d17444.xml"/>
            <x:test successful="true">
               <x:label>report eloc-page-assert warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'eloc-page-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>journal-preprint-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-tests/journal-preprint-check/pass.xml"/>
            <x:result href="result-d17453.xml"/>
            <x:test successful="true">
               <x:label>not report journal-preprint-check error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-preprint-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>journal-preprint-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-tests/journal-preprint-check/fail.xml"/>
            <x:result href="result-d17462.xml"/>
            <x:test successful="true">
               <x:label>report journal-preprint-check error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-preprint-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>preprint-title-tests</x:label>
         <x:scenario>
            <x:label>not-rxiv-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/not-rxiv-test/pass.xml"/>
            <x:result href="result-d17471.xml"/>
            <x:test successful="true">
               <x:label>not report not-rxiv-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'not-rxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>not-rxiv-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/not-rxiv-test/fail.xml"/>
            <x:result href="result-d17480.xml"/>
            <x:test successful="true">
               <x:label>report not-rxiv-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'not-rxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>biorxiv-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/biorxiv-test/pass.xml"/>
            <x:result href="result-d17489.xml"/>
            <x:test successful="true">
               <x:label>not report biorxiv-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'biorxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>biorxiv-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/biorxiv-test/fail.xml"/>
            <x:result href="result-d17498.xml"/>
            <x:test successful="true">
               <x:label>report biorxiv-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'biorxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arxiv-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/arxiv-test/pass.xml"/>
            <x:result href="result-d17507.xml"/>
            <x:test successful="true">
               <x:label>not report arxiv-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arxiv-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/arxiv-test/fail.xml"/>
            <x:result href="result-d17516.xml"/>
            <x:test successful="true">
               <x:label>report arxiv-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chemrxiv-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/chemrxiv-test/pass.xml"/>
            <x:result href="result-d17525.xml"/>
            <x:test successful="true">
               <x:label>not report chemrxiv-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chemrxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chemrxiv-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/chemrxiv-test/fail.xml"/>
            <x:result href="result-d17534.xml"/>
            <x:test successful="true">
               <x:label>report chemrxiv-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chemrxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>peerjpreprints-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/peerjpreprints-test/pass.xml"/>
            <x:result href="result-d17543.xml"/>
            <x:test successful="true">
               <x:label>not report peerjpreprints-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'peerjpreprints-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>peerjpreprints-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/peerjpreprints-test/fail.xml"/>
            <x:result href="result-d17552.xml"/>
            <x:test successful="true">
               <x:label>report peerjpreprints-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'peerjpreprints-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psyarxiv-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/psyarxiv-test/pass.xml"/>
            <x:result href="result-d17561.xml"/>
            <x:test successful="true">
               <x:label>not report psyarxiv-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psyarxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psyarxiv-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/psyarxiv-test/fail.xml"/>
            <x:result href="result-d17570.xml"/>
            <x:test successful="true">
               <x:label>report psyarxiv-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psyarxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>paleorxiv-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/paleorxiv-test/pass.xml"/>
            <x:result href="result-d17579.xml"/>
            <x:test successful="true">
               <x:label>not report paleorxiv-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'paleorxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>paleorxiv-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/paleorxiv-test/fail.xml"/>
            <x:result href="result-d17588.xml"/>
            <x:test successful="true">
               <x:label>report paleorxiv-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'paleorxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>preprint-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/preprint-replacement-character-presence/pass.xml"/>
            <x:result href="result-d17597.xml"/>
            <x:test successful="true">
               <x:label>not report preprint-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>preprint-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/preprint-replacement-character-presence/fail.xml"/>
            <x:result href="result-d17606.xml"/>
            <x:test successful="true">
               <x:label>report preprint-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>website-tests</x:label>
         <x:scenario>
            <x:label>github-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/github-web-test/pass.xml"/>
            <x:result href="result-d17615.xml"/>
            <x:test successful="true">
               <x:label>not report github-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'github-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>github-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/github-web-test/fail.xml"/>
            <x:result href="result-d17624.xml"/>
            <x:test successful="true">
               <x:label>report github-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'github-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>webreplacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/webreplacement-character-presence/pass.xml"/>
            <x:result href="result-d17633.xml"/>
            <x:test successful="true">
               <x:label>not report webreplacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'webreplacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>webreplacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/webreplacement-character-presence/fail.xml"/>
            <x:result href="result-d17642.xml"/>
            <x:test successful="true">
               <x:label>report webreplacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'webreplacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psyarxiv-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/psyarxiv-web-test/pass.xml"/>
            <x:result href="result-d17651.xml"/>
            <x:test successful="true">
               <x:label>not report psyarxiv-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psyarxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psyarxiv-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/psyarxiv-web-test/fail.xml"/>
            <x:result href="result-d17660.xml"/>
            <x:test successful="true">
               <x:label>report psyarxiv-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psyarxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arxiv-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/arxiv-web-test/pass.xml"/>
            <x:result href="result-d17669.xml"/>
            <x:test successful="true">
               <x:label>not report arxiv-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arxiv-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/arxiv-web-test/fail.xml"/>
            <x:result href="result-d17678.xml"/>
            <x:test successful="true">
               <x:label>report arxiv-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>biorxiv-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/biorxiv-web-test/pass.xml"/>
            <x:result href="result-d17687.xml"/>
            <x:test successful="true">
               <x:label>not report biorxiv-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'biorxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>biorxiv-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/biorxiv-web-test/fail.xml"/>
            <x:result href="result-d17696.xml"/>
            <x:test successful="true">
               <x:label>report biorxiv-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'biorxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chemrxiv-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/chemrxiv-web-test/pass.xml"/>
            <x:result href="result-d17705.xml"/>
            <x:test successful="true">
               <x:label>not report chemrxiv-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chemrxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chemrxiv-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/chemrxiv-web-test/fail.xml"/>
            <x:result href="result-d17714.xml"/>
            <x:test successful="true">
               <x:label>report chemrxiv-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chemrxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>peerj-preprints-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/peerj-preprints-web-test/pass.xml"/>
            <x:result href="result-d17723.xml"/>
            <x:test successful="true">
               <x:label>not report peerj-preprints-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'peerj-preprints-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>peerj-preprints-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/peerj-preprints-web-test/fail.xml"/>
            <x:result href="result-d17732.xml"/>
            <x:test successful="true">
               <x:label>report peerj-preprints-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'peerj-preprints-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>paleorxiv-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/paleorxiv-web-test/pass.xml"/>
            <x:result href="result-d17741.xml"/>
            <x:test successful="true">
               <x:label>not report paleorxiv-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'paleorxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>paleorxiv-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/paleorxiv-web-test/fail.xml"/>
            <x:result href="result-d17750.xml"/>
            <x:test successful="true">
               <x:label>report paleorxiv-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'paleorxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>software-ref-tests</x:label>
         <x:scenario>
            <x:label>R-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-1/pass.xml"/>
            <x:result href="result-d17759.xml"/>
            <x:test successful="true">
               <x:label>not report R-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-1/fail.xml"/>
            <x:result href="result-d17768.xml"/>
            <x:test successful="true">
               <x:label>report R-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-2/pass.xml"/>
            <x:result href="result-d17777.xml"/>
            <x:test successful="true">
               <x:label>not report R-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-2/fail.xml"/>
            <x:result href="result-d17786.xml"/>
            <x:test successful="true">
               <x:label>report R-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-3/pass.xml"/>
            <x:result href="result-d17795.xml"/>
            <x:test successful="true">
               <x:label>not report R-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-3/fail.xml"/>
            <x:result href="result-d17804.xml"/>
            <x:test successful="true">
               <x:label>report R-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-4/pass.xml"/>
            <x:result href="result-d17813.xml"/>
            <x:test successful="true">
               <x:label>not report R-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-4/fail.xml"/>
            <x:result href="result-d17822.xml"/>
            <x:test successful="true">
               <x:label>report R-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-5/pass.xml"/>
            <x:result href="result-d17831.xml"/>
            <x:test successful="true">
               <x:label>not report R-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-5/fail.xml"/>
            <x:result href="result-d17840.xml"/>
            <x:test successful="true">
               <x:label>report R-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>software-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/software-replacement-character-presence/pass.xml"/>
            <x:result href="result-d17849.xml"/>
            <x:test successful="true">
               <x:label>not report software-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>software-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/software-replacement-character-presence/fail.xml"/>
            <x:result href="result-d17858.xml"/>
            <x:test successful="true">
               <x:label>report software-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>publisher-name-tests</x:label>
         <x:scenario>
            <x:label>publisher-name-colon-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/publisher-name-tests/publisher-name-colon/pass.xml"/>
            <x:result href="result-d17867.xml"/>
            <x:test successful="true">
               <x:label>not report publisher-name-colon warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-colon'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert publisher-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>publisher-name-colon-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/publisher-name-tests/publisher-name-colon/fail.xml"/>
            <x:result href="result-d17876.xml"/>
            <x:test successful="true">
               <x:label>report publisher-name-colon warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-colon'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert publisher-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>publisher-name-inc-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/publisher-name-tests/publisher-name-inc/pass.xml"/>
            <x:result href="result-d17885.xml"/>
            <x:test successful="true">
               <x:label>not report publisher-name-inc warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-inc'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert publisher-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>publisher-name-inc-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/publisher-name-tests/publisher-name-inc/fail.xml"/>
            <x:result href="result-d17894.xml"/>
            <x:test successful="true">
               <x:label>report publisher-name-inc warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-inc'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert publisher-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-name-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/publisher-name-tests/pub-name-replacement-character-presence/pass.xml"/>
            <x:result href="result-d17903.xml"/>
            <x:test successful="true">
               <x:label>not report pub-name-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-name-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert publisher-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-name-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/publisher-name-tests/pub-name-replacement-character-presence/fail.xml"/>
            <x:result href="result-d17912.xml"/>
            <x:test successful="true">
               <x:label>report pub-name-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-name-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert publisher-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref-name-tests</x:label>
         <x:scenario>
            <x:label>author-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/author-test-1/pass.xml"/>
            <x:result href="result-d17921.xml"/>
            <x:test successful="true">
               <x:label>not report author-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/author-test-1/fail.xml"/>
            <x:result href="result-d17930.xml"/>
            <x:test successful="true">
               <x:label>report author-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/author-test-2/pass.xml"/>
            <x:result href="result-d17939.xml"/>
            <x:test successful="true">
               <x:label>not report author-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/author-test-2/fail.xml"/>
            <x:result href="result-d17948.xml"/>
            <x:test successful="true">
               <x:label>report author-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/author-test-3/pass.xml"/>
            <x:result href="result-d17957.xml"/>
            <x:test successful="true">
               <x:label>not report author-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/author-test-3/fail.xml"/>
            <x:result href="result-d17966.xml"/>
            <x:test successful="true">
               <x:label>report author-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>all-caps-surname-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/all-caps-surname/pass.xml"/>
            <x:result href="result-d17975.xml"/>
            <x:test successful="true">
               <x:label>not report all-caps-surname warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'all-caps-surname'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>all-caps-surname-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/all-caps-surname/fail.xml"/>
            <x:result href="result-d17984.xml"/>
            <x:test successful="true">
               <x:label>report all-caps-surname warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'all-caps-surname'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-number-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/surname-number-check/pass.xml"/>
            <x:result href="result-d17993.xml"/>
            <x:test successful="true">
               <x:label>not report surname-number-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-number-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-number-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/surname-number-check/fail.xml"/>
            <x:result href="result-d18002.xml"/>
            <x:test successful="true">
               <x:label>report surname-number-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-number-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>isbn-conformity</x:label>
         <x:scenario>
            <x:label>isbn-conformity-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/isbn-conformity/isbn-conformity-test/pass.xml"/>
            <x:result href="result-d18011.xml"/>
            <x:test successful="true">
               <x:label>not assert isbn-conformity-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert isbn-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>isbn-conformity-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/isbn-conformity/isbn-conformity-test/fail.xml"/>
            <x:result href="result-d18020.xml"/>
            <x:test successful="true">
               <x:label>assert isbn-conformity-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert isbn-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>isbn-conformity-2</x:label>
         <x:scenario>
            <x:label>isbn-conformity-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/isbn-conformity-2/isbn-conformity-test-2/pass.xml"/>
            <x:result href="result-d18029.xml"/>
            <x:test successful="true">
               <x:label>not assert isbn-conformity-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert isbn-conformity-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>isbn-conformity-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/isbn-conformity-2/isbn-conformity-test-2/fail.xml"/>
            <x:result href="result-d18038.xml"/>
            <x:test successful="true">
               <x:label>assert isbn-conformity-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert isbn-conformity-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>data-availability-statement</x:label>
         <x:scenario>
            <x:label>das-sentence-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-sentence-conformity/pass.xml"/>
            <x:result href="result-d18047.xml"/>
            <x:test successful="true">
               <x:label>not assert das-sentence-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-sentence-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-sentence-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-sentence-conformity/fail.xml"/>
            <x:result href="result-d18056.xml"/>
            <x:test successful="true">
               <x:label>assert das-sentence-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-sentence-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-dryad-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-dryad-conformity/pass.xml"/>
            <x:result href="result-d18065.xml"/>
            <x:test successful="true">
               <x:label>not report das-dryad-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-dryad-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-dryad-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-dryad-conformity/fail.xml"/>
            <x:result href="result-d18074.xml"/>
            <x:test successful="true">
               <x:label>report das-dryad-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-dryad-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-supplemental-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-supplemental-conformity/pass.xml"/>
            <x:result href="result-d18083.xml"/>
            <x:test successful="true">
               <x:label>not report das-supplemental-conformity warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-supplemental-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-supplemental-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-supplemental-conformity/fail.xml"/>
            <x:result href="result-d18092.xml"/>
            <x:test successful="true">
               <x:label>report das-supplemental-conformity warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-supplemental-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-request-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-request-conformity-1/pass.xml"/>
            <x:result href="result-d18101.xml"/>
            <x:test successful="true">
               <x:label>not report das-request-conformity-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-request-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-request-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-request-conformity-1/fail.xml"/>
            <x:result href="result-d18110.xml"/>
            <x:test successful="true">
               <x:label>report das-request-conformity-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-request-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-doi-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-doi-conformity-1/pass.xml"/>
            <x:result href="result-d18119.xml"/>
            <x:test successful="true">
               <x:label>not report das-doi-conformity-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-doi-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-doi-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-doi-conformity-1/fail.xml"/>
            <x:result href="result-d18128.xml"/>
            <x:test successful="true">
               <x:label>report das-doi-conformity-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-doi-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ethics-info</x:label>
         <x:scenario>
            <x:label>ethics-info-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-info/ethics-info-conformity/pass.xml"/>
            <x:result href="result-d18137.xml"/>
            <x:test successful="true">
               <x:label>not assert ethics-info-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-info-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-info-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-info/ethics-info-conformity/fail.xml"/>
            <x:result href="result-d18146.xml"/>
            <x:test successful="true">
               <x:label>assert ethics-info-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-info-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-info-supplemental-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-info/ethics-info-supplemental-conformity/pass.xml"/>
            <x:result href="result-d18155.xml"/>
            <x:test successful="true">
               <x:label>not report ethics-info-supplemental-conformity warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-supplemental-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-info-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-info-supplemental-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-info/ethics-info-supplemental-conformity/fail.xml"/>
            <x:result href="result-d18164.xml"/>
            <x:test successful="true">
               <x:label>report ethics-info-supplemental-conformity warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-supplemental-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-info-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>sec-title-conformity</x:label>
         <x:scenario>
            <x:label>sec-title-list-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-list-check/pass.xml"/>
            <x:result href="result-d18173.xml"/>
            <x:test successful="true">
               <x:label>not report sec-title-list-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-list-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-title-list-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-list-check/fail.xml"/>
            <x:result href="result-d18182.xml"/>
            <x:test successful="true">
               <x:label>report sec-title-list-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-list-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-title-appendix-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-appendix-check/pass.xml"/>
            <x:result href="result-d18191.xml"/>
            <x:test successful="true">
               <x:label>not report sec-title-appendix-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-appendix-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-title-appendix-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-appendix-check/fail.xml"/>
            <x:result href="result-d18200.xml"/>
            <x:test successful="true">
               <x:label>report sec-title-appendix-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-appendix-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-title-abbr-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-abbr-check/pass.xml"/>
            <x:result href="result-d18209.xml"/>
            <x:test successful="true">
               <x:label>not report sec-title-abbr-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-abbr-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-title-abbr-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-abbr-check/fail.xml"/>
            <x:result href="result-d18218.xml"/>
            <x:test successful="true">
               <x:label>report sec-title-abbr-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-abbr-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-title-content-mandate-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-content-mandate/pass.xml"/>
            <x:result href="result-d18227.xml"/>
            <x:test successful="true">
               <x:label>not report sec-title-content-mandate error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-content-mandate'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-title-content-mandate-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-content-mandate/fail.xml"/>
            <x:result href="result-d18236.xml"/>
            <x:test successful="true">
               <x:label>report sec-title-content-mandate error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-content-mandate'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>abstract-house-tests</x:label>
         <x:scenario>
            <x:label>xref-bibr-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-house-tests/xref-bibr-presence/pass.xml"/>
            <x:result href="result-d18245.xml"/>
            <x:test successful="true">
               <x:label>not report xref-bibr-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-bibr-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-house-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-house-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-bibr-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-house-tests/xref-bibr-presence/fail.xml"/>
            <x:result href="result-d18254.xml"/>
            <x:test successful="true">
               <x:label>report xref-bibr-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-bibr-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-house-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-house-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>res-comm-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-house-tests/res-comm-test/pass.xml"/>
            <x:result href="result-d18263.xml"/>
            <x:test successful="true">
               <x:label>not report res-comm-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'res-comm-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-house-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-house-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>res-comm-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-house-tests/res-comm-test/fail.xml"/>
            <x:result href="result-d18272.xml"/>
            <x:test successful="true">
               <x:label>report res-comm-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'res-comm-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-house-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-house-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>res-art-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-house-tests/res-art-test/pass.xml"/>
            <x:result href="result-d18281.xml"/>
            <x:test successful="true">
               <x:label>not report res-art-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'res-art-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-house-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-house-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>res-art-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-house-tests/res-art-test/fail.xml"/>
            <x:result href="result-d18290.xml"/>
            <x:test successful="true">
               <x:label>report res-art-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'res-art-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-house-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-house-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>KRT-xref-tests</x:label>
         <x:scenario>
            <x:label>xref-colum-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-xref-tests/xref-colum-test/pass.xml"/>
            <x:result href="result-d18299.xml"/>
            <x:test successful="true">
               <x:label>not report xref-colum-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-colum-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-xref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-xref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-colum-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-xref-tests/xref-colum-test/fail.xml"/>
            <x:result href="result-d18308.xml"/>
            <x:test successful="true">
               <x:label>report xref-colum-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-colum-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-xref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-xref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>KRT-check</x:label>
         <x:scenario>
            <x:label>KRT-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-check/KRT-presence/pass.xml"/>
            <x:result href="result-d18317.xml"/>
            <x:test successful="true">
               <x:label>not report KRT-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>KRT-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-check/KRT-presence/fail.xml"/>
            <x:result href="result-d18326.xml"/>
            <x:test successful="true">
               <x:label>report KRT-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>KRT-td-checks</x:label>
         <x:scenario>
            <x:label>doi-link-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-td-checks/doi-link-test/pass.xml"/>
            <x:result href="result-d18335.xml"/>
            <x:test successful="true">
               <x:label>not report doi-link-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'doi-link-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-td-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-td-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>doi-link-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-td-checks/doi-link-test/fail.xml"/>
            <x:result href="result-d18344.xml"/>
            <x:test successful="true">
               <x:label>report doi-link-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'doi-link-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-td-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-td-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PMID-link-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-td-checks/PMID-link-test/pass.xml"/>
            <x:result href="result-d18353.xml"/>
            <x:test successful="true">
               <x:label>not report PMID-link-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PMID-link-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-td-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-td-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PMID-link-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-td-checks/PMID-link-test/fail.xml"/>
            <x:result href="result-d18362.xml"/>
            <x:test successful="true">
               <x:label>report PMID-link-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PMID-link-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-td-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-td-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PMCID-link-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-td-checks/PMCID-link-test/pass.xml"/>
            <x:result href="result-d18371.xml"/>
            <x:test successful="true">
               <x:label>not report PMCID-link-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PMCID-link-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-td-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-td-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PMCID-link-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-td-checks/PMCID-link-test/fail.xml"/>
            <x:result href="result-d18380.xml"/>
            <x:test successful="true">
               <x:label>report PMCID-link-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PMCID-link-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-td-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-td-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>colour-table</x:label>
         <x:scenario>
            <x:label>colour-check-table-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/colour-table/colour-check-table/pass.xml"/>
            <x:result href="result-d18389.xml"/>
            <x:test successful="true">
               <x:label>not report colour-check-table warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-check-table'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert colour-table-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-table-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>colour-check-table-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/colour-table/colour-check-table/fail.xml"/>
            <x:result href="result-d18398.xml"/>
            <x:test successful="true">
               <x:label>report colour-check-table warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-check-table'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert colour-table-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-table-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>colour-named-content</x:label>
         <x:scenario>
            <x:label>colour-named-content-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/colour-named-content/colour-named-content-check/pass.xml"/>
            <x:result href="result-d18407.xml"/>
            <x:test successful="true">
               <x:label>not report colour-named-content-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-named-content-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert colour-named-content-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-named-content-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>colour-named-content-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/colour-named-content/colour-named-content-check/fail.xml"/>
            <x:result href="result-d18416.xml"/>
            <x:test successful="true">
               <x:label>report colour-named-content-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-named-content-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert colour-named-content-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-named-content-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>colour-styled-content</x:label>
         <x:scenario>
            <x:label>colour-styled-content-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/colour-styled-content/colour-styled-content-check/pass.xml"/>
            <x:result href="result-d18425.xml"/>
            <x:test successful="true">
               <x:label>not report colour-styled-content-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-styled-content-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert colour-styled-content-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-styled-content-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>colour-styled-content-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/colour-styled-content/colour-styled-content-check/fail.xml"/>
            <x:result href="result-d18434.xml"/>
            <x:test successful="true">
               <x:label>report colour-styled-content-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-styled-content-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert colour-styled-content-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-styled-content-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>p-punctuation</x:label>
         <x:scenario>
            <x:label>p-punctuation-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-punctuation/p-punctuation-test/pass.xml"/>
            <x:result href="result-d18443.xml"/>
            <x:test successful="true">
               <x:label>not report p-punctuation-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-punctuation-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-punctuation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-punctuation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-punctuation-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-punctuation/p-punctuation-test/fail.xml"/>
            <x:result href="result-d18452.xml"/>
            <x:test successful="true">
               <x:label>report p-punctuation-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-punctuation-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-punctuation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-punctuation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-bracket-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-punctuation/p-bracket-test/pass.xml"/>
            <x:result href="result-d18461.xml"/>
            <x:test successful="true">
               <x:label>not report p-bracket-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-bracket-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-punctuation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-punctuation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-bracket-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-punctuation/p-bracket-test/fail.xml"/>
            <x:result href="result-d18470.xml"/>
            <x:test successful="true">
               <x:label>report p-bracket-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-bracket-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert p-punctuation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-punctuation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>italic-house-style</x:label>
         <x:scenario>
            <x:label>et-al-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/et-al-italic-test/pass.xml"/>
            <x:result href="result-d18479.xml"/>
            <x:test successful="true">
               <x:label>not report et-al-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'et-al-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>et-al-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/et-al-italic-test/fail.xml"/>
            <x:result href="result-d18488.xml"/>
            <x:test successful="true">
               <x:label>report et-al-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'et-al-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-vitro-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-vitro-italic-test/pass.xml"/>
            <x:result href="result-d18497.xml"/>
            <x:test successful="true">
               <x:label>not report in-vitro-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-vitro-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-vitro-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-vitro-italic-test/fail.xml"/>
            <x:result href="result-d18506.xml"/>
            <x:test successful="true">
               <x:label>report in-vitro-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-vitro-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-vivo-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-vivo-italic-test/pass.xml"/>
            <x:result href="result-d18515.xml"/>
            <x:test successful="true">
               <x:label>not report in-vivo-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-vivo-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-vivo-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-vivo-italic-test/fail.xml"/>
            <x:result href="result-d18524.xml"/>
            <x:test successful="true">
               <x:label>report in-vivo-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-vivo-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ex-vivo-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/ex-vivo-italic-test/pass.xml"/>
            <x:result href="result-d18533.xml"/>
            <x:test successful="true">
               <x:label>not report ex-vivo-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ex-vivo-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ex-vivo-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/ex-vivo-italic-test/fail.xml"/>
            <x:result href="result-d18542.xml"/>
            <x:test successful="true">
               <x:label>report ex-vivo-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ex-vivo-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>a-priori-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/a-priori-italic-test/pass.xml"/>
            <x:result href="result-d18551.xml"/>
            <x:test successful="true">
               <x:label>not report a-priori-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'a-priori-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>a-priori-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/a-priori-italic-test/fail.xml"/>
            <x:result href="result-d18560.xml"/>
            <x:test successful="true">
               <x:label>report a-priori-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'a-priori-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>a-posteriori-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/a-posteriori-italic-test/pass.xml"/>
            <x:result href="result-d18569.xml"/>
            <x:test successful="true">
               <x:label>not report a-posteriori-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'a-posteriori-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>a-posteriori-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/a-posteriori-italic-test/fail.xml"/>
            <x:result href="result-d18578.xml"/>
            <x:test successful="true">
               <x:label>report a-posteriori-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'a-posteriori-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>de-novo-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/de-novo-italic-test/pass.xml"/>
            <x:result href="result-d18587.xml"/>
            <x:test successful="true">
               <x:label>not report de-novo-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'de-novo-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>de-novo-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/de-novo-italic-test/fail.xml"/>
            <x:result href="result-d18596.xml"/>
            <x:test successful="true">
               <x:label>report de-novo-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'de-novo-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-utero-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-utero-italic-test/pass.xml"/>
            <x:result href="result-d18605.xml"/>
            <x:test successful="true">
               <x:label>not report in-utero-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-utero-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-utero-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-utero-italic-test/fail.xml"/>
            <x:result href="result-d18614.xml"/>
            <x:test successful="true">
               <x:label>report in-utero-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-utero-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-natura-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-natura-italic-test/pass.xml"/>
            <x:result href="result-d18623.xml"/>
            <x:test successful="true">
               <x:label>not report in-natura-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-natura-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-natura-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-natura-italic-test/fail.xml"/>
            <x:result href="result-d18632.xml"/>
            <x:test successful="true">
               <x:label>report in-natura-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-natura-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-situ-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-situ-italic-test/pass.xml"/>
            <x:result href="result-d18641.xml"/>
            <x:test successful="true">
               <x:label>not report in-situ-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-situ-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-situ-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-situ-italic-test/fail.xml"/>
            <x:result href="result-d18650.xml"/>
            <x:test successful="true">
               <x:label>report in-situ-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-situ-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-planta-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-planta-italic-test/pass.xml"/>
            <x:result href="result-d18659.xml"/>
            <x:test successful="true">
               <x:label>not report in-planta-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-planta-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-planta-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-planta-italic-test/fail.xml"/>
            <x:result href="result-d18668.xml"/>
            <x:test successful="true">
               <x:label>report in-planta-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-planta-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>rete-mirabile-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/rete-mirabile-italic-test/pass.xml"/>
            <x:result href="result-d18677.xml"/>
            <x:test successful="true">
               <x:label>not report rete-mirabile-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rete-mirabile-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>rete-mirabile-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/rete-mirabile-italic-test/fail.xml"/>
            <x:result href="result-d18686.xml"/>
            <x:test successful="true">
               <x:label>report rete-mirabile-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rete-mirabile-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nomen-novum-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/nomen-novum-italic-test/pass.xml"/>
            <x:result href="result-d18695.xml"/>
            <x:test successful="true">
               <x:label>not report nomen-novum-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nomen-novum-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nomen-novum-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/nomen-novum-italic-test/fail.xml"/>
            <x:result href="result-d18704.xml"/>
            <x:test successful="true">
               <x:label>report nomen-novum-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nomen-novum-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sativum-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/sativum-italic-test/pass.xml"/>
            <x:result href="result-d18713.xml"/>
            <x:test successful="true">
               <x:label>not report sativum-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sativum-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sativum-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/sativum-italic-test/fail.xml"/>
            <x:result href="result-d18722.xml"/>
            <x:test successful="true">
               <x:label>report sativum-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sativum-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sensu-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/sensu-italic-test/pass.xml"/>
            <x:result href="result-d18731.xml"/>
            <x:test successful="true">
               <x:label>not report sensu-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sensu-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sensu-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/sensu-italic-test/fail.xml"/>
            <x:result href="result-d18740.xml"/>
            <x:test successful="true">
               <x:label>report sensu-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sensu-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>list-house-style</x:label>
         <x:scenario>
            <x:label>list-type-house-style-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-house-style/list-type-house-style-test/pass.xml"/>
            <x:result href="result-d18749.xml"/>
            <x:test successful="true">
               <x:label>not assert list-type-house-style-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-type-house-style-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>list-type-house-style-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-house-style/list-type-house-style-test/fail.xml"/>
            <x:result href="result-d18758.xml"/>
            <x:test successful="true">
               <x:label>assert list-type-house-style-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-type-house-style-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>pubmed-link</x:label>
         <x:scenario>
            <x:label>pubmed-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pubmed-link/pubmed-presence/pass.xml"/>
            <x:result href="result-d18767.xml"/>
            <x:test successful="true">
               <x:label>not report pubmed-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pubmed-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pubmed-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pubmed-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pubmed-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pubmed-link/pubmed-presence/fail.xml"/>
            <x:result href="result-d18776.xml"/>
            <x:test successful="true">
               <x:label>report pubmed-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pubmed-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pubmed-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pubmed-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pmc-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pubmed-link/pmc-presence/pass.xml"/>
            <x:result href="result-d18785.xml"/>
            <x:test successful="true">
               <x:label>not report pmc-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pmc-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pubmed-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pubmed-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pmc-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pubmed-link/pmc-presence/fail.xml"/>
            <x:result href="result-d18794.xml"/>
            <x:test successful="true">
               <x:label>report pmc-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pmc-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert pubmed-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pubmed-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref-link-mandate</x:label>
         <x:scenario>
            <x:label>pre-ref-link-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-link-mandate/pre-ref-link-presence/pass.xml"/>
            <x:result href="result-d18803.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-ref-link-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-ref-link-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-link-mandate-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-link-mandate-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-ref-link-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-link-mandate/pre-ref-link-presence/fail.xml"/>
            <x:result href="result-d18812.xml"/>
            <x:test successful="true">
               <x:label>assert pre-ref-link-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-ref-link-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-link-mandate-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-link-mandate-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-ref-link-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-link-mandate/final-ref-link-presence/pass.xml"/>
            <x:result href="result-d18821.xml"/>
            <x:test successful="true">
               <x:label>not assert final-ref-link-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-ref-link-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-link-mandate-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-link-mandate-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-ref-link-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-link-mandate/final-ref-link-presence/fail.xml"/>
            <x:result href="result-d18830.xml"/>
            <x:test successful="true">
               <x:label>assert final-ref-link-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-ref-link-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-link-mandate-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-link-mandate-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-permissions-check</x:label>
         <x:scenario>
            <x:label>reproduce-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-1/pass.xml"/>
            <x:result href="result-d18839.xml"/>
            <x:test successful="true">
               <x:label>not report reproduce-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-1/fail.xml"/>
            <x:result href="result-d18848.xml"/>
            <x:test successful="true">
               <x:label>report reproduce-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-2/pass.xml"/>
            <x:result href="result-d18857.xml"/>
            <x:test successful="true">
               <x:label>not report reproduce-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-2/fail.xml"/>
            <x:result href="result-d18866.xml"/>
            <x:test successful="true">
               <x:label>report reproduce-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-3/pass.xml"/>
            <x:result href="result-d18875.xml"/>
            <x:test successful="true">
               <x:label>not report reproduce-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-3/fail.xml"/>
            <x:result href="result-d18884.xml"/>
            <x:test successful="true">
               <x:label>report reproduce-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-4/pass.xml"/>
            <x:result href="result-d18893.xml"/>
            <x:test successful="true">
               <x:label>not report reproduce-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-4/fail.xml"/>
            <x:result href="result-d18902.xml"/>
            <x:test successful="true">
               <x:label>report reproduce-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-5/pass.xml"/>
            <x:result href="result-d18911.xml"/>
            <x:test successful="true">
               <x:label>not report reproduce-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-5/fail.xml"/>
            <x:result href="result-d18920.xml"/>
            <x:test successful="true">
               <x:label>report reproduce-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>xref-formatting</x:label>
         <x:scenario>
            <x:label>xref-parent-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-formatting/xref-parent-test/pass.xml"/>
            <x:result href="result-d18929.xml"/>
            <x:test successful="true">
               <x:label>not report xref-parent-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-parent-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-parent-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-formatting/xref-parent-test/fail.xml"/>
            <x:result href="result-d18938.xml"/>
            <x:test successful="true">
               <x:label>report xref-parent-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-parent-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-formatting/xref-child-test/pass.xml"/>
            <x:result href="result-d18947.xml"/>
            <x:test successful="true">
               <x:label>not report xref-child-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-formatting/xref-child-test/fail.xml"/>
            <x:result href="result-d18956.xml"/>
            <x:test successful="true">
               <x:label>report xref-child-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref-xref-formatting</x:label>
         <x:scenario>
            <x:label>ref-xref-parent-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-formatting/ref-xref-parent-test/pass.xml"/>
            <x:result href="result-d18965.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-parent-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-parent-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-parent-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-formatting/ref-xref-parent-test/fail.xml"/>
            <x:result href="result-d18974.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-parent-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-parent-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-formatting/ref-xref-child-test/pass.xml"/>
            <x:result href="result-d18983.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-child-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-formatting/ref-xref-child-test/fail.xml"/>
            <x:result href="result-d18992.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-child-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-italic-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-formatting/ref-xref-italic-child-test/pass.xml"/>
            <x:result href="result-d19001.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-italic-child-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-italic-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-italic-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-formatting/ref-xref-italic-child-test/fail.xml"/>
            <x:result href="result-d19010.xml"/>
            <x:test successful="true">
               <x:label>report ref-xref-italic-child-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-italic-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ref-xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>code-fork</x:label>
         <x:scenario>
            <x:label>code-fork-info-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/code-fork/code-fork-info/pass.xml"/>
            <x:result href="result-d19019.xml"/>
            <x:test successful="true">
               <x:label>not report code-fork-info warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'code-fork-info'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert code-fork-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'code-fork-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>code-fork-info-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/code-fork/code-fork-info/fail.xml"/>
            <x:result href="result-d19028.xml"/>
            <x:test successful="true">
               <x:label>report code-fork-info warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'code-fork-info'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert code-fork-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'code-fork-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>auth-kwd-style</x:label>
         <x:scenario>
            <x:label>auth-kwd-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-kwd-style/auth-kwd-check/pass.xml"/>
            <x:result href="result-d19037.xml"/>
            <x:test successful="true">
               <x:label>not report auth-kwd-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-kwd-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-kwd-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-kwd-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>auth-kwd-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-kwd-style/auth-kwd-check/fail.xml"/>
            <x:result href="result-d19046.xml"/>
            <x:test successful="true">
               <x:label>report auth-kwd-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-kwd-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-kwd-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-kwd-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
   </x:scenario>
</x:report>

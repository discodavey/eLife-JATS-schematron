<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="file:/Users/fredatherden/xspec/src/reporter/format-xspec-report.xsl"?>
<x:report xmlns:test="http://www.jenitennison.com/xslt/unit-test"
          xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
          xmlns:x="http://www.jenitennison.com/xslt/xspec"
          xmlns:ali="http://www.niso.org/schemas/ali/1.0/"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:saxon="http://saxon.sf.net/"
          xmlns:dc="http://purl.org/dc/terms/"
          xmlns:e="https://elifesciences.org/namespace"
          xmlns:file="java.io.File"
          xmlns:java="http://www.java.com/"
          stylesheet="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/xspec/schematron.sch-preprocessed.xsl"
          date="2019-08-15T17:27:40.152+01:00"
          xspec="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/xspec/schematron.xspec"
          schematron="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/xspec/schematron.sch">
   <x:scenario>
      <x:label/>
      <x:scenario>
         <x:label>article-tests</x:label>
         <x:scenario>
            <x:label>dtd-info-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/dtd-info/pass.xml"/>
            <x:result href="result-d9.xml"/>
            <x:test successful="true">
               <x:label>not report dtd-info info</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dtd-info'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dtd-info-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/dtd-info/fail.xml"/>
            <x:result href="result-d18.xml"/>
            <x:test successful="true">
               <x:label>report dtd-info info</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dtd-info'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'info'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-type-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-type/pass.xml"/>
            <x:result href="result-d27.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-type error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-type'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-type-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-type/fail.xml"/>
            <x:result href="result-d36.xml"/>
            <x:test successful="true">
               <x:label>assert test-article-type error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-type'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-front-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-front/pass.xml"/>
            <x:result href="result-d45.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-front error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-front'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-front-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-front/fail.xml"/>
            <x:result href="result-d54.xml"/>
            <x:test successful="true">
               <x:label>assert test-article-front error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-front'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-body-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-body/pass.xml"/>
            <x:result href="result-d63.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-body error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-body'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-body-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-body/fail.xml"/>
            <x:result href="result-d72.xml"/>
            <x:test successful="true">
               <x:label>assert test-article-body error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-body'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-back-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-back/pass.xml"/>
            <x:result href="result-d81.xml"/>
            <x:test successful="true">
               <x:label>not report test-article-back error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-back'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-back-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-tests/test-article-back/fail.xml"/>
            <x:result href="result-d90.xml"/>
            <x:test successful="true">
               <x:label>report test-article-back error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-back'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>research-article</x:label>
         <x:scenario>
            <x:label>pre-test-r-article-d-letter-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-article/pre-test-r-article-d-letter/pass.xml"/>
            <x:result href="result-d99.xml"/>
            <x:test successful="true">
               <x:label>not report pre-test-r-article-d-letter warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-test-r-article-d-letter'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert research-article-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-article-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-test-r-article-d-letter-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-article/pre-test-r-article-d-letter/fail.xml"/>
            <x:result href="result-d108.xml"/>
            <x:test successful="false">
               <x:label>report pre-test-r-article-d-letter warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-test-r-article-d-letter'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert research-article-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-article-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-test-r-article-d-letter-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-article/final-test-r-article-d-letter/pass.xml"/>
            <x:result href="result-d117.xml"/>
            <x:test successful="true">
               <x:label>not report final-test-r-article-d-letter error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-test-r-article-d-letter'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert research-article-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-article-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-test-r-article-d-letter-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-article/final-test-r-article-d-letter/fail.xml"/>
            <x:result href="result-d126.xml"/>
            <x:test successful="false">
               <x:label>report final-test-r-article-d-letter error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-test-r-article-d-letter'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert research-article-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-article-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-r-article-a-reply-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-article/test-r-article-a-reply/pass.xml"/>
            <x:result href="result-d135.xml"/>
            <x:test successful="true">
               <x:label>not report test-r-article-a-reply warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-r-article-a-reply'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert research-article-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-article-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-r-article-a-reply-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-article/test-r-article-a-reply/fail.xml"/>
            <x:result href="result-d144.xml"/>
            <x:test successful="false">
               <x:label>report test-r-article-a-reply warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-r-article-a-reply'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert research-article-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-article-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-front</x:label>
         <x:scenario>
            <x:label>test-front-jmeta-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-front/test-front-jmeta/pass.xml"/>
            <x:result href="result-d153.xml"/>
            <x:test successful="true">
               <x:label>not assert test-front-jmeta error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-jmeta'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-front-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-front-jmeta-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-front/test-front-jmeta/fail.xml"/>
            <x:result href="result-d162.xml"/>
            <x:test successful="false">
               <x:label>assert test-front-jmeta error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-jmeta'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-front-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-front-ameta-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-front/test-front-ameta/pass.xml"/>
            <x:result href="result-d171.xml"/>
            <x:test successful="true">
               <x:label>not assert test-front-ameta error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-ameta'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-front-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-front-ameta-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-front/test-front-ameta/fail.xml"/>
            <x:result href="result-d180.xml"/>
            <x:test successful="false">
               <x:label>assert test-front-ameta error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-ameta'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-front-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-front-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-journal-meta</x:label>
         <x:scenario>
            <x:label>test-journal-nlm-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-nlm/pass.xml"/>
            <x:result href="result-d189.xml"/>
            <x:test successful="true">
               <x:label>not assert test-journal-nlm error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-nlm'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-nlm-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-nlm/fail.xml"/>
            <x:result href="result-d198.xml"/>
            <x:test successful="false">
               <x:label>assert test-journal-nlm error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-nlm'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-1/pass.xml"/>
            <x:result href="result-d207.xml"/>
            <x:test successful="true">
               <x:label>not assert test-journal-pubid-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-1/fail.xml"/>
            <x:result href="result-d216.xml"/>
            <x:test successful="false">
               <x:label>assert test-journal-pubid-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-2/pass.xml"/>
            <x:result href="result-d225.xml"/>
            <x:test successful="true">
               <x:label>not assert test-journal-pubid-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-2/fail.xml"/>
            <x:result href="result-d234.xml"/>
            <x:test successful="false">
               <x:label>assert test-journal-pubid-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-3/pass.xml"/>
            <x:result href="result-d243.xml"/>
            <x:test successful="true">
               <x:label>not assert test-journal-pubid-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-3/fail.xml"/>
            <x:result href="result-d252.xml"/>
            <x:test successful="false">
               <x:label>assert test-journal-pubid-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-4/pass.xml"/>
            <x:result href="result-d261.xml"/>
            <x:test successful="true">
               <x:label>not assert test-journal-pubid-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-journal-pubid-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-journal-meta/test-journal-pubid-4/fail.xml"/>
            <x:result href="result-d270.xml"/>
            <x:test successful="false">
               <x:label>assert test-journal-pubid-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-pubid-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-journal-meta-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-journal-meta-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-article-metadata</x:label>
         <x:scenario>
            <x:label>test-article-id-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-id/pass.xml"/>
            <x:result href="result-d279.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-id error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-id'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-id-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-id/fail.xml"/>
            <x:result href="result-d288.xml"/>
            <x:test successful="false">
               <x:label>assert test-article-id error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-id'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-doi-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-doi-1/pass.xml"/>
            <x:result href="result-d297.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-doi-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-doi-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-doi-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-doi-1/fail.xml"/>
            <x:result href="result-d306.xml"/>
            <x:test successful="false">
               <x:label>assert test-article-doi-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-doi-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-doi-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-doi-2/pass.xml"/>
            <x:result href="result-d315.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-doi-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-doi-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-doi-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-doi-2/fail.xml"/>
            <x:result href="result-d324.xml"/>
            <x:test successful="false">
               <x:label>assert test-article-doi-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-doi-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-presence/pass.xml"/>
            <x:result href="result-d333.xml"/>
            <x:test successful="true">
               <x:label>not assert test-article-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-article-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-article-presence/fail.xml"/>
            <x:result href="result-d342.xml"/>
            <x:test successful="false">
               <x:label>assert test-article-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-title-group-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-title-group-presence/pass.xml"/>
            <x:result href="result-d351.xml"/>
            <x:test successful="true">
               <x:label>not assert test-title-group-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-title-group-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-title-group-presence/fail.xml"/>
            <x:result href="result-d360.xml"/>
            <x:test successful="false">
               <x:label>assert test-title-group-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-epub-date-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-epub-date/pass.xml"/>
            <x:result href="result-d369.xml"/>
            <x:test successful="true">
               <x:label>not assert test-epub-date error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-epub-date'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-epub-date-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-epub-date/fail.xml"/>
            <x:result href="result-d378.xml"/>
            <x:test successful="false">
               <x:label>assert test-epub-date error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-epub-date'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-pub-collection-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-pub-collection-presence/pass.xml"/>
            <x:result href="result-d387.xml"/>
            <x:test successful="true">
               <x:label>not assert test-pub-collection-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-pub-collection-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-pub-collection-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-pub-collection-presence/fail.xml"/>
            <x:result href="result-d396.xml"/>
            <x:test successful="false">
               <x:label>assert test-pub-collection-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-pub-collection-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-volume-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-volume-presence/pass.xml"/>
            <x:result href="result-d405.xml"/>
            <x:test successful="true">
               <x:label>not assert test-volume-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-volume-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-volume-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-volume-presence/fail.xml"/>
            <x:result href="result-d414.xml"/>
            <x:test successful="false">
               <x:label>assert test-volume-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-volume-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-volume-contents-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-volume-contents/pass.xml"/>
            <x:result href="result-d423.xml"/>
            <x:test successful="true">
               <x:label>not assert test-volume-contents error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-volume-contents'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-volume-contents-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-volume-contents/fail.xml"/>
            <x:result href="result-d432.xml"/>
            <x:test successful="false">
               <x:label>assert test-volume-contents error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-volume-contents'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-elocation-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-elocation-presence/pass.xml"/>
            <x:result href="result-d441.xml"/>
            <x:test successful="true">
               <x:label>not assert test-elocation-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-elocation-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-elocation-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-elocation-presence/fail.xml"/>
            <x:result href="result-d450.xml"/>
            <x:test successful="false">
               <x:label>assert test-elocation-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-elocation-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-presence/pass.xml"/>
            <x:result href="result-d459.xml"/>
            <x:test successful="true">
               <x:label>not report test-self-uri-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-presence/fail.xml"/>
            <x:result href="result-d468.xml"/>
            <x:test successful="false">
               <x:label>report test-self-uri-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-att-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-att/pass.xml"/>
            <x:result href="result-d477.xml"/>
            <x:test successful="true">
               <x:label>not report test-self-uri-att error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-att'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-att-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-att/fail.xml"/>
            <x:result href="result-d486.xml"/>
            <x:test successful="false">
               <x:label>report test-self-uri-att error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-att'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-pdf-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-pdf-1/pass.xml"/>
            <x:result href="result-d495.xml"/>
            <x:test successful="true">
               <x:label>not report test-self-uri-pdf-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-pdf-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-pdf-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-pdf-1/fail.xml"/>
            <x:result href="result-d504.xml"/>
            <x:test successful="false">
               <x:label>report test-self-uri-pdf-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-pdf-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-pdf-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-pdf-2/pass.xml"/>
            <x:result href="result-d513.xml"/>
            <x:test successful="true">
               <x:label>not report test-self-uri-pdf-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-pdf-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-self-uri-pdf-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-self-uri-pdf-2/fail.xml"/>
            <x:result href="result-d522.xml"/>
            <x:test successful="false">
               <x:label>report test-self-uri-pdf-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-self-uri-pdf-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-history-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-history-presence/pass.xml"/>
            <x:result href="result-d531.xml"/>
            <x:test successful="true">
               <x:label>not report test-history-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-history-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-history-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-history-presence/fail.xml"/>
            <x:result href="result-d540.xml"/>
            <x:test successful="false">
               <x:label>report test-history-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-history-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-permissions-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-permissions-presence/pass.xml"/>
            <x:result href="result-d549.xml"/>
            <x:test successful="true">
               <x:label>not assert test-permissions-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-permissions-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-permissions-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-permissions-presence/fail.xml"/>
            <x:result href="result-d558.xml"/>
            <x:test successful="false">
               <x:label>assert test-permissions-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-permissions-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-abstracts-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-abstracts/pass.xml"/>
            <x:result href="result-d567.xml"/>
            <x:test successful="true">
               <x:label>not report test-abstracts error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-abstracts'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-abstracts-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-abstracts/fail.xml"/>
            <x:result href="result-d576.xml"/>
            <x:test successful="false">
               <x:label>report test-abstracts error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-abstracts'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-no-digest-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-no-digest/pass.xml"/>
            <x:result href="result-d585.xml"/>
            <x:test successful="true">
               <x:label>not report test-no-digest error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-no-digest'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-no-digest-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-no-digest/fail.xml"/>
            <x:result href="result-d594.xml"/>
            <x:test successful="false">
               <x:label>report test-no-digest error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-no-digest'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-funding-group-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-funding-group-presence/pass.xml"/>
            <x:result href="result-d603.xml"/>
            <x:test successful="true">
               <x:label>not report test-funding-group-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-funding-group-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-funding-group-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-funding-group-presence/fail.xml"/>
            <x:result href="result-d612.xml"/>
            <x:test successful="false">
               <x:label>report test-funding-group-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-funding-group-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-custom-meta-group-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-custom-meta-group-presence/pass.xml"/>
            <x:result href="result-d621.xml"/>
            <x:test successful="true">
               <x:label>not report test-custom-meta-group-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-custom-meta-group-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-custom-meta-group-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-custom-meta-group-presence/fail.xml"/>
            <x:result href="result-d630.xml"/>
            <x:test successful="false">
               <x:label>report test-custom-meta-group-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-custom-meta-group-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-auth-kwd-group-presence-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-auth-kwd-group-presence-1/pass.xml"/>
            <x:result href="result-d639.xml"/>
            <x:test successful="true">
               <x:label>not report test-auth-kwd-group-presence-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-auth-kwd-group-presence-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-auth-kwd-group-presence-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-auth-kwd-group-presence-1/fail.xml"/>
            <x:result href="result-d648.xml"/>
            <x:test successful="false">
               <x:label>report test-auth-kwd-group-presence-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-auth-kwd-group-presence-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-auth-kwd-group-presence-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-auth-kwd-group-presence-2/pass.xml"/>
            <x:result href="result-d657.xml"/>
            <x:test successful="true">
               <x:label>not report test-auth-kwd-group-presence-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-auth-kwd-group-presence-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-auth-kwd-group-presence-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-auth-kwd-group-presence-2/fail.xml"/>
            <x:result href="result-d666.xml"/>
            <x:test successful="false">
               <x:label>report test-auth-kwd-group-presence-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-auth-kwd-group-presence-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-ro-kwd-group-presence-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-ro-kwd-group-presence-1/pass.xml"/>
            <x:result href="result-d675.xml"/>
            <x:test successful="true">
               <x:label>not report test-ro-kwd-group-presence-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-ro-kwd-group-presence-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-ro-kwd-group-presence-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-ro-kwd-group-presence-1/fail.xml"/>
            <x:result href="result-d684.xml"/>
            <x:test successful="false">
               <x:label>report test-ro-kwd-group-presence-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-ro-kwd-group-presence-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-ro-kwd-group-presence-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-ro-kwd-group-presence-2/pass.xml"/>
            <x:result href="result-d693.xml"/>
            <x:test successful="true">
               <x:label>not report test-ro-kwd-group-presence-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-ro-kwd-group-presence-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-ro-kwd-group-presence-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-metadata/test-ro-kwd-group-presence-2/fail.xml"/>
            <x:result href="result-d702.xml"/>
            <x:test successful="false">
               <x:label>report test-ro-kwd-group-presence-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-ro-kwd-group-presence-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-research-article-metadata</x:label>
         <x:scenario>
            <x:label>test-contrib-group-presence-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-research-article-metadata/test-contrib-group-presence-1/pass.xml"/>
            <x:result href="result-d711.xml"/>
            <x:test successful="true">
               <x:label>not assert test-contrib-group-presence-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-presence-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-research-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-research-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-contrib-group-presence-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-research-article-metadata/test-contrib-group-presence-1/fail.xml"/>
            <x:result href="result-d720.xml"/>
            <x:test successful="false">
               <x:label>assert test-contrib-group-presence-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-presence-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-research-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-research-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-contrib-group-presence-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-research-article-metadata/test-contrib-group-presence-2/pass.xml"/>
            <x:result href="result-d729.xml"/>
            <x:test successful="true">
               <x:label>not assert test-contrib-group-presence-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-presence-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-research-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-research-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-contrib-group-presence-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-research-article-metadata/test-contrib-group-presence-2/fail.xml"/>
            <x:result href="result-d738.xml"/>
            <x:test successful="false">
               <x:label>assert test-contrib-group-presence-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-presence-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-research-article-metadata-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-research-article-metadata-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-article-categories</x:label>
         <x:scenario>
            <x:label>disp-subj-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/disp-subj-test/pass.xml"/>
            <x:result href="result-d747.xml"/>
            <x:test successful="true">
               <x:label>not assert disp-subj-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/disp-subj-test/fail.xml"/>
            <x:result href="result-d756.xml"/>
            <x:test successful="false">
               <x:label>assert disp-subj-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-test2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/disp-subj-test2/pass.xml"/>
            <x:result href="result-d765.xml"/>
            <x:test successful="true">
               <x:label>not assert disp-subj-test2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-test2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-test2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/disp-subj-test2/fail.xml"/>
            <x:result href="result-d774.xml"/>
            <x:test successful="false">
               <x:label>assert disp-subj-test2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-test2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-test1/pass.xml"/>
            <x:result href="result-d783.xml"/>
            <x:test successful="true">
               <x:label>not report head-subj-test1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-test1/fail.xml"/>
            <x:result href="result-d792.xml"/>
            <x:test successful="false">
               <x:label>report head-subj-test1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-test2/pass.xml"/>
            <x:result href="result-d801.xml"/>
            <x:test successful="true">
               <x:label>not report head-subj-test2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-test2/fail.xml"/>
            <x:result href="result-d810.xml"/>
            <x:test successful="false">
               <x:label>report head-subj-test2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-test3/pass.xml"/>
            <x:result href="result-d819.xml"/>
            <x:test successful="true">
               <x:label>not report head-subj-test3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-test3/fail.xml"/>
            <x:result href="result-d828.xml"/>
            <x:test successful="false">
               <x:label>report head-subj-test3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-distinct-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-distinct-test/pass.xml"/>
            <x:result href="result-d837.xml"/>
            <x:test successful="true">
               <x:label>not assert head-subj-distinct-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-distinct-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-distinct-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-article-categories/head-subj-distinct-test/fail.xml"/>
            <x:result href="result-d846.xml"/>
            <x:test successful="false">
               <x:label>assert head-subj-distinct-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-distinct-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-article-categories-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-article-categories-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>disp-channel-checks</x:label>
         <x:scenario>
            <x:label>disp-subj-value-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-1/pass.xml"/>
            <x:result href="result-d855.xml"/>
            <x:test successful="true">
               <x:label>not assert disp-subj-value-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-1/fail.xml"/>
            <x:result href="result-d864.xml"/>
            <x:test successful="true">
               <x:label>assert disp-subj-value-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-2/pass.xml"/>
            <x:result href="result-d873.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-2/fail.xml"/>
            <x:result href="result-d882.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-3/pass.xml"/>
            <x:result href="result-d891.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-3/fail.xml"/>
            <x:result href="result-d900.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-4/pass.xml"/>
            <x:result href="result-d909.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-4/fail.xml"/>
            <x:result href="result-d918.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-5/pass.xml"/>
            <x:result href="result-d927.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-5/fail.xml"/>
            <x:result href="result-d936.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-6/pass.xml"/>
            <x:result href="result-d945.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-6/fail.xml"/>
            <x:result href="result-d954.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-7/pass.xml"/>
            <x:result href="result-d963.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-7/fail.xml"/>
            <x:result href="result-d972.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-8/pass.xml"/>
            <x:result href="result-d981.xml"/>
            <x:test successful="true">
               <x:label>not report disp-subj-value-test-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-subj-value-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-channel-checks/disp-subj-value-test-8/fail.xml"/>
            <x:result href="result-d990.xml"/>
            <x:test successful="true">
               <x:label>report disp-subj-value-test-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-subj-value-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-channel-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-channel-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>MSA-checks</x:label>
         <x:scenario>
            <x:label>head-subj-MSA-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/MSA-checks/head-subj-MSA-test/pass.xml"/>
            <x:result href="result-d999.xml"/>
            <x:test successful="true">
               <x:label>not assert head-subj-MSA-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-MSA-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert MSA-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'MSA-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-MSA-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/MSA-checks/head-subj-MSA-test/fail.xml"/>
            <x:result href="result-d1008.xml"/>
            <x:test successful="false">
               <x:label>assert head-subj-MSA-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-MSA-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert MSA-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'MSA-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>head-subj-checks</x:label>
         <x:scenario>
            <x:label>head-subj-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/head-subj-checks/head-subj-test-1/pass.xml"/>
            <x:result href="result-d1017.xml"/>
            <x:test successful="true">
               <x:label>not assert head-subj-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert head-subj-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/head-subj-checks/head-subj-test-1/fail.xml"/>
            <x:result href="result-d1026.xml"/>
            <x:test successful="true">
               <x:label>assert head-subj-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert head-subj-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/head-subj-checks/head-subj-test-2/pass.xml"/>
            <x:result href="result-d1035.xml"/>
            <x:test successful="true">
               <x:label>not report head-subj-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert head-subj-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>head-subj-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/head-subj-checks/head-subj-test-2/fail.xml"/>
            <x:result href="result-d1044.xml"/>
            <x:test successful="true">
               <x:label>report head-subj-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert head-subj-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'head-subj-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-title-group</x:label>
         <x:scenario>
            <x:label>article-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-1/pass.xml"/>
            <x:result href="result-d1053.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-1/fail.xml"/>
            <x:result href="result-d1062.xml"/>
            <x:test successful="false">
               <x:label>report article-title-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-2/pass.xml"/>
            <x:result href="result-d1071.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-2/fail.xml"/>
            <x:result href="result-d1080.xml"/>
            <x:test successful="false">
               <x:label>report article-title-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-3/pass.xml"/>
            <x:result href="result-d1089.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-3/fail.xml"/>
            <x:result href="result-d1098.xml"/>
            <x:test successful="false">
               <x:label>report article-title-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-4/pass.xml"/>
            <x:result href="result-d1107.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-4/fail.xml"/>
            <x:result href="result-d1116.xml"/>
            <x:test successful="false">
               <x:label>report article-title-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-5/pass.xml"/>
            <x:result href="result-d1125.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-5/fail.xml"/>
            <x:result href="result-d1134.xml"/>
            <x:test successful="false">
               <x:label>report article-title-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-6/pass.xml"/>
            <x:result href="result-d1143.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-6/fail.xml"/>
            <x:result href="result-d1152.xml"/>
            <x:test successful="false">
               <x:label>report article-title-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-7/pass.xml"/>
            <x:result href="result-d1161.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-7/fail.xml"/>
            <x:result href="result-d1170.xml"/>
            <x:test successful="false">
               <x:label>report article-title-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-8/pass.xml"/>
            <x:result href="result-d1179.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-8/fail.xml"/>
            <x:result href="result-d1188.xml"/>
            <x:test successful="false">
               <x:label>report article-title-test-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-9/pass.xml"/>
            <x:result href="result-d1197.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-9/fail.xml"/>
            <x:result href="result-d1206.xml"/>
            <x:test successful="false">
               <x:label>report article-title-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-10-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-10/pass.xml"/>
            <x:result href="result-d1215.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-10 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-10-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-10/fail.xml"/>
            <x:result href="result-d1224.xml"/>
            <x:test successful="false">
               <x:label>report article-title-test-10 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-11-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-11/pass.xml"/>
            <x:result href="result-d1233.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-11 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-11-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-11/fail.xml"/>
            <x:result href="result-d1242.xml"/>
            <x:test successful="false">
               <x:label>report article-title-test-11 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-12-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-12/pass.xml"/>
            <x:result href="result-d1251.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-test-12 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-test-12-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-title-group/article-title-test-12/fail.xml"/>
            <x:result href="result-d1260.xml"/>
            <x:test successful="false">
               <x:label>report article-title-test-12 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-title-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-title-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>test-contrib-group</x:label>
         <x:scenario>
            <x:label>contrib-presence-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-contrib-group/contrib-presence-test/pass.xml"/>
            <x:result href="result-d1269.xml"/>
            <x:test successful="true">
               <x:label>not assert contrib-presence-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-contrib-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-presence-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-contrib-group/contrib-presence-test/fail.xml"/>
            <x:result href="result-d1278.xml"/>
            <x:test successful="false">
               <x:label>assert contrib-presence-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-contrib-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-count-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-contrib-group/equal-count-test/pass.xml"/>
            <x:result href="result-d1287.xml"/>
            <x:test successful="true">
               <x:label>not report equal-count-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-count-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-contrib-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-count-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/test-contrib-group/equal-count-test/fail.xml"/>
            <x:result href="result-d1296.xml"/>
            <x:test successful="false">
               <x:label>report equal-count-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-count-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert test-contrib-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-contrib-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>name-tests</x:label>
         <x:scenario>
            <x:label>surname-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-tests/surname-test-1/pass.xml"/>
            <x:result href="result-d1305.xml"/>
            <x:test successful="true">
               <x:label>not assert surname-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-tests/surname-test-1/fail.xml"/>
            <x:result href="result-d1314.xml"/>
            <x:test successful="false">
               <x:label>assert surname-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-tests/given-names-test-1/pass.xml"/>
            <x:result href="result-d1323.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-tests/given-names-test-1/fail.xml"/>
            <x:result href="result-d1332.xml"/>
            <x:test successful="false">
               <x:label>report given-names-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-tests/given-names-test-2/pass.xml"/>
            <x:result href="result-d1341.xml"/>
            <x:test successful="true">
               <x:label>not assert given-names-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-tests/given-names-test-2/fail.xml"/>
            <x:result href="result-d1350.xml"/>
            <x:test successful="false">
               <x:label>assert given-names-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>surname-tests</x:label>
         <x:scenario>
            <x:label>surname-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-2/pass.xml"/>
            <x:result href="result-d1359.xml"/>
            <x:test successful="true">
               <x:label>not report surname-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-2/fail.xml"/>
            <x:result href="result-d1368.xml"/>
            <x:test successful="false">
               <x:label>report surname-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-3/pass.xml"/>
            <x:result href="result-d1377.xml"/>
            <x:test successful="true">
               <x:label>not report surname-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-3/fail.xml"/>
            <x:result href="result-d1386.xml"/>
            <x:test successful="false">
               <x:label>report surname-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-4/pass.xml"/>
            <x:result href="result-d1395.xml"/>
            <x:test successful="true">
               <x:label>not assert surname-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-4/fail.xml"/>
            <x:result href="result-d1404.xml"/>
            <x:test successful="false">
               <x:label>assert surname-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-5/pass.xml"/>
            <x:result href="result-d1413.xml"/>
            <x:test successful="true">
               <x:label>not assert surname-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-5/fail.xml"/>
            <x:result href="result-d1422.xml"/>
            <x:test successful="false">
               <x:label>assert surname-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-6/pass.xml"/>
            <x:result href="result-d1431.xml"/>
            <x:test successful="true">
               <x:label>not report surname-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-6/fail.xml"/>
            <x:result href="result-d1440.xml"/>
            <x:test successful="false">
               <x:label>report surname-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-7/pass.xml"/>
            <x:result href="result-d1449.xml"/>
            <x:test successful="true">
               <x:label>not report surname-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/surname-tests/surname-test-7/fail.xml"/>
            <x:result href="result-d1458.xml"/>
            <x:test successful="false">
               <x:label>report surname-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert surname-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>given-names-tests</x:label>
         <x:scenario>
            <x:label>given-names-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-3/pass.xml"/>
            <x:result href="result-d1467.xml"/>
            <x:test successful="false">
               <x:label>not report given-names-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-3/fail.xml"/>
            <x:result href="result-d1476.xml"/>
            <x:test successful="false">
               <x:label>report given-names-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-4/pass.xml"/>
            <x:result href="result-d1485.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-4/fail.xml"/>
            <x:result href="result-d1494.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-5/pass.xml"/>
            <x:result href="result-d1503.xml"/>
            <x:test successful="true">
               <x:label>not assert given-names-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-5/fail.xml"/>
            <x:result href="result-d1512.xml"/>
            <x:test successful="true">
               <x:label>assert given-names-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-6/pass.xml"/>
            <x:result href="result-d1521.xml"/>
            <x:test successful="true">
               <x:label>not assert given-names-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-6/fail.xml"/>
            <x:result href="result-d1530.xml"/>
            <x:test successful="true">
               <x:label>assert given-names-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-7/pass.xml"/>
            <x:result href="result-d1539.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-7/fail.xml"/>
            <x:result href="result-d1548.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-8/pass.xml"/>
            <x:result href="result-d1557.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-8/fail.xml"/>
            <x:result href="result-d1566.xml"/>
            <x:test successful="false">
               <x:label>report given-names-test-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-9/pass.xml"/>
            <x:result href="result-d1575.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-9/fail.xml"/>
            <x:result href="result-d1584.xml"/>
            <x:test successful="false">
               <x:label>report given-names-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-10-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-10/pass.xml"/>
            <x:result href="result-d1593.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-10 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-10-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-10/fail.xml"/>
            <x:result href="result-d1602.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-10 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-11-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-11/pass.xml"/>
            <x:result href="result-d1611.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-11 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-11-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-11/fail.xml"/>
            <x:result href="result-d1620.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-11 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-12-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-12/pass.xml"/>
            <x:result href="result-d1629.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-12 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-12-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-12/fail.xml"/>
            <x:result href="result-d1638.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-12 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-13/pass.xml"/>
            <x:result href="result-d1647.xml"/>
            <x:test successful="true">
               <x:label>not report given-names-test-13 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>given-names-test-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/given-names-tests/given-names-test-13/fail.xml"/>
            <x:result href="result-d1656.xml"/>
            <x:test successful="true">
               <x:label>report given-names-test-13 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert given-names-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'given-names-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>suffix-tests</x:label>
         <x:scenario>
            <x:label>suffix-assert-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/suffix-tests/suffix-assert/pass.xml"/>
            <x:result href="result-d1665.xml"/>
            <x:test successful="true">
               <x:label>not assert suffix-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert suffix-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>suffix-assert-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/suffix-tests/suffix-assert/fail.xml"/>
            <x:result href="result-d1674.xml"/>
            <x:test successful="false">
               <x:label>assert suffix-assert error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert suffix-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>suffix-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/suffix-tests/suffix-child-test/pass.xml"/>
            <x:result href="result-d1683.xml"/>
            <x:test successful="true">
               <x:label>not report suffix-child-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert suffix-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>suffix-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/suffix-tests/suffix-child-test/fail.xml"/>
            <x:result href="result-d1692.xml"/>
            <x:test successful="false">
               <x:label>report suffix-child-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert suffix-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'suffix-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>name-child-tests</x:label>
         <x:scenario>
            <x:label>disallowed-child-assert-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-child-tests/disallowed-child-assert/pass.xml"/>
            <x:result href="result-d1701.xml"/>
            <x:test successful="true">
               <x:label>not report disallowed-child-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disallowed-child-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert name-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disallowed-child-assert-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/name-child-tests/disallowed-child-assert/fail.xml"/>
            <x:result href="result-d1710.xml"/>
            <x:test successful="false">
               <x:label>report disallowed-child-assert error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disallowed-child-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert name-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>contrib-tests</x:label>
         <x:scenario>
            <x:label>contrib-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-test-1/pass.xml"/>
            <x:result href="result-d1719.xml"/>
            <x:test successful="true">
               <x:label>not report contrib-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-test-1/fail.xml"/>
            <x:result href="result-d1728.xml"/>
            <x:test successful="true">
               <x:label>report contrib-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-test-2/pass.xml"/>
            <x:result href="result-d1737.xml"/>
            <x:test successful="true">
               <x:label>not report contrib-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-test-2/fail.xml"/>
            <x:result href="result-d1746.xml"/>
            <x:test successful="true">
               <x:label>report contrib-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-test-3/pass.xml"/>
            <x:result href="result-d1755.xml"/>
            <x:test successful="true">
               <x:label>not report contrib-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-test-3/fail.xml"/>
            <x:result href="result-d1764.xml"/>
            <x:test successful="true">
               <x:label>report contrib-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>name-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/name-test/pass.xml"/>
            <x:result href="result-d1773.xml"/>
            <x:test successful="true">
               <x:label>not report name-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>name-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/name-test/fail.xml"/>
            <x:result href="result-d1782.xml"/>
            <x:test successful="true">
               <x:label>report name-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'name-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-email-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-email-1/pass.xml"/>
            <x:result href="result-d1791.xml"/>
            <x:test successful="true">
               <x:label>not report contrib-email-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-email-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-email-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-email-1/fail.xml"/>
            <x:result href="result-d1800.xml"/>
            <x:test successful="true">
               <x:label>report contrib-email-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-email-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-email-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-email-2/pass.xml"/>
            <x:result href="result-d1809.xml"/>
            <x:test successful="true">
               <x:label>not report contrib-email-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-email-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>contrib-email-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/contrib-email-2/fail.xml"/>
            <x:result href="result-d1818.xml"/>
            <x:test successful="true">
               <x:label>report contrib-email-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-email-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>COI-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/COI-test/pass.xml"/>
            <x:result href="result-d1827.xml"/>
            <x:test successful="true">
               <x:label>not report COI-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'COI-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>COI-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/contrib-tests/COI-test/fail.xml"/>
            <x:result href="result-d1836.xml"/>
            <x:test successful="true">
               <x:label>report COI-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'COI-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert contrib-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'contrib-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>author-children-tests</x:label>
         <x:scenario>
            <x:label>author-children-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/author-children-tests/author-children-test/pass.xml"/>
            <x:result href="result-d1845.xml"/>
            <x:test successful="true">
               <x:label>not assert author-children-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-children-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert author-children-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-children-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-children-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/author-children-tests/author-children-test/fail.xml"/>
            <x:result href="result-d1854.xml"/>
            <x:test successful="true">
               <x:label>assert author-children-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-children-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert author-children-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-children-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>orcid-tests</x:label>
         <x:scenario>
            <x:label>orcid-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/orcid-tests/orcid-test-1/pass.xml"/>
            <x:result href="result-d1863.xml"/>
            <x:test successful="true">
               <x:label>not assert orcid-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert orcid-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>orcid-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/orcid-tests/orcid-test-1/fail.xml"/>
            <x:result href="result-d1872.xml"/>
            <x:test successful="false">
               <x:label>assert orcid-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert orcid-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>orcid-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/orcid-tests/orcid-test-2/pass.xml"/>
            <x:result href="result-d1881.xml"/>
            <x:test successful="true">
               <x:label>not assert orcid-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert orcid-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>orcid-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/orcid-tests/orcid-test-2/fail.xml"/>
            <x:result href="result-d1890.xml"/>
            <x:test successful="false">
               <x:label>assert orcid-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert orcid-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'orcid-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>email-tests</x:label>
         <x:scenario>
            <x:label>email-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/email-tests/email-test/pass.xml"/>
            <x:result href="result-d1899.xml"/>
            <x:test successful="true">
               <x:label>not assert email-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'email-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert email-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'email-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>email-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/email-tests/email-test/fail.xml"/>
            <x:result href="result-d1908.xml"/>
            <x:test successful="true">
               <x:label>assert email-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'email-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert email-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'email-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>history-tests</x:label>
         <x:scenario>
            <x:label>history-date-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/history-tests/history-date-test-1/pass.xml"/>
            <x:result href="result-d1917.xml"/>
            <x:test successful="true">
               <x:label>not assert history-date-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert history-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>history-date-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/history-tests/history-date-test-1/fail.xml"/>
            <x:result href="result-d1926.xml"/>
            <x:test successful="true">
               <x:label>assert history-date-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert history-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>history-date-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/history-tests/history-date-test-2/pass.xml"/>
            <x:result href="result-d1935.xml"/>
            <x:test successful="true">
               <x:label>not assert history-date-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert history-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>history-date-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/history-tests/history-date-test-2/fail.xml"/>
            <x:result href="result-d1944.xml"/>
            <x:test successful="true">
               <x:label>assert history-date-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert history-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'history-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>date-tests</x:label>
         <x:scenario>
            <x:label>date-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-1/pass.xml"/>
            <x:result href="result-d1953.xml"/>
            <x:test successful="true">
               <x:label>not assert date-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-1/fail.xml"/>
            <x:result href="result-d1962.xml"/>
            <x:test successful="true">
               <x:label>assert date-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-2/pass.xml"/>
            <x:result href="result-d1971.xml"/>
            <x:test successful="true">
               <x:label>not assert date-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-2/fail.xml"/>
            <x:result href="result-d1980.xml"/>
            <x:test successful="true">
               <x:label>assert date-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-3/pass.xml"/>
            <x:result href="result-d1989.xml"/>
            <x:test successful="true">
               <x:label>not assert date-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-3/fail.xml"/>
            <x:result href="result-d1998.xml"/>
            <x:test successful="true">
               <x:label>assert date-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-4/pass.xml"/>
            <x:result href="result-d2007.xml"/>
            <x:test successful="true">
               <x:label>not assert date-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>date-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/date-tests/date-test-4/fail.xml"/>
            <x:result href="result-d2016.xml"/>
            <x:test successful="true">
               <x:label>assert date-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert date-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'date-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>day-tests</x:label>
         <x:scenario>
            <x:label>day-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/day-tests/day-conformity/pass.xml"/>
            <x:result href="result-d2025.xml"/>
            <x:test successful="true">
               <x:label>not assert day-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'day-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert day-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'day-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>day-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/day-tests/day-conformity/fail.xml"/>
            <x:result href="result-d2034.xml"/>
            <x:test successful="true">
               <x:label>assert day-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'day-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert day-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'day-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>month-tests</x:label>
         <x:scenario>
            <x:label>month-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/month-tests/month-conformity/pass.xml"/>
            <x:result href="result-d2043.xml"/>
            <x:test successful="true">
               <x:label>not assert month-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'month-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert month-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'month-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>month-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/month-tests/month-conformity/fail.xml"/>
            <x:result href="result-d2052.xml"/>
            <x:test successful="true">
               <x:label>assert month-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'month-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert month-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'month-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>year-article-meta-tests</x:label>
         <x:scenario>
            <x:label>year-article-meta-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/year-article-meta-tests/year-article-meta-conformity/pass.xml"/>
            <x:result href="result-d2061.xml"/>
            <x:test successful="true">
               <x:label>not assert year-article-meta-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-article-meta-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert year-article-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-article-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>year-article-meta-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/year-article-meta-tests/year-article-meta-conformity/fail.xml"/>
            <x:result href="result-d2070.xml"/>
            <x:test successful="true">
               <x:label>assert year-article-meta-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-article-meta-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert year-article-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-article-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>year-element-citation-tests</x:label>
         <x:scenario>
            <x:label>year-element-citation-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/year-element-citation-tests/year-element-citation-conformity/pass.xml"/>
            <x:result href="result-d2079.xml"/>
            <x:test successful="true">
               <x:label>not assert year-element-citation-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-element-citation-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert year-element-citation-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-element-citation-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>year-element-citation-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/year-element-citation-tests/year-element-citation-conformity/fail.xml"/>
            <x:result href="result-d2088.xml"/>
            <x:test successful="true">
               <x:label>assert year-element-citation-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-element-citation-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert year-element-citation-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'year-element-citation-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>pub-date-tests-1</x:label>
         <x:scenario>
            <x:label>pre-pub-date-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/pre-pub-date-test-1/pass.xml"/>
            <x:result href="result-d2097.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-pub-date-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-pub-date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-pub-date-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/pre-pub-date-test-1/fail.xml"/>
            <x:result href="result-d2106.xml"/>
            <x:test successful="false">
               <x:label>assert pre-pub-date-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-pub-date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-pub-date-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/final-pub-date-test-1/pass.xml"/>
            <x:result href="result-d2115.xml"/>
            <x:test successful="true">
               <x:label>not assert final-pub-date-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-pub-date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-pub-date-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/final-pub-date-test-1/fail.xml"/>
            <x:result href="result-d2124.xml"/>
            <x:test successful="false">
               <x:label>assert final-pub-date-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-pub-date-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-pub-date-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/pre-pub-date-test-2/pass.xml"/>
            <x:result href="result-d2133.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-pub-date-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-pub-date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-pub-date-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/pre-pub-date-test-2/fail.xml"/>
            <x:result href="result-d2142.xml"/>
            <x:test successful="false">
               <x:label>assert pre-pub-date-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-pub-date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-pub-date-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/final-pub-date-test-2/pass.xml"/>
            <x:result href="result-d2151.xml"/>
            <x:test successful="true">
               <x:label>not assert final-pub-date-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-pub-date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-pub-date-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/final-pub-date-test-2/fail.xml"/>
            <x:result href="result-d2160.xml"/>
            <x:test successful="false">
               <x:label>assert final-pub-date-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-pub-date-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/pub-date-test-3/pass.xml"/>
            <x:result href="result-d2169.xml"/>
            <x:test successful="true">
               <x:label>not assert pub-date-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-1/pub-date-test-3/fail.xml"/>
            <x:result href="result-d2178.xml"/>
            <x:test successful="false">
               <x:label>assert pub-date-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>pub-date-tests-2</x:label>
         <x:scenario>
            <x:label>pub-date-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-2/pub-date-test-4/pass.xml"/>
            <x:result href="result-d2187.xml"/>
            <x:test successful="true">
               <x:label>not assert pub-date-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-2/pub-date-test-4/fail.xml"/>
            <x:result href="result-d2196.xml"/>
            <x:test successful="false">
               <x:label>assert pub-date-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-2/pub-date-test-5/pass.xml"/>
            <x:result href="result-d2205.xml"/>
            <x:test successful="true">
               <x:label>not report pub-date-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-2/pub-date-test-5/fail.xml"/>
            <x:result href="result-d2214.xml"/>
            <x:test successful="false">
               <x:label>report pub-date-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-2/pub-date-test-6/pass.xml"/>
            <x:result href="result-d2223.xml"/>
            <x:test successful="true">
               <x:label>not assert pub-date-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-date-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-date-tests-2/pub-date-test-6/fail.xml"/>
            <x:result href="result-d2232.xml"/>
            <x:test successful="false">
               <x:label>assert pub-date-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-date-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-date-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>front-permissions-tests</x:label>
         <x:scenario>
            <x:label>permissions-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-1/pass.xml"/>
            <x:result href="result-d2241.xml"/>
            <x:test successful="true">
               <x:label>not report permissions-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-1/fail.xml"/>
            <x:result href="result-d2250.xml"/>
            <x:test successful="true">
               <x:label>report permissions-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-2/pass.xml"/>
            <x:result href="result-d2259.xml"/>
            <x:test successful="true">
               <x:label>not report permissions-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-2/fail.xml"/>
            <x:result href="result-d2268.xml"/>
            <x:test successful="true">
               <x:label>report permissions-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-3/pass.xml"/>
            <x:result href="result-d2277.xml"/>
            <x:test successful="true">
               <x:label>not report permissions-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-3/fail.xml"/>
            <x:result href="result-d2286.xml"/>
            <x:test successful="true">
               <x:label>report permissions-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-4/pass.xml"/>
            <x:result href="result-d2295.xml"/>
            <x:test successful="false">
               <x:label>not assert permissions-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-4/fail.xml"/>
            <x:result href="result-d2304.xml"/>
            <x:test successful="true">
               <x:label>assert permissions-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-5/pass.xml"/>
            <x:result href="result-d2313.xml"/>
            <x:test successful="true">
               <x:label>not assert permissions-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-5/fail.xml"/>
            <x:result href="result-d2322.xml"/>
            <x:test successful="true">
               <x:label>assert permissions-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-6/pass.xml"/>
            <x:result href="result-d2331.xml"/>
            <x:test successful="true">
               <x:label>not report permissions-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-6/fail.xml"/>
            <x:result href="result-d2340.xml"/>
            <x:test successful="true">
               <x:label>report permissions-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-7/pass.xml"/>
            <x:result href="result-d2349.xml"/>
            <x:test successful="true">
               <x:label>not report permissions-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-7/fail.xml"/>
            <x:result href="result-d2358.xml"/>
            <x:test successful="true">
               <x:label>report permissions-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-8/pass.xml"/>
            <x:result href="result-d2367.xml"/>
            <x:test successful="true">
               <x:label>not report permissions-test-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-8/fail.xml"/>
            <x:result href="result-d2376.xml"/>
            <x:test successful="true">
               <x:label>report permissions-test-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-9/pass.xml"/>
            <x:result href="result-d2385.xml"/>
            <x:test successful="true">
               <x:label>not assert permissions-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>permissions-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/front-permissions-tests/permissions-test-9/fail.xml"/>
            <x:result href="result-d2394.xml"/>
            <x:test successful="true">
               <x:label>assert permissions-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'permissions-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert front-permissions-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'front-permissions-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>license-tests</x:label>
         <x:scenario>
            <x:label>license-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/license-tests/license-test-1/pass.xml"/>
            <x:result href="result-d2403.xml"/>
            <x:test successful="false">
               <x:label>not assert license-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert license-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>license-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/license-tests/license-test-1/fail.xml"/>
            <x:result href="result-d2412.xml"/>
            <x:test successful="true">
               <x:label>assert license-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert license-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>license-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/license-tests/license-test-2/pass.xml"/>
            <x:result href="result-d2421.xml"/>
            <x:test successful="true">
               <x:label>not assert license-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert license-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>license-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/license-tests/license-test-2/fail.xml"/>
            <x:result href="result-d2430.xml"/>
            <x:test successful="true">
               <x:label>assert license-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert license-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'license-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>abstract-tests</x:label>
         <x:scenario>
            <x:label>abstract-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-tests/abstract-test-1/pass.xml"/>
            <x:result href="result-d2439.xml"/>
            <x:test successful="true">
               <x:label>not report abstract-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>abstract-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-tests/abstract-test-1/fail.xml"/>
            <x:result href="result-d2448.xml"/>
            <x:test successful="true">
               <x:label>report abstract-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>abstract-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-tests/abstract-test-2/pass.xml"/>
            <x:result href="result-d2457.xml"/>
            <x:test successful="true">
               <x:label>not report abstract-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>abstract-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-tests/abstract-test-2/fail.xml"/>
            <x:result href="result-d2466.xml"/>
            <x:test successful="true">
               <x:label>report abstract-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>abstract-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-tests/abstract-test-4/pass.xml"/>
            <x:result href="result-d2475.xml"/>
            <x:test successful="true">
               <x:label>not report abstract-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>abstract-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-tests/abstract-test-4/fail.xml"/>
            <x:result href="result-d2484.xml"/>
            <x:test successful="true">
               <x:label>report abstract-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>aff-tests</x:label>
         <x:scenario>
            <x:label>aff-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/aff-tests/aff-test-1/pass.xml"/>
            <x:result href="result-d2493.xml"/>
            <x:test successful="true">
               <x:label>not assert aff-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert aff-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>aff-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/aff-tests/aff-test-1/fail.xml"/>
            <x:result href="result-d2502.xml"/>
            <x:test successful="true">
               <x:label>assert aff-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert aff-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>funding-group-tests</x:label>
         <x:scenario>
            <x:label>funding-group-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/funding-group-tests/funding-group-test-1/pass.xml"/>
            <x:result href="result-d2511.xml"/>
            <x:test successful="true">
               <x:label>not assert funding-group-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert funding-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>funding-group-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/funding-group-tests/funding-group-test-1/fail.xml"/>
            <x:result href="result-d2520.xml"/>
            <x:test successful="true">
               <x:label>assert funding-group-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert funding-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>funding-group-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/funding-group-tests/funding-group-test-2/pass.xml"/>
            <x:result href="result-d2529.xml"/>
            <x:test successful="true">
               <x:label>not report funding-group-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert funding-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>funding-group-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/funding-group-tests/funding-group-test-2/fail.xml"/>
            <x:result href="result-d2538.xml"/>
            <x:test successful="true">
               <x:label>report funding-group-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert funding-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>funding-group-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/funding-group-tests/funding-group-test-3/pass.xml"/>
            <x:result href="result-d2547.xml"/>
            <x:test successful="true">
               <x:label>not report funding-group-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert funding-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>funding-group-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/funding-group-tests/funding-group-test-3/fail.xml"/>
            <x:result href="result-d2556.xml"/>
            <x:test successful="true">
               <x:label>report funding-group-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert funding-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'funding-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>award-group-tests</x:label>
         <x:scenario>
            <x:label>award-group-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-2/pass.xml"/>
            <x:result href="result-d2565.xml"/>
            <x:test successful="true">
               <x:label>not assert award-group-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-2/fail.xml"/>
            <x:result href="result-d2574.xml"/>
            <x:test successful="false">
               <x:label>assert award-group-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-3/pass.xml"/>
            <x:result href="result-d2583.xml"/>
            <x:test successful="true">
               <x:label>not assert award-group-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-3/fail.xml"/>
            <x:result href="result-d2592.xml"/>
            <x:test successful="false">
               <x:label>assert award-group-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-4/pass.xml"/>
            <x:result href="result-d2601.xml"/>
            <x:test successful="true">
               <x:label>not report award-group-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-4/fail.xml"/>
            <x:result href="result-d2610.xml"/>
            <x:test successful="false">
               <x:label>report award-group-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-5/pass.xml"/>
            <x:result href="result-d2619.xml"/>
            <x:test successful="true">
               <x:label>not assert award-group-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-5/fail.xml"/>
            <x:result href="result-d2628.xml"/>
            <x:test successful="false">
               <x:label>assert award-group-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-6/pass.xml"/>
            <x:result href="result-d2637.xml"/>
            <x:test successful="true">
               <x:label>not assert award-group-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-6/fail.xml"/>
            <x:result href="result-d2646.xml"/>
            <x:test successful="false">
               <x:label>assert award-group-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-7/pass.xml"/>
            <x:result href="result-d2655.xml"/>
            <x:test successful="true">
               <x:label>not assert award-group-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-tests/award-group-test-7/fail.xml"/>
            <x:result href="result-d2664.xml"/>
            <x:test successful="false">
               <x:label>assert award-group-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert award-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>award-id-tests</x:label>
         <x:scenario>
            <x:label>award-id-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-id-tests/award-id-test-1/pass.xml"/>
            <x:result href="result-d2673.xml"/>
            <x:test successful="true">
               <x:label>not report award-id-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-id-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-id-tests/award-id-test-1/fail.xml"/>
            <x:result href="result-d2682.xml"/>
            <x:test successful="true">
               <x:label>report award-id-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-id-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-id-tests/award-id-test-2/pass.xml"/>
            <x:result href="result-d2691.xml"/>
            <x:test successful="true">
               <x:label>not report award-id-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-id-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-id-tests/award-id-test-2/fail.xml"/>
            <x:result href="result-d2700.xml"/>
            <x:test successful="true">
               <x:label>report award-id-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-id-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-id-tests/award-id-test-3/pass.xml"/>
            <x:result href="result-d2709.xml"/>
            <x:test successful="true">
               <x:label>not report award-id-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-id-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-id-tests/award-id-test-3/fail.xml"/>
            <x:result href="result-d2718.xml"/>
            <x:test successful="true">
               <x:label>report award-id-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>institution-wrap-tests</x:label>
         <x:scenario>
            <x:label>institution-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/institution-wrap-tests/institution-id-test/pass.xml"/>
            <x:result href="result-d2727.xml"/>
            <x:test successful="true">
               <x:label>not assert institution-id-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert institution-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>institution-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/institution-wrap-tests/institution-id-test/fail.xml"/>
            <x:result href="result-d2736.xml"/>
            <x:test successful="true">
               <x:label>assert institution-id-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert institution-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>kwd-group-tests</x:label>
         <x:scenario>
            <x:label>kwd-group-type-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/kwd-group-tests/kwd-group-type/pass.xml"/>
            <x:result href="result-d2745.xml"/>
            <x:test successful="true">
               <x:label>not assert kwd-group-type error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-type'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kwd-group-type-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/kwd-group-tests/kwd-group-type/fail.xml"/>
            <x:result href="result-d2754.xml"/>
            <x:test successful="true">
               <x:label>assert kwd-group-type error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-type'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>non-ro-kwd-presence-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/kwd-group-tests/non-ro-kwd-presence-test/pass.xml"/>
            <x:result href="result-d2763.xml"/>
            <x:test successful="true">
               <x:label>not assert non-ro-kwd-presence-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'non-ro-kwd-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>non-ro-kwd-presence-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/kwd-group-tests/non-ro-kwd-presence-test/fail.xml"/>
            <x:result href="result-d2772.xml"/>
            <x:test successful="true">
               <x:label>assert non-ro-kwd-presence-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'non-ro-kwd-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ro-kwd-group-tests</x:label>
         <x:scenario>
            <x:label>kwd-group-title-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-group-tests/kwd-group-title/pass.xml"/>
            <x:result href="result-d2781.xml"/>
            <x:test successful="true">
               <x:label>not assert kwd-group-title error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-title'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ro-kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kwd-group-title-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-group-tests/kwd-group-title/fail.xml"/>
            <x:result href="result-d2790.xml"/>
            <x:test successful="false">
               <x:label>assert kwd-group-title error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-group-title'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ro-kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ro-kwd-presence-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-group-tests/ro-kwd-presence-test/pass.xml"/>
            <x:result href="result-d2799.xml"/>
            <x:test successful="true">
               <x:label>not assert ro-kwd-presence-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ro-kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ro-kwd-presence-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-group-tests/ro-kwd-presence-test/fail.xml"/>
            <x:result href="result-d2808.xml"/>
            <x:test successful="false">
               <x:label>assert ro-kwd-presence-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ro-kwd-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ro-kwd-tests</x:label>
         <x:scenario>
            <x:label>kwd-upper-case-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-tests/kwd-upper-case/pass.xml"/>
            <x:result href="result-d2817.xml"/>
            <x:test successful="true">
               <x:label>not assert kwd-upper-case error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-upper-case'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ro-kwd-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kwd-upper-case-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-tests/kwd-upper-case/fail.xml"/>
            <x:result href="result-d2826.xml"/>
            <x:test successful="false">
               <x:label>assert kwd-upper-case error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-upper-case'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ro-kwd-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kwd-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-tests/kwd-child-test/pass.xml"/>
            <x:result href="result-d2835.xml"/>
            <x:test successful="true">
               <x:label>not report kwd-child-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ro-kwd-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kwd-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ro-kwd-tests/kwd-child-test/fail.xml"/>
            <x:result href="result-d2844.xml"/>
            <x:test successful="false">
               <x:label>report kwd-child-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kwd-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ro-kwd-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ro-kwd-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>custom-meta-group-tests</x:label>
         <x:scenario>
            <x:label>custom-meta-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-group-tests/custom-meta-presence/pass.xml"/>
            <x:result href="result-d2853.xml"/>
            <x:test successful="true">
               <x:label>not assert custom-meta-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert custom-meta-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-group-tests/custom-meta-presence/fail.xml"/>
            <x:result href="result-d2862.xml"/>
            <x:test successful="false">
               <x:label>assert custom-meta-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert custom-meta-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>custom-meta-tests</x:label>
         <x:scenario>
            <x:label>custom-meta-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-tests/custom-meta-test-1/pass.xml"/>
            <x:result href="result-d2871.xml"/>
            <x:test successful="true">
               <x:label>not assert custom-meta-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-tests/custom-meta-test-1/fail.xml"/>
            <x:result href="result-d2880.xml"/>
            <x:test successful="true">
               <x:label>assert custom-meta-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-tests/custom-meta-test-2/pass.xml"/>
            <x:result href="result-d2889.xml"/>
            <x:test successful="true">
               <x:label>not assert custom-meta-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-tests/custom-meta-test-2/fail.xml"/>
            <x:result href="result-d2898.xml"/>
            <x:test successful="true">
               <x:label>assert custom-meta-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-tests/custom-meta-test-3/pass.xml"/>
            <x:result href="result-d2907.xml"/>
            <x:test successful="true">
               <x:label>not assert custom-meta-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/custom-meta-tests/custom-meta-test-3/fail.xml"/>
            <x:result href="result-d2916.xml"/>
            <x:test successful="true">
               <x:label>assert custom-meta-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert custom-meta-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>meta-value-tests</x:label>
         <x:scenario>
            <x:label>custom-meta-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-4/pass.xml"/>
            <x:result href="result-d2925.xml"/>
            <x:test successful="true">
               <x:label>not report custom-meta-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-4/fail.xml"/>
            <x:result href="result-d2934.xml"/>
            <x:test successful="false">
               <x:label>report custom-meta-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-5/pass.xml"/>
            <x:result href="result-d2943.xml"/>
            <x:test successful="true">
               <x:label>not report pre-custom-meta-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-5/fail.xml"/>
            <x:result href="result-d2952.xml"/>
            <x:test successful="false">
               <x:label>report pre-custom-meta-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-feature-custom-meta-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-feature-custom-meta-test-5/pass.xml"/>
            <x:result href="result-d2961.xml"/>
            <x:test successful="true">
               <x:label>not report final-feature-custom-meta-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-feature-custom-meta-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-feature-custom-meta-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-feature-custom-meta-test-5/fail.xml"/>
            <x:result href="result-d2970.xml"/>
            <x:test successful="false">
               <x:label>report final-feature-custom-meta-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-feature-custom-meta-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-5/pass.xml"/>
            <x:result href="result-d2979.xml"/>
            <x:test successful="true">
               <x:label>not report final-custom-meta-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-5/fail.xml"/>
            <x:result href="result-d2988.xml"/>
            <x:test successful="false">
               <x:label>report final-custom-meta-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-6/pass.xml"/>
            <x:result href="result-d2997.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-custom-meta-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-6/fail.xml"/>
            <x:result href="result-d3006.xml"/>
            <x:test successful="false">
               <x:label>assert pre-custom-meta-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-6/pass.xml"/>
            <x:result href="result-d3015.xml"/>
            <x:test successful="true">
               <x:label>not assert final-custom-meta-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-6/fail.xml"/>
            <x:result href="result-d3024.xml"/>
            <x:test successful="false">
               <x:label>assert final-custom-meta-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-7/pass.xml"/>
            <x:result href="result-d3033.xml"/>
            <x:test successful="true">
               <x:label>not report custom-meta-test-7 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-7/fail.xml"/>
            <x:result href="result-d3042.xml"/>
            <x:test successful="false">
               <x:label>report custom-meta-test-7 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-8/pass.xml"/>
            <x:result href="result-d3051.xml"/>
            <x:test successful="true">
               <x:label>not report custom-meta-test-8 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-8/fail.xml"/>
            <x:result href="result-d3060.xml"/>
            <x:test successful="false">
               <x:label>report custom-meta-test-8 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-9/pass.xml"/>
            <x:result href="result-d3069.xml"/>
            <x:test successful="true">
               <x:label>not report pre-custom-meta-test-9 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-9/fail.xml"/>
            <x:result href="result-d3078.xml"/>
            <x:test successful="false">
               <x:label>report pre-custom-meta-test-9 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-9/pass.xml"/>
            <x:result href="result-d3087.xml"/>
            <x:test successful="true">
               <x:label>not report final-custom-meta-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-9/fail.xml"/>
            <x:result href="result-d3096.xml"/>
            <x:test successful="false">
               <x:label>report final-custom-meta-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-10-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-10/pass.xml"/>
            <x:result href="result-d3105.xml"/>
            <x:test successful="true">
               <x:label>not report custom-meta-test-10 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-test-10-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/custom-meta-test-10/fail.xml"/>
            <x:result href="result-d3114.xml"/>
            <x:test successful="false">
               <x:label>report custom-meta-test-10 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-11-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-11/pass.xml"/>
            <x:result href="result-d3123.xml"/>
            <x:test successful="true">
               <x:label>not report pre-custom-meta-test-11 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-custom-meta-test-11-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/pre-custom-meta-test-11/fail.xml"/>
            <x:result href="result-d3132.xml"/>
            <x:test successful="false">
               <x:label>report pre-custom-meta-test-11 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-custom-meta-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-12-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-12/pass.xml"/>
            <x:result href="result-d3141.xml"/>
            <x:test successful="true">
               <x:label>not report final-custom-meta-test-12 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-custom-meta-test-12-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/final-custom-meta-test-12/fail.xml"/>
            <x:result href="result-d3150.xml"/>
            <x:test successful="false">
               <x:label>report final-custom-meta-test-12 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-custom-meta-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>rep-study-custom-meta-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/rep-study-custom-meta-test/pass.xml"/>
            <x:result href="result-d3159.xml"/>
            <x:test successful="true">
               <x:label>not report rep-study-custom-meta-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-study-custom-meta-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>rep-study-custom-meta-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-tests/rep-study-custom-meta-test/fail.xml"/>
            <x:result href="result-d3168.xml"/>
            <x:test successful="false">
               <x:label>report rep-study-custom-meta-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-study-custom-meta-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>meta-value-child-tests</x:label>
         <x:scenario>
            <x:label>custom-meta-child-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-child-tests/custom-meta-child-test-1/pass.xml"/>
            <x:result href="result-d3177.xml"/>
            <x:test successful="true">
               <x:label>not assert custom-meta-child-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>custom-meta-child-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/meta-value-child-tests/custom-meta-child-test-1/fail.xml"/>
            <x:result href="result-d3186.xml"/>
            <x:test successful="false">
               <x:label>assert custom-meta-child-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'custom-meta-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert meta-value-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'meta-value-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elocation-id-tests</x:label>
         <x:scenario>
            <x:label>test-elocation-conformance-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elocation-id-tests/test-elocation-conformance/pass.xml"/>
            <x:result href="result-d3195.xml"/>
            <x:test successful="true">
               <x:label>not assert test-elocation-conformance error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-elocation-conformance'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elocation-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elocation-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>test-elocation-conformance-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elocation-id-tests/test-elocation-conformance/fail.xml"/>
            <x:result href="result-d3204.xml"/>
            <x:test successful="true">
               <x:label>assert test-elocation-conformance error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'test-elocation-conformance'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elocation-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elocation-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>volume-test</x:label>
         <x:scenario>
            <x:label>volume-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/volume-test/volume-test-1/pass.xml"/>
            <x:result href="result-d3213.xml"/>
            <x:test successful="true">
               <x:label>not assert volume-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'volume-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert volume-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'volume-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>volume-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/volume-test/volume-test-1/fail.xml"/>
            <x:result href="result-d3222.xml"/>
            <x:test successful="false">
               <x:label>assert volume-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'volume-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert volume-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'volume-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>equal-author-tests</x:label>
         <x:scenario>
            <x:label>equal-author-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equal-author-tests/equal-author-test-1/pass.xml"/>
            <x:result href="result-d3231.xml"/>
            <x:test successful="true">
               <x:label>not report equal-author-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equal-author-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-author-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equal-author-tests/equal-author-test-1/fail.xml"/>
            <x:result href="result-d3240.xml"/>
            <x:test successful="true">
               <x:label>report equal-author-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equal-author-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-author-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equal-author-tests/equal-author-test-2/pass.xml"/>
            <x:result href="result-d3249.xml"/>
            <x:test successful="true">
               <x:label>not report equal-author-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equal-author-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-author-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equal-author-tests/equal-author-test-2/fail.xml"/>
            <x:result href="result-d3258.xml"/>
            <x:test successful="true">
               <x:label>report equal-author-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equal-author-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-author-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>object-id-tests</x:label>
         <x:scenario>
            <x:label>object-id-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/object-id-tests/object-id-test-1/pass.xml"/>
            <x:result href="result-d3267.xml"/>
            <x:test successful="true">
               <x:label>not assert object-id-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert object-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>object-id-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/object-id-tests/object-id-test-1/fail.xml"/>
            <x:result href="result-d3276.xml"/>
            <x:test successful="false">
               <x:label>assert object-id-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert object-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>object-id-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/object-id-tests/object-id-test-2/pass.xml"/>
            <x:result href="result-d3285.xml"/>
            <x:test successful="true">
               <x:label>not assert object-id-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert object-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>object-id-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/object-id-tests/object-id-test-2/fail.xml"/>
            <x:result href="result-d3294.xml"/>
            <x:test successful="false">
               <x:label>assert object-id-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert object-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>object-id-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/object-id-tests/object-id-test-3/pass.xml"/>
            <x:result href="result-d3303.xml"/>
            <x:test successful="true">
               <x:label>not report object-id-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert object-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>object-id-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/object-id-tests/object-id-test-3/fail.xml"/>
            <x:result href="result-d3312.xml"/>
            <x:test successful="false">
               <x:label>report object-id-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert object-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'object-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>p-tests</x:label>
         <x:scenario>
            <x:label>p-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-2/pass.xml"/>
            <x:result href="result-d3321.xml"/>
            <x:test successful="true">
               <x:label>not report p-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-2/fail.xml"/>
            <x:result href="result-d3330.xml"/>
            <x:test successful="false">
               <x:label>report p-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-3/pass.xml"/>
            <x:result href="result-d3339.xml"/>
            <x:test successful="true">
               <x:label>not assert p-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-3/fail.xml"/>
            <x:result href="result-d3348.xml"/>
            <x:test successful="false">
               <x:label>assert p-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-5/pass.xml"/>
            <x:result href="result-d3357.xml"/>
            <x:test successful="true">
               <x:label>not report p-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-5/fail.xml"/>
            <x:result href="result-d3366.xml"/>
            <x:test successful="false">
               <x:label>report p-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-6/pass.xml"/>
            <x:result href="result-d3375.xml"/>
            <x:test successful="true">
               <x:label>not report p-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-6/fail.xml"/>
            <x:result href="result-d3384.xml"/>
            <x:test successful="false">
               <x:label>report p-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-7/pass.xml"/>
            <x:result href="result-d3393.xml"/>
            <x:test successful="true">
               <x:label>not report p-test-7 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-tests/p-test-7/fail.xml"/>
            <x:result href="result-d3402.xml"/>
            <x:test successful="false">
               <x:label>report p-test-7 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>p-child-tests</x:label>
         <x:scenario>
            <x:label>allowed-p-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-child-tests/allowed-p-test/pass.xml"/>
            <x:result href="result-d3411.xml"/>
            <x:test successful="true">
               <x:label>not assert allowed-p-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'allowed-p-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>allowed-p-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-child-tests/allowed-p-test/fail.xml"/>
            <x:result href="result-d3420.xml"/>
            <x:test successful="false">
               <x:label>assert allowed-p-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'allowed-p-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>xref-target-tests</x:label>
         <x:scenario>
            <x:label>xref-target-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/xref-target-test/pass.xml"/>
            <x:result href="result-d3429.xml"/>
            <x:test successful="true">
               <x:label>not report xref-target-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-target-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-target-tests/xref-target-test/fail.xml"/>
            <x:result href="result-d3438.xml"/>
            <x:test successful="false">
               <x:label>report xref-target-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert xref-target-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-target-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ext-link-tests</x:label>
         <x:scenario>
            <x:label>broken-uri-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/broken-uri-test/pass.xml"/>
            <x:result href="result-d3447.xml"/>
            <x:test successful="true">
               <x:label>not assert broken-uri-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'broken-uri-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>broken-uri-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/broken-uri-test/fail.xml"/>
            <x:result href="result-d3456.xml"/>
            <x:test successful="true">
               <x:label>assert broken-uri-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'broken-uri-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>url-conformance-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/url-conformance-test/pass.xml"/>
            <x:result href="result-d3465.xml"/>
            <x:test successful="true">
               <x:label>not assert url-conformance-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'url-conformance-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>url-conformance-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/url-conformance-test/fail.xml"/>
            <x:result href="result-d3474.xml"/>
            <x:test successful="true">
               <x:label>assert url-conformance-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'url-conformance-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>url-fullstop-report-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/url-fullstop-report/pass.xml"/>
            <x:result href="result-d3483.xml"/>
            <x:test successful="true">
               <x:label>not report url-fullstop-report error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'url-fullstop-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>url-fullstop-report-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/url-fullstop-report/fail.xml"/>
            <x:result href="result-d3492.xml"/>
            <x:test successful="true">
               <x:label>report url-fullstop-report error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'url-fullstop-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>rrid-number-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/rrid-number-check/pass.xml"/>
            <x:result href="result-d3501.xml"/>
            <x:test successful="true">
               <x:label>not report rrid-number-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-number-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>rrid-number-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/rrid-number-check/fail.xml"/>
            <x:result href="result-d3510.xml"/>
            <x:test successful="true">
               <x:label>report rrid-number-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-number-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ext-link-parent-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/ext-link-parent-test/pass.xml"/>
            <x:result href="result-d3519.xml"/>
            <x:test successful="true">
               <x:label>not report ext-link-parent-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-parent-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ext-link-parent-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/ext-link-parent-test/fail.xml"/>
            <x:result href="result-d3528.xml"/>
            <x:test successful="true">
               <x:label>report ext-link-parent-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-parent-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ext-link-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/ext-link-child-test/pass.xml"/>
            <x:result href="result-d3537.xml"/>
            <x:test successful="true">
               <x:label>not report ext-link-child-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ext-link-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ext-link-tests/ext-link-child-test/fail.xml"/>
            <x:result href="result-d3546.xml"/>
            <x:test successful="true">
               <x:label>report ext-link-child-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ext-link-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ext-link-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-tests</x:label>
         <x:scenario>
            <x:label>fig-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-2/pass.xml"/>
            <x:result href="result-d3555.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-2/fail.xml"/>
            <x:result href="result-d3564.xml"/>
            <x:test successful="false">
               <x:label>assert fig-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-3/pass.xml"/>
            <x:result href="result-d3573.xml"/>
            <x:test successful="true">
               <x:label>not report fig-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-3/fail.xml"/>
            <x:result href="result-d3582.xml"/>
            <x:test successful="false">
               <x:label>report fig-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feat-fig-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/feat-fig-test-3/pass.xml"/>
            <x:result href="result-d3591.xml"/>
            <x:test successful="true">
               <x:label>not report feat-fig-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feat-fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feat-fig-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/feat-fig-test-3/fail.xml"/>
            <x:result href="result-d3600.xml"/>
            <x:test successful="false">
               <x:label>report feat-fig-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feat-fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-4/pass.xml"/>
            <x:result href="result-d3609.xml"/>
            <x:test successful="true">
               <x:label>not report fig-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-4/fail.xml"/>
            <x:result href="result-d3618.xml"/>
            <x:test successful="false">
               <x:label>report fig-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-fig-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/pre-fig-test-5/pass.xml"/>
            <x:result href="result-d3627.xml"/>
            <x:test successful="true">
               <x:label>not report pre-fig-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-fig-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-fig-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/pre-fig-test-5/fail.xml"/>
            <x:result href="result-d3636.xml"/>
            <x:test successful="false">
               <x:label>report pre-fig-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-fig-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-fig-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/final-fig-test-5/pass.xml"/>
            <x:result href="result-d3645.xml"/>
            <x:test successful="true">
               <x:label>not report final-fig-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-fig-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-fig-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/final-fig-test-5/fail.xml"/>
            <x:result href="result-d3654.xml"/>
            <x:test successful="false">
               <x:label>report final-fig-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-fig-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-6/pass.xml"/>
            <x:result href="result-d3663.xml"/>
            <x:test successful="true">
               <x:label>not report fig-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/fig-test-6/fail.xml"/>
            <x:result href="result-d3672.xml"/>
            <x:test successful="false">
               <x:label>report fig-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-fig-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/pre-fig-test-7/pass.xml"/>
            <x:result href="result-d3681.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-fig-test-7 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-fig-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-fig-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/pre-fig-test-7/fail.xml"/>
            <x:result href="result-d3690.xml"/>
            <x:test successful="false">
               <x:label>assert pre-fig-test-7 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-fig-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-fig-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/final-fig-test-7/pass.xml"/>
            <x:result href="result-d3699.xml"/>
            <x:test successful="true">
               <x:label>not assert final-fig-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-fig-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-fig-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-tests/final-fig-test-7/fail.xml"/>
            <x:result href="result-d3708.xml"/>
            <x:test successful="false">
               <x:label>assert final-fig-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-fig-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ar-fig-tests</x:label>
         <x:scenario>
            <x:label>ar-fig-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ar-fig-tests/ar-fig-test-2/pass.xml"/>
            <x:result href="result-d3717.xml"/>
            <x:test successful="true">
               <x:label>not report ar-fig-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ar-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ar-fig-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ar-fig-tests/ar-fig-test-2/fail.xml"/>
            <x:result href="result-d3726.xml"/>
            <x:test successful="true">
               <x:label>report ar-fig-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ar-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-ar-fig-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ar-fig-tests/pre-ar-fig-test-3/pass.xml"/>
            <x:result href="result-d3735.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-ar-fig-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-ar-fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ar-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-ar-fig-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ar-fig-tests/pre-ar-fig-test-3/fail.xml"/>
            <x:result href="result-d3744.xml"/>
            <x:test successful="true">
               <x:label>assert pre-ar-fig-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-ar-fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ar-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-ar-fig-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ar-fig-tests/final-ar-fig-test-3/pass.xml"/>
            <x:result href="result-d3753.xml"/>
            <x:test successful="true">
               <x:label>not assert final-ar-fig-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-ar-fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ar-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-ar-fig-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ar-fig-tests/final-ar-fig-test-3/fail.xml"/>
            <x:result href="result-d3762.xml"/>
            <x:test successful="true">
               <x:label>assert final-ar-fig-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-ar-fig-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ar-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ar-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>graphic-tests</x:label>
         <x:scenario>
            <x:label>graphic-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/graphic-tests/graphic-test-1/pass.xml"/>
            <x:result href="result-d3771.xml"/>
            <x:test successful="true">
               <x:label>not report graphic-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert graphic-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>graphic-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/graphic-tests/graphic-test-1/fail.xml"/>
            <x:result href="result-d3780.xml"/>
            <x:test successful="true">
               <x:label>report graphic-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert graphic-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>graphic-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/graphic-tests/graphic-test-2/pass.xml"/>
            <x:result href="result-d3789.xml"/>
            <x:test successful="true">
               <x:label>not report graphic-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert graphic-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>graphic-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/graphic-tests/graphic-test-2/fail.xml"/>
            <x:result href="result-d3798.xml"/>
            <x:test successful="true">
               <x:label>report graphic-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert graphic-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>graphic-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/graphic-tests/graphic-test-3/pass.xml"/>
            <x:result href="result-d3807.xml"/>
            <x:test successful="true">
               <x:label>not report graphic-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert graphic-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>graphic-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/graphic-tests/graphic-test-3/fail.xml"/>
            <x:result href="result-d3816.xml"/>
            <x:test successful="true">
               <x:label>report graphic-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert graphic-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'graphic-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>media-tests</x:label>
         <x:scenario>
            <x:label>media-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-1/pass.xml"/>
            <x:result href="result-d3825.xml"/>
            <x:test successful="true">
               <x:label>not assert media-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-1/fail.xml"/>
            <x:result href="result-d3834.xml"/>
            <x:test successful="false">
               <x:label>assert media-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-2/pass.xml"/>
            <x:result href="result-d3843.xml"/>
            <x:test successful="true">
               <x:label>not assert media-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-2/fail.xml"/>
            <x:result href="result-d3852.xml"/>
            <x:test successful="false">
               <x:label>assert media-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-3/pass.xml"/>
            <x:result href="result-d3861.xml"/>
            <x:test successful="true">
               <x:label>not assert media-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-3/fail.xml"/>
            <x:result href="result-d3870.xml"/>
            <x:test successful="false">
               <x:label>assert media-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-4/pass.xml"/>
            <x:result href="result-d3879.xml"/>
            <x:test successful="true">
               <x:label>not report media-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-4/fail.xml"/>
            <x:result href="result-d3888.xml"/>
            <x:test successful="false">
               <x:label>report media-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-5/pass.xml"/>
            <x:result href="result-d3897.xml"/>
            <x:test successful="true">
               <x:label>not report media-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-5/fail.xml"/>
            <x:result href="result-d3906.xml"/>
            <x:test successful="false">
               <x:label>report media-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-6/pass.xml"/>
            <x:result href="result-d3915.xml"/>
            <x:test successful="true">
               <x:label>not report media-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-6/fail.xml"/>
            <x:result href="result-d3924.xml"/>
            <x:test successful="false">
               <x:label>report media-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-7/pass.xml"/>
            <x:result href="result-d3933.xml"/>
            <x:test successful="true">
               <x:label>not report media-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-7/fail.xml"/>
            <x:result href="result-d3942.xml"/>
            <x:test successful="false">
               <x:label>report media-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-8/pass.xml"/>
            <x:result href="result-d3951.xml"/>
            <x:test successful="true">
               <x:label>not report media-test-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-8/fail.xml"/>
            <x:result href="result-d3960.xml"/>
            <x:test successful="false">
               <x:label>report media-test-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-9/pass.xml"/>
            <x:result href="result-d3969.xml"/>
            <x:test successful="true">
               <x:label>not report media-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>media-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/media-tests/media-test-9/fail.xml"/>
            <x:result href="result-d3978.xml"/>
            <x:test successful="false">
               <x:label>report media-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert media-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'media-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>video-test</x:label>
         <x:scenario>
            <x:label>pre-video-title-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-test/pre-video-title/pass.xml"/>
            <x:result href="result-d3987.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-video-title warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-video-title'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert video-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-video-title-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-test/pre-video-title/fail.xml"/>
            <x:result href="result-d3996.xml"/>
            <x:test successful="false">
               <x:label>assert pre-video-title warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-video-title'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert video-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-video-title-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-test/final-video-title/pass.xml"/>
            <x:result href="result-d4005.xml"/>
            <x:test successful="true">
               <x:label>not assert final-video-title error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-video-title'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert video-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-video-title-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-test/final-video-title/fail.xml"/>
            <x:result href="result-d4014.xml"/>
            <x:test successful="false">
               <x:label>assert final-video-title error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-video-title'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert video-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>supplementary-material-tests</x:label>
         <x:scenario>
            <x:label>supplementary-material-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-1/pass.xml"/>
            <x:result href="result-d4023.xml"/>
            <x:test successful="true">
               <x:label>not assert supplementary-material-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-1/fail.xml"/>
            <x:result href="result-d4032.xml"/>
            <x:test successful="false">
               <x:label>assert supplementary-material-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-2/pass.xml"/>
            <x:result href="result-d4041.xml"/>
            <x:test successful="true">
               <x:label>not report supplementary-material-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-2/fail.xml"/>
            <x:result href="result-d4050.xml"/>
            <x:test successful="false">
               <x:label>report supplementary-material-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-supplementary-material-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/pre-supplementary-material-test-3/pass.xml"/>
            <x:result href="result-d4059.xml"/>
            <x:test successful="true">
               <x:label>not report pre-supplementary-material-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-supplementary-material-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-supplementary-material-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/pre-supplementary-material-test-3/fail.xml"/>
            <x:result href="result-d4068.xml"/>
            <x:test successful="false">
               <x:label>report pre-supplementary-material-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-supplementary-material-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-supplementary-material-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/final-supplementary-material-test-3/pass.xml"/>
            <x:result href="result-d4077.xml"/>
            <x:test successful="true">
               <x:label>not report final-supplementary-material-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-supplementary-material-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-supplementary-material-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/final-supplementary-material-test-3/fail.xml"/>
            <x:result href="result-d4086.xml"/>
            <x:test successful="false">
               <x:label>report final-supplementary-material-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-supplementary-material-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-5/pass.xml"/>
            <x:result href="result-d4095.xml"/>
            <x:test successful="true">
               <x:label>not assert supplementary-material-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-5/fail.xml"/>
            <x:result href="result-d4104.xml"/>
            <x:test successful="false">
               <x:label>assert supplementary-material-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-6/pass.xml"/>
            <x:result href="result-d4113.xml"/>
            <x:test successful="true">
               <x:label>not assert supplementary-material-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-6/fail.xml"/>
            <x:result href="result-d4122.xml"/>
            <x:test successful="false">
               <x:label>assert supplementary-material-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-7/pass.xml"/>
            <x:result href="result-d4131.xml"/>
            <x:test successful="true">
               <x:label>not report supplementary-material-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-7/fail.xml"/>
            <x:result href="result-d4140.xml"/>
            <x:test successful="false">
               <x:label>report supplementary-material-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-8/pass.xml"/>
            <x:result href="result-d4149.xml"/>
            <x:test successful="true">
               <x:label>not report supplementary-material-test-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-tests/supplementary-material-test-8/fail.xml"/>
            <x:result href="result-d4158.xml"/>
            <x:test successful="false">
               <x:label>report supplementary-material-test-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>source-data-specific-tests</x:label>
         <x:scenario>
            <x:label>fig-data-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/source-data-specific-tests/fig-data-test-1/pass.xml"/>
            <x:result href="result-d4167.xml"/>
            <x:test successful="true">
               <x:label>not report fig-data-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-data-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert source-data-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'source-data-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-data-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/source-data-specific-tests/fig-data-test-1/fail.xml"/>
            <x:result href="result-d4176.xml"/>
            <x:test successful="false">
               <x:label>report fig-data-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-data-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert source-data-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'source-data-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>disp-formula-tests</x:label>
         <x:scenario>
            <x:label>disp-formula-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-formula-tests/disp-formula-test-2/pass.xml"/>
            <x:result href="result-d4185.xml"/>
            <x:test successful="true">
               <x:label>not assert disp-formula-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-formula-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-formula-tests/disp-formula-test-2/fail.xml"/>
            <x:result href="result-d4194.xml"/>
            <x:test successful="true">
               <x:label>assert disp-formula-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>inline-formula-tests</x:label>
         <x:scenario>
            <x:label>inline-formula-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/inline-formula-tests/inline-formula-test-1/pass.xml"/>
            <x:result href="result-d4203.xml"/>
            <x:test successful="true">
               <x:label>not assert inline-formula-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert inline-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/inline-formula-tests/inline-formula-test-1/fail.xml"/>
            <x:result href="result-d4212.xml"/>
            <x:test successful="true">
               <x:label>assert inline-formula-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert inline-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/inline-formula-tests/inline-formula-test-2/pass.xml"/>
            <x:result href="result-d4221.xml"/>
            <x:test successful="true">
               <x:label>not report inline-formula-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert inline-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/inline-formula-tests/inline-formula-test-2/fail.xml"/>
            <x:result href="result-d4230.xml"/>
            <x:test successful="false">
               <x:label>report inline-formula-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert inline-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/inline-formula-tests/inline-formula-test-3/pass.xml"/>
            <x:result href="result-d4239.xml"/>
            <x:test successful="true">
               <x:label>not report inline-formula-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert inline-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/inline-formula-tests/inline-formula-test-3/fail.xml"/>
            <x:result href="result-d4248.xml"/>
            <x:test successful="false">
               <x:label>report inline-formula-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert inline-formula-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>math-tests</x:label>
         <x:scenario>
            <x:label>math-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-1/pass.xml"/>
            <x:result href="result-d4257.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-1/fail.xml"/>
            <x:result href="result-d4266.xml"/>
            <x:test successful="true">
               <x:label>report math-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-2/pass.xml"/>
            <x:result href="result-d4275.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-2/fail.xml"/>
            <x:result href="result-d4284.xml"/>
            <x:test successful="true">
               <x:label>report math-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-14-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-14/pass.xml"/>
            <x:result href="result-d4293.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-14 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-14'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-14-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-14/fail.xml"/>
            <x:result href="result-d4302.xml"/>
            <x:test successful="true">
               <x:label>report math-test-14 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-14'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-3/pass.xml"/>
            <x:result href="result-d4311.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-3/fail.xml"/>
            <x:result href="result-d4320.xml"/>
            <x:test successful="true">
               <x:label>report math-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-4/pass.xml"/>
            <x:result href="result-d4329.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-4/fail.xml"/>
            <x:result href="result-d4338.xml"/>
            <x:test successful="true">
               <x:label>report math-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-5/pass.xml"/>
            <x:result href="result-d4347.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-5/fail.xml"/>
            <x:result href="result-d4356.xml"/>
            <x:test successful="true">
               <x:label>report math-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-6/pass.xml"/>
            <x:result href="result-d4365.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-6/fail.xml"/>
            <x:result href="result-d4374.xml"/>
            <x:test successful="true">
               <x:label>report math-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-7/pass.xml"/>
            <x:result href="result-d4383.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-7/fail.xml"/>
            <x:result href="result-d4392.xml"/>
            <x:test successful="true">
               <x:label>report math-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-8/pass.xml"/>
            <x:result href="result-d4401.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-8 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-8/fail.xml"/>
            <x:result href="result-d4410.xml"/>
            <x:test successful="true">
               <x:label>report math-test-8 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-9/pass.xml"/>
            <x:result href="result-d4419.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-9/fail.xml"/>
            <x:result href="result-d4428.xml"/>
            <x:test successful="true">
               <x:label>report math-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-12-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-12/pass.xml"/>
            <x:result href="result-d4437.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-12 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-12-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-12/fail.xml"/>
            <x:result href="result-d4446.xml"/>
            <x:test successful="true">
               <x:label>report math-test-12 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-10-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-10/pass.xml"/>
            <x:result href="result-d4455.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-10 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-10-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-10/fail.xml"/>
            <x:result href="result-d4464.xml"/>
            <x:test successful="true">
               <x:label>report math-test-10 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-11-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-11/pass.xml"/>
            <x:result href="result-d4473.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-11 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-11-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-11/fail.xml"/>
            <x:result href="result-d4482.xml"/>
            <x:test successful="true">
               <x:label>report math-test-11 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-13/pass.xml"/>
            <x:result href="result-d4491.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-13 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-13/fail.xml"/>
            <x:result href="result-d4500.xml"/>
            <x:test successful="true">
               <x:label>report math-test-13 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-15-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-15/pass.xml"/>
            <x:result href="result-d4509.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-15 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-15-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-15/fail.xml"/>
            <x:result href="result-d4518.xml"/>
            <x:test successful="true">
               <x:label>report math-test-15 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-16-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-16/pass.xml"/>
            <x:result href="result-d4527.xml"/>
            <x:test successful="true">
               <x:label>not report math-test-16 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>math-test-16-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/math-tests/math-test-16/fail.xml"/>
            <x:result href="result-d4536.xml"/>
            <x:test successful="true">
               <x:label>report math-test-16 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-test-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert math-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'math-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>formula-child-tests</x:label>
         <x:scenario>
            <x:label>disp-formula-child-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/formula-child-tests/disp-formula-child-test-1/pass.xml"/>
            <x:result href="result-d4545.xml"/>
            <x:test successful="true">
               <x:label>not report disp-formula-child-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert formula-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'formula-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-formula-child-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/formula-child-tests/disp-formula-child-test-1/fail.xml"/>
            <x:result href="result-d4554.xml"/>
            <x:test successful="false">
               <x:label>report disp-formula-child-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert formula-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'formula-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-child-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/formula-child-tests/inline-formula-child-test-1/pass.xml"/>
            <x:result href="result-d4563.xml"/>
            <x:test successful="true">
               <x:label>not report inline-formula-child-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert formula-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'formula-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>inline-formula-child-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/formula-child-tests/inline-formula-child-test-1/fail.xml"/>
            <x:result href="result-d4572.xml"/>
            <x:test successful="false">
               <x:label>report inline-formula-child-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'inline-formula-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert formula-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'formula-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>table-wrap-tests</x:label>
         <x:scenario>
            <x:label>table-wrap-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-1/pass.xml"/>
            <x:result href="result-d4581.xml"/>
            <x:test successful="true">
               <x:label>not assert table-wrap-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-1/fail.xml"/>
            <x:result href="result-d4590.xml"/>
            <x:test successful="false">
               <x:label>assert table-wrap-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-2/pass.xml"/>
            <x:result href="result-d4599.xml"/>
            <x:test successful="true">
               <x:label>not report table-wrap-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-2/fail.xml"/>
            <x:result href="result-d4608.xml"/>
            <x:test successful="false">
               <x:label>report table-wrap-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-3/pass.xml"/>
            <x:result href="result-d4617.xml"/>
            <x:test successful="true">
               <x:label>not report table-wrap-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-3/fail.xml"/>
            <x:result href="result-d4626.xml"/>
            <x:test successful="false">
               <x:label>report table-wrap-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-4/pass.xml"/>
            <x:result href="result-d4635.xml"/>
            <x:test successful="true">
               <x:label>not report table-wrap-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/table-wrap-test-4/fail.xml"/>
            <x:result href="result-d4644.xml"/>
            <x:test successful="false">
               <x:label>report table-wrap-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kr-table-wrap-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/kr-table-wrap-test-1/pass.xml"/>
            <x:result href="result-d4653.xml"/>
            <x:test successful="true">
               <x:label>not report kr-table-wrap-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kr-table-wrap-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kr-table-wrap-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/kr-table-wrap-test-1/fail.xml"/>
            <x:result href="result-d4662.xml"/>
            <x:test successful="false">
               <x:label>report kr-table-wrap-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kr-table-wrap-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-table-wrap-cite-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/pre-table-wrap-cite-1/pass.xml"/>
            <x:result href="result-d4671.xml"/>
            <x:test successful="true">
               <x:label>not report pre-table-wrap-cite-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-table-wrap-cite-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-table-wrap-cite-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/pre-table-wrap-cite-1/fail.xml"/>
            <x:result href="result-d4680.xml"/>
            <x:test successful="false">
               <x:label>report pre-table-wrap-cite-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-table-wrap-cite-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-table-wrap-cite-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/final-table-wrap-cite-1/pass.xml"/>
            <x:result href="result-d4689.xml"/>
            <x:test successful="true">
               <x:label>not report final-table-wrap-cite-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-table-wrap-cite-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-table-wrap-cite-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/final-table-wrap-cite-1/fail.xml"/>
            <x:result href="result-d4698.xml"/>
            <x:test successful="false">
               <x:label>report final-table-wrap-cite-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-table-wrap-cite-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feat-table-wrap-cite-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/feat-table-wrap-cite-1/pass.xml"/>
            <x:result href="result-d4707.xml"/>
            <x:test successful="true">
               <x:label>not report feat-table-wrap-cite-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feat-table-wrap-cite-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feat-table-wrap-cite-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/feat-table-wrap-cite-1/fail.xml"/>
            <x:result href="result-d4716.xml"/>
            <x:test successful="false">
               <x:label>report feat-table-wrap-cite-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feat-table-wrap-cite-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kr-table-not-tagged-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/kr-table-not-tagged/pass.xml"/>
            <x:result href="result-d4725.xml"/>
            <x:test successful="true">
               <x:label>not report kr-table-not-tagged error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kr-table-not-tagged'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>kr-table-not-tagged-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-tests/kr-table-not-tagged/fail.xml"/>
            <x:result href="result-d4734.xml"/>
            <x:test successful="false">
               <x:label>report kr-table-not-tagged error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'kr-table-not-tagged'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>body-table-label-tests</x:label>
         <x:scenario>
            <x:label>body-table-label-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-table-label-tests/body-table-label-test-1/pass.xml"/>
            <x:result href="result-d4743.xml"/>
            <x:test successful="true">
               <x:label>not assert body-table-label-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-label-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-table-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>body-table-label-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-table-label-tests/body-table-label-test-1/fail.xml"/>
            <x:result href="result-d4752.xml"/>
            <x:test successful="true">
               <x:label>assert body-table-label-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-label-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-table-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-table-label-tests</x:label>
         <x:scenario>
            <x:label>app-table-label-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-label-tests/app-table-label-test-1/pass.xml"/>
            <x:result href="result-d4761.xml"/>
            <x:test successful="true">
               <x:label>not assert app-table-label-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-table-label-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-label-tests/app-table-label-test-1/fail.xml"/>
            <x:result href="result-d4770.xml"/>
            <x:test successful="true">
               <x:label>assert app-table-label-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-table-label-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-label-tests/app-table-label-test-2/pass.xml"/>
            <x:result href="result-d4779.xml"/>
            <x:test successful="true">
               <x:label>not assert app-table-label-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-table-label-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-label-tests/app-table-label-test-2/fail.xml"/>
            <x:result href="result-d4788.xml"/>
            <x:test successful="true">
               <x:label>assert app-table-label-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>table-tests</x:label>
         <x:scenario>
            <x:label>table-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-tests/table-test-1/pass.xml"/>
            <x:result href="result-d4797.xml"/>
            <x:test successful="true">
               <x:label>not report table-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-tests/table-test-1/fail.xml"/>
            <x:result href="result-d4806.xml"/>
            <x:test successful="false">
               <x:label>report table-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-tests/table-test-2/pass.xml"/>
            <x:result href="result-d4815.xml"/>
            <x:test successful="true">
               <x:label>not assert table-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-tests/table-test-2/fail.xml"/>
            <x:result href="result-d4824.xml"/>
            <x:test successful="false">
               <x:label>assert table-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>tbody-tests</x:label>
         <x:scenario>
            <x:label>tbody-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tbody-tests/tbody-test-1/pass.xml"/>
            <x:result href="result-d4833.xml"/>
            <x:test successful="true">
               <x:label>not report tbody-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tbody-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert tbody-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tbody-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tbody-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tbody-tests/tbody-test-1/fail.xml"/>
            <x:result href="result-d4842.xml"/>
            <x:test successful="false">
               <x:label>report tbody-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tbody-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert tbody-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tbody-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>thead-tests</x:label>
         <x:scenario>
            <x:label>thead-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/thead-tests/thead-test-1/pass.xml"/>
            <x:result href="result-d4851.xml"/>
            <x:test successful="true">
               <x:label>not report thead-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'thead-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert thead-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'thead-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>thead-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/thead-tests/thead-test-1/fail.xml"/>
            <x:result href="result-d4860.xml"/>
            <x:test successful="false">
               <x:label>report thead-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'thead-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert thead-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'thead-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>tr-tests</x:label>
         <x:scenario>
            <x:label>tr-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tr-tests/tr-test-1/pass.xml"/>
            <x:result href="result-d4869.xml"/>
            <x:test successful="true">
               <x:label>not report tr-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert tr-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tr-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tr-tests/tr-test-1/fail.xml"/>
            <x:result href="result-d4878.xml"/>
            <x:test successful="false">
               <x:label>report tr-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert tr-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tr-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tr-tests/tr-test-2/pass.xml"/>
            <x:result href="result-d4887.xml"/>
            <x:test successful="true">
               <x:label>not report tr-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert tr-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tr-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tr-tests/tr-test-2/fail.xml"/>
            <x:result href="result-d4896.xml"/>
            <x:test successful="false">
               <x:label>report tr-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert tr-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tr-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tr-tests/tr-test-3/pass.xml"/>
            <x:result href="result-d4905.xml"/>
            <x:test successful="true">
               <x:label>not report tr-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert tr-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tr-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/tr-tests/tr-test-3/fail.xml"/>
            <x:result href="result-d4914.xml"/>
            <x:test successful="false">
               <x:label>report tr-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert tr-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tr-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>td-child-tests</x:label>
         <x:scenario>
            <x:label>td-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/td-child-tests/td-child-test/pass.xml"/>
            <x:result href="result-d4923.xml"/>
            <x:test successful="true">
               <x:label>not assert td-child-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'td-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert td-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'td-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>td-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/td-child-tests/td-child-test/fail.xml"/>
            <x:result href="result-d4932.xml"/>
            <x:test successful="false">
               <x:label>assert td-child-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'td-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert td-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'td-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>th-child-tests</x:label>
         <x:scenario>
            <x:label>th-child-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/th-child-tests/th-child-test-1/pass.xml"/>
            <x:result href="result-d4941.xml"/>
            <x:test successful="true">
               <x:label>not assert th-child-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert th-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>th-child-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/th-child-tests/th-child-test-1/fail.xml"/>
            <x:result href="result-d4950.xml"/>
            <x:test successful="false">
               <x:label>assert th-child-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert th-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>th-child-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/th-child-tests/th-child-test-2/pass.xml"/>
            <x:result href="result-d4959.xml"/>
            <x:test successful="true">
               <x:label>not report th-child-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert th-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>th-child-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/th-child-tests/th-child-test-2/fail.xml"/>
            <x:result href="result-d4968.xml"/>
            <x:test successful="false">
               <x:label>report th-child-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert th-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'th-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fn-tests</x:label>
         <x:scenario>
            <x:label>fn-xref-presence-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fn-tests/fn-xref-presence-test/pass.xml"/>
            <x:result href="result-d4977.xml"/>
            <x:test successful="true">
               <x:label>not assert fn-xref-presence-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-xref-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fn-xref-presence-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fn-tests/fn-xref-presence-test/fail.xml"/>
            <x:result href="result-d4986.xml"/>
            <x:test successful="true">
               <x:label>assert fn-xref-presence-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-xref-presence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>list-item-tests</x:label>
         <x:scenario>
            <x:label>bullet-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/bullet-test-1/pass.xml"/>
            <x:result href="result-d4995.xml"/>
            <x:test successful="true">
               <x:label>not report bullet-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bullet-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bullet-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/bullet-test-1/fail.xml"/>
            <x:result href="result-d5004.xml"/>
            <x:test successful="true">
               <x:label>report bullet-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bullet-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bullet-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/bullet-test-2/pass.xml"/>
            <x:result href="result-d5013.xml"/>
            <x:test successful="true">
               <x:label>not report bullet-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bullet-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bullet-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/bullet-test-2/fail.xml"/>
            <x:result href="result-d5022.xml"/>
            <x:test successful="true">
               <x:label>report bullet-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bullet-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>order-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/order-test-1/pass.xml"/>
            <x:result href="result-d5031.xml"/>
            <x:test successful="true">
               <x:label>not report order-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'order-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>order-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/order-test-1/fail.xml"/>
            <x:result href="result-d5040.xml"/>
            <x:test successful="true">
               <x:label>report order-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'order-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>alpha-lower-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/alpha-lower-test-1/pass.xml"/>
            <x:result href="result-d5049.xml"/>
            <x:test successful="true">
               <x:label>not report alpha-lower-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'alpha-lower-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>alpha-lower-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/alpha-lower-test-1/fail.xml"/>
            <x:result href="result-d5058.xml"/>
            <x:test successful="true">
               <x:label>report alpha-lower-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'alpha-lower-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>alpha-upper-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/alpha-upper-test-1/pass.xml"/>
            <x:result href="result-d5067.xml"/>
            <x:test successful="true">
               <x:label>not report alpha-upper-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'alpha-upper-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>alpha-upper-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/alpha-upper-test-1/fail.xml"/>
            <x:result href="result-d5076.xml"/>
            <x:test successful="true">
               <x:label>report alpha-upper-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'alpha-upper-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>roman-lower-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/roman-lower-test-1/pass.xml"/>
            <x:result href="result-d5085.xml"/>
            <x:test successful="true">
               <x:label>not report roman-lower-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'roman-lower-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>roman-lower-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/roman-lower-test-1/fail.xml"/>
            <x:result href="result-d5094.xml"/>
            <x:test successful="true">
               <x:label>report roman-lower-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'roman-lower-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>roman-upper-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/roman-upper-test-1/pass.xml"/>
            <x:result href="result-d5103.xml"/>
            <x:test successful="true">
               <x:label>not report roman-upper-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'roman-upper-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>roman-upper-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/roman-upper-test-1/fail.xml"/>
            <x:result href="result-d5112.xml"/>
            <x:test successful="true">
               <x:label>report roman-upper-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'roman-upper-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-1/pass.xml"/>
            <x:result href="result-d5121.xml"/>
            <x:test successful="true">
               <x:label>not report simple-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-1/fail.xml"/>
            <x:result href="result-d5130.xml"/>
            <x:test successful="true">
               <x:label>report simple-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-2/pass.xml"/>
            <x:result href="result-d5139.xml"/>
            <x:test successful="true">
               <x:label>not report simple-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-2/fail.xml"/>
            <x:result href="result-d5148.xml"/>
            <x:test successful="true">
               <x:label>report simple-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-3/pass.xml"/>
            <x:result href="result-d5157.xml"/>
            <x:test successful="true">
               <x:label>not report simple-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-3/fail.xml"/>
            <x:result href="result-d5166.xml"/>
            <x:test successful="true">
               <x:label>report simple-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-4/pass.xml"/>
            <x:result href="result-d5175.xml"/>
            <x:test successful="true">
               <x:label>not report simple-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-4/fail.xml"/>
            <x:result href="result-d5184.xml"/>
            <x:test successful="true">
               <x:label>report simple-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-5/pass.xml"/>
            <x:result href="result-d5193.xml"/>
            <x:test successful="true">
               <x:label>not report simple-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>simple-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/simple-test-5/fail.xml"/>
            <x:result href="result-d5202.xml"/>
            <x:test successful="true">
               <x:label>report simple-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'simple-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>list-item-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/list-item-test-1/pass.xml"/>
            <x:result href="result-d5211.xml"/>
            <x:test successful="true">
               <x:label>not report list-item-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>list-item-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-item-tests/list-item-test-1/fail.xml"/>
            <x:result href="result-d5220.xml"/>
            <x:test successful="true">
               <x:label>report list-item-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-item-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-item-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>general-video</x:label>
         <x:scenario>
            <x:label>pre-video-cite-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/pre-video-cite/pass.xml"/>
            <x:result href="result-d5229.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-video-cite warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-video-cite'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-video-cite-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/pre-video-cite/fail.xml"/>
            <x:result href="result-d5238.xml"/>
            <x:test successful="true">
               <x:label>assert pre-video-cite warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-video-cite'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-video-cite-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/final-video-cite/pass.xml"/>
            <x:result href="result-d5247.xml"/>
            <x:test successful="true">
               <x:label>not assert final-video-cite error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-video-cite'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-video-cite-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/final-video-cite/fail.xml"/>
            <x:result href="result-d5256.xml"/>
            <x:test successful="true">
               <x:label>assert final-video-cite error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-video-cite'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-placement-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/video-placement-1/pass.xml"/>
            <x:result href="result-d5265.xml"/>
            <x:test successful="true">
               <x:label>not report video-placement-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-placement-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-placement-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/video-placement-1/fail.xml"/>
            <x:result href="result-d5274.xml"/>
            <x:test successful="true">
               <x:label>report video-placement-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-placement-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-placement-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/video-placement-2/pass.xml"/>
            <x:result href="result-d5283.xml"/>
            <x:test successful="true">
               <x:label>not report video-placement-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-placement-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-placement-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/video-placement-2/fail.xml"/>
            <x:result href="result-d5292.xml"/>
            <x:test successful="true">
               <x:label>report video-placement-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-placement-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-placement-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/video-placement-3/pass.xml"/>
            <x:result href="result-d5301.xml"/>
            <x:test successful="true">
               <x:label>not report video-placement-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-placement-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-placement-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/general-video/video-placement-3/fail.xml"/>
            <x:result href="result-d5310.xml"/>
            <x:test successful="true">
               <x:label>report video-placement-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-placement-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert general-video-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'general-video-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>body-video-specific</x:label>
         <x:scenario>
            <x:label>body-video-position-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/body-video-position-test-1/pass.xml"/>
            <x:result href="result-d5319.xml"/>
            <x:test successful="true">
               <x:label>not report body-video-position-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-position-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>body-video-position-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/body-video-position-test-1/fail.xml"/>
            <x:result href="result-d5328.xml"/>
            <x:test successful="true">
               <x:label>report body-video-position-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-position-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-video-label-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/fig-video-label-test/pass.xml"/>
            <x:result href="result-d5337.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-video-label-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-video-label-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-video-label-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/fig-video-label-test/fail.xml"/>
            <x:result href="result-d5346.xml"/>
            <x:test successful="true">
               <x:label>assert fig-video-label-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-video-label-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-video-position-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/fig-video-position-test/pass.xml"/>
            <x:result href="result-d5355.xml"/>
            <x:test successful="true">
               <x:label>not report fig-video-position-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-video-position-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-video-position-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/fig-video-position-test/fail.xml"/>
            <x:result href="result-d5364.xml"/>
            <x:test successful="true">
               <x:label>report fig-video-position-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-video-position-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-video-check-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/fig-video-check-1/pass.xml"/>
            <x:result href="result-d5373.xml"/>
            <x:test successful="true">
               <x:label>not report fig-video-check-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-video-check-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-video-check-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-video-specific/fig-video-check-1/fail.xml"/>
            <x:result href="result-d5382.xml"/>
            <x:test successful="true">
               <x:label>report fig-video-check-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-video-check-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-video-specific-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-video-specific-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>body-table-pos-conformance</x:label>
         <x:scenario>
            <x:label>pre-body-table-report-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-table-pos-conformance/pre-body-table-report/pass.xml"/>
            <x:result href="result-d5391.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-body-table-report warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-body-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-body-table-report-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-table-pos-conformance/pre-body-table-report/fail.xml"/>
            <x:result href="result-d5400.xml"/>
            <x:test successful="true">
               <x:label>assert pre-body-table-report warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-body-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-body-table-report-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-table-pos-conformance/final-body-table-report/pass.xml"/>
            <x:result href="result-d5409.xml"/>
            <x:test successful="true">
               <x:label>not assert final-body-table-report error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-body-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-body-table-report-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-table-pos-conformance/final-body-table-report/fail.xml"/>
            <x:result href="result-d5418.xml"/>
            <x:test successful="true">
               <x:label>assert final-body-table-report error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-body-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-table-pos-conformance</x:label>
         <x:scenario>
            <x:label>pre-app-table-report-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-pos-conformance/pre-app-table-report/pass.xml"/>
            <x:result href="result-d5427.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-app-table-report warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-app-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-app-table-report-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-pos-conformance/pre-app-table-report/fail.xml"/>
            <x:result href="result-d5436.xml"/>
            <x:test successful="true">
               <x:label>assert pre-app-table-report warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-app-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-app-table-report-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-pos-conformance/final-app-table-report/pass.xml"/>
            <x:result href="result-d5445.xml"/>
            <x:test successful="true">
               <x:label>not assert final-app-table-report error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-app-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-app-table-report-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-pos-conformance/final-app-table-report/fail.xml"/>
            <x:result href="result-d5454.xml"/>
            <x:test successful="true">
               <x:label>assert final-app-table-report error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-app-table-report'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-pos-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-pos-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-specific-tests</x:label>
         <x:scenario>
            <x:label>fig-specific-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-1/pass.xml"/>
            <x:result href="result-d5463.xml"/>
            <x:test successful="true">
               <x:label>not report fig-specific-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-1/fail.xml"/>
            <x:result href="result-d5472.xml"/>
            <x:test successful="true">
               <x:label>report fig-specific-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-2/pass.xml"/>
            <x:result href="result-d5481.xml"/>
            <x:test successful="true">
               <x:label>not report fig-specific-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-2/fail.xml"/>
            <x:result href="result-d5490.xml"/>
            <x:test successful="true">
               <x:label>report fig-specific-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-3/pass.xml"/>
            <x:result href="result-d5499.xml"/>
            <x:test successful="true">
               <x:label>not report fig-specific-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-3/fail.xml"/>
            <x:result href="result-d5508.xml"/>
            <x:test successful="true">
               <x:label>report fig-specific-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-fig-specific-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/pre-fig-specific-test-4/pass.xml"/>
            <x:result href="result-d5517.xml"/>
            <x:test successful="true">
               <x:label>not report pre-fig-specific-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-fig-specific-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/pre-fig-specific-test-4/fail.xml"/>
            <x:result href="result-d5526.xml"/>
            <x:test successful="true">
               <x:label>report pre-fig-specific-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-fig-specific-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/final-fig-specific-test-4/pass.xml"/>
            <x:result href="result-d5535.xml"/>
            <x:test successful="true">
               <x:label>not report final-fig-specific-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-fig-specific-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/final-fig-specific-test-4/fail.xml"/>
            <x:result href="result-d5544.xml"/>
            <x:test successful="true">
               <x:label>report final-fig-specific-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feat-fig-specific-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/feat-fig-specific-test-4/pass.xml"/>
            <x:result href="result-d5553.xml"/>
            <x:test successful="true">
               <x:label>not report feat-fig-specific-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feat-fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feat-fig-specific-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/feat-fig-specific-test-4/fail.xml"/>
            <x:result href="result-d5562.xml"/>
            <x:test successful="true">
               <x:label>report feat-fig-specific-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feat-fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-4/pass.xml"/>
            <x:result href="result-d5571.xml"/>
            <x:test successful="true">
               <x:label>not report fig-specific-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-4/fail.xml"/>
            <x:result href="result-d5580.xml"/>
            <x:test successful="false">
               <x:label>report fig-specific-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-5/pass.xml"/>
            <x:result href="result-d5589.xml"/>
            <x:test successful="true">
               <x:label>not report fig-specific-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-specific-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-specific-tests/fig-specific-test-5/fail.xml"/>
            <x:result href="result-d5598.xml"/>
            <x:test successful="true">
               <x:label>report fig-specific-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-specific-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-specific-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-label-tests</x:label>
         <x:scenario>
            <x:label>fig-label-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-label-tests/fig-label-test-1/pass.xml"/>
            <x:result href="result-d5607.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-label-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-label-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-label-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-label-tests/fig-label-test-1/fail.xml"/>
            <x:result href="result-d5616.xml"/>
            <x:test successful="true">
               <x:label>assert fig-label-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-label-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-label-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-label-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-sup-tests</x:label>
         <x:scenario>
            <x:label>fig-sup-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-1/pass.xml"/>
            <x:result href="result-d5625.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-sup-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-1/fail.xml"/>
            <x:result href="result-d5634.xml"/>
            <x:test successful="false">
               <x:label>assert fig-sup-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-2/pass.xml"/>
            <x:result href="result-d5643.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-sup-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-2/fail.xml"/>
            <x:result href="result-d5652.xml"/>
            <x:test successful="false">
               <x:label>assert fig-sup-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-3/pass.xml"/>
            <x:result href="result-d5661.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-sup-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-3/fail.xml"/>
            <x:result href="result-d5670.xml"/>
            <x:test successful="false">
               <x:label>assert fig-sup-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-4/pass.xml"/>
            <x:result href="result-d5679.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-sup-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-tests/fig-sup-test-4/fail.xml"/>
            <x:result href="result-d5688.xml"/>
            <x:test successful="false">
               <x:label>assert fig-sup-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>rep-fig-tests</x:label>
         <x:scenario>
            <x:label>resp-fig-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-tests/resp-fig-test-2/pass.xml"/>
            <x:result href="result-d5697.xml"/>
            <x:test successful="true">
               <x:label>not assert resp-fig-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rep-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>resp-fig-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-tests/resp-fig-test-2/fail.xml"/>
            <x:result href="result-d5706.xml"/>
            <x:test successful="false">
               <x:label>assert resp-fig-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rep-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-fig-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-tests/reply-fig-test-2/pass.xml"/>
            <x:result href="result-d5715.xml"/>
            <x:test successful="true">
               <x:label>not assert reply-fig-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rep-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-fig-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-tests/reply-fig-test-2/fail.xml"/>
            <x:result href="result-d5724.xml"/>
            <x:test successful="false">
               <x:label>assert reply-fig-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rep-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>box-fig-tests</x:label>
         <x:scenario>
            <x:label>box-fig-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/box-fig-tests/box-fig-test-1/pass.xml"/>
            <x:result href="result-d5733.xml"/>
            <x:test successful="true">
               <x:label>not assert box-fig-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert box-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>box-fig-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/box-fig-tests/box-fig-test-1/fail.xml"/>
            <x:result href="result-d5742.xml"/>
            <x:test successful="true">
               <x:label>assert box-fig-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert box-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-fig-tests</x:label>
         <x:scenario>
            <x:label>app-fig-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-tests/app-fig-test-1/pass.xml"/>
            <x:result href="result-d5751.xml"/>
            <x:test successful="true">
               <x:label>not assert app-fig-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-tests/app-fig-test-1/fail.xml"/>
            <x:result href="result-d5760.xml"/>
            <x:test successful="true">
               <x:label>assert app-fig-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-tests/app-fig-test-2/pass.xml"/>
            <x:result href="result-d5769.xml"/>
            <x:test successful="true">
               <x:label>not report app-fig-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-tests/app-fig-test-2/fail.xml"/>
            <x:result href="result-d5778.xml"/>
            <x:test successful="true">
               <x:label>report app-fig-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-fig-sup-tests</x:label>
         <x:scenario>
            <x:label>app-fig-sup-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-sup-tests/app-fig-sup-test-1/pass.xml"/>
            <x:result href="result-d5787.xml"/>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-sup-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-sup-tests/app-fig-sup-test-1/fail.xml"/>
            <x:result href="result-d5796.xml"/>
            <x:test successful="true">
               <x:label>assert app-fig-sup-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-sup-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-sup-tests/app-fig-sup-test-2/pass.xml"/>
            <x:result href="result-d5805.xml"/>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-sup-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-sup-tests/app-fig-sup-test-2/fail.xml"/>
            <x:result href="result-d5814.xml"/>
            <x:test successful="true">
               <x:label>assert app-fig-sup-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ra-body-tests</x:label>
         <x:scenario>
            <x:label>ra-sec-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-1/pass.xml"/>
            <x:result href="result-d5823.xml"/>
            <x:test successful="true">
               <x:label>not report ra-sec-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-1/fail.xml"/>
            <x:result href="result-d5832.xml"/>
            <x:test successful="false">
               <x:label>report ra-sec-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-2/pass.xml"/>
            <x:result href="result-d5841.xml"/>
            <x:test successful="true">
               <x:label>not report ra-sec-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-2/fail.xml"/>
            <x:result href="result-d5850.xml"/>
            <x:test successful="false">
               <x:label>report ra-sec-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-3/pass.xml"/>
            <x:result href="result-d5859.xml"/>
            <x:test successful="true">
               <x:label>not report ra-sec-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-3/fail.xml"/>
            <x:result href="result-d5868.xml"/>
            <x:test successful="false">
               <x:label>report ra-sec-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-4/pass.xml"/>
            <x:result href="result-d5877.xml"/>
            <x:test successful="true">
               <x:label>not report ra-sec-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ra-sec-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ra-body-tests/ra-sec-test-4/fail.xml"/>
            <x:result href="result-d5886.xml"/>
            <x:test successful="false">
               <x:label>report ra-sec-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-sec-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ra-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ra-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>top-level-sec-tests</x:label>
         <x:scenario>
            <x:label>top-sec-id-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/top-level-sec-tests/top-sec-id/pass.xml"/>
            <x:result href="result-d5895.xml"/>
            <x:test successful="true">
               <x:label>not assert top-sec-id error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'top-sec-id'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert top-level-sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'top-level-sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>top-sec-id-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/top-level-sec-tests/top-sec-id/fail.xml"/>
            <x:result href="result-d5904.xml"/>
            <x:test successful="false">
               <x:label>assert top-sec-id error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'top-sec-id'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert top-level-sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'top-level-sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/top-level-sec-tests/sec-conformity/pass.xml"/>
            <x:result href="result-d5913.xml"/>
            <x:test successful="true">
               <x:label>not report sec-conformity warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert top-level-sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'top-level-sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/top-level-sec-tests/sec-conformity/fail.xml"/>
            <x:result href="result-d5922.xml"/>
            <x:test successful="false">
               <x:label>report sec-conformity warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert top-level-sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'top-level-sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>lower-level-sec-tests</x:label>
         <x:scenario>
            <x:label>lower-sec-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/lower-level-sec-tests/lower-sec-test-1/pass.xml"/>
            <x:result href="result-d5931.xml"/>
            <x:test successful="true">
               <x:label>not assert lower-sec-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'lower-sec-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert lower-level-sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'lower-level-sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>lower-sec-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/lower-level-sec-tests/lower-sec-test-1/fail.xml"/>
            <x:result href="result-d5940.xml"/>
            <x:test successful="true">
               <x:label>assert lower-sec-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'lower-sec-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert lower-level-sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'lower-level-sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>article-title-tests</x:label>
         <x:scenario>
            <x:label>article-type-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/article-type-title-test-1/pass.xml"/>
            <x:result href="result-d5949.xml"/>
            <x:test successful="true">
               <x:label>not report article-type-title-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-type-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-type-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/article-type-title-test-1/fail.xml"/>
            <x:result href="result-d5958.xml"/>
            <x:test successful="true">
               <x:label>report article-type-title-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-type-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-type-title-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/article-type-title-test-2/pass.xml"/>
            <x:result href="result-d5967.xml"/>
            <x:test successful="true">
               <x:label>not report article-type-title-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-type-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-type-title-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/article-type-title-test-2/fail.xml"/>
            <x:result href="result-d5976.xml"/>
            <x:test successful="true">
               <x:label>report article-type-title-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-type-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sc-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/sc-title-test-1/pass.xml"/>
            <x:result href="result-d5985.xml"/>
            <x:test successful="true">
               <x:label>not report sc-title-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sc-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sc-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/sc-title-test-1/fail.xml"/>
            <x:result href="result-d5994.xml"/>
            <x:test successful="true">
               <x:label>report sc-title-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sc-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sc-title-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/sc-title-test-2/pass.xml"/>
            <x:result href="result-d6003.xml"/>
            <x:test successful="true">
               <x:label>not report sc-title-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sc-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sc-title-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/article-title-tests/sc-title-test-2/fail.xml"/>
            <x:result href="result-d6012.xml"/>
            <x:test successful="true">
               <x:label>report sc-title-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sc-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>sec-title-tests</x:label>
         <x:scenario>
            <x:label>sec-type-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-tests/sec-type-title-test/pass.xml"/>
            <x:result href="result-d6021.xml"/>
            <x:test successful="true">
               <x:label>not report sec-type-title-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-type-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert sec-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-type-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-tests/sec-type-title-test/fail.xml"/>
            <x:result href="result-d6030.xml"/>
            <x:test successful="false">
               <x:label>report sec-type-title-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-type-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert sec-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-title-tests</x:label>
         <x:scenario>
            <x:label>fig-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-1/pass.xml"/>
            <x:result href="result-d6039.xml"/>
            <x:test successful="true">
               <x:label>not report fig-title-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-1/fail.xml"/>
            <x:result href="result-d6048.xml"/>
            <x:test successful="false">
               <x:label>report fig-title-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-2/pass.xml"/>
            <x:result href="result-d6057.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-title-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-2/fail.xml"/>
            <x:result href="result-d6066.xml"/>
            <x:test successful="false">
               <x:label>assert fig-title-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-3/pass.xml"/>
            <x:result href="result-d6075.xml"/>
            <x:test successful="true">
               <x:label>not report fig-title-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-3/fail.xml"/>
            <x:result href="result-d6084.xml"/>
            <x:test successful="false">
               <x:label>report fig-title-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-4/pass.xml"/>
            <x:result href="result-d6093.xml"/>
            <x:test successful="true">
               <x:label>not report fig-title-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-4/fail.xml"/>
            <x:result href="result-d6102.xml"/>
            <x:test successful="false">
               <x:label>report fig-title-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-5/pass.xml"/>
            <x:result href="result-d6111.xml"/>
            <x:test successful="true">
               <x:label>not report fig-title-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-title-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-title-tests/fig-title-test-5/fail.xml"/>
            <x:result href="result-d6120.xml"/>
            <x:test successful="false">
               <x:label>report fig-title-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>supplementary-material-title-tests</x:label>
         <x:scenario>
            <x:label>supplementary-material-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-1/pass.xml"/>
            <x:result href="result-d6129.xml"/>
            <x:test successful="true">
               <x:label>not report supplementary-material-title-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-1/fail.xml"/>
            <x:result href="result-d6138.xml"/>
            <x:test successful="false">
               <x:label>report supplementary-material-title-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-2/pass.xml"/>
            <x:result href="result-d6147.xml"/>
            <x:test successful="true">
               <x:label>not assert supplementary-material-title-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-2/fail.xml"/>
            <x:result href="result-d6156.xml"/>
            <x:test successful="false">
               <x:label>assert supplementary-material-title-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-3/pass.xml"/>
            <x:result href="result-d6165.xml"/>
            <x:test successful="true">
               <x:label>not report supplementary-material-title-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-3/fail.xml"/>
            <x:result href="result-d6174.xml"/>
            <x:test successful="false">
               <x:label>report supplementary-material-title-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-4/pass.xml"/>
            <x:result href="result-d6183.xml"/>
            <x:test successful="true">
               <x:label>not report supplementary-material-title-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementary-material-title-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supplementary-material-title-tests/supplementary-material-title-test-4/fail.xml"/>
            <x:result href="result-d6192.xml"/>
            <x:test successful="false">
               <x:label>report supplementary-material-title-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supplementary-material-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementary-material-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>video-title-tests</x:label>
         <x:scenario>
            <x:label>video-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-1/pass.xml"/>
            <x:result href="result-d6201.xml"/>
            <x:test successful="true">
               <x:label>not report video-title-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-1/fail.xml"/>
            <x:result href="result-d6210.xml"/>
            <x:test successful="false">
               <x:label>report video-title-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-2/pass.xml"/>
            <x:result href="result-d6219.xml"/>
            <x:test successful="true">
               <x:label>not assert video-title-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-2/fail.xml"/>
            <x:result href="result-d6228.xml"/>
            <x:test successful="false">
               <x:label>assert video-title-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-3/pass.xml"/>
            <x:result href="result-d6237.xml"/>
            <x:test successful="true">
               <x:label>not report video-title-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-3/fail.xml"/>
            <x:result href="result-d6246.xml"/>
            <x:test successful="false">
               <x:label>report video-title-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-4/pass.xml"/>
            <x:result href="result-d6255.xml"/>
            <x:test successful="true">
               <x:label>not report video-title-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>video-title-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/video-title-tests/video-title-test-4/fail.xml"/>
            <x:result href="result-d6264.xml"/>
            <x:test successful="false">
               <x:label>report video-title-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert video-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'video-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ack-title-tests</x:label>
         <x:scenario>
            <x:label>ack-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-title-tests/ack-title-test/pass.xml"/>
            <x:result href="result-d6273.xml"/>
            <x:test successful="true">
               <x:label>not assert ack-title-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ack-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-title-tests/ack-title-test/fail.xml"/>
            <x:result href="result-d6282.xml"/>
            <x:test successful="true">
               <x:label>assert ack-title-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ack-content-tests</x:label>
         <x:scenario>
            <x:label>ack-full-stop-intial-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-content-tests/ack-full-stop-intial-test/pass.xml"/>
            <x:result href="result-d6291.xml"/>
            <x:test successful="true">
               <x:label>not report ack-full-stop-intial-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-full-stop-intial-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-content-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-content-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ack-full-stop-intial-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-content-tests/ack-full-stop-intial-test/fail.xml"/>
            <x:result href="result-d6300.xml"/>
            <x:test successful="true">
               <x:label>report ack-full-stop-intial-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-full-stop-intial-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-content-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-content-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref-list-title-tests</x:label>
         <x:scenario>
            <x:label>ref-list-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-list-title-tests/ref-list-title-test/pass.xml"/>
            <x:result href="result-d6309.xml"/>
            <x:test successful="true">
               <x:label>not assert ref-list-title-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-list-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-list-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-list-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-list-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-list-title-tests/ref-list-title-test/fail.xml"/>
            <x:result href="result-d6318.xml"/>
            <x:test successful="false">
               <x:label>assert ref-list-title-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-list-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-list-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-list-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-title-tests</x:label>
         <x:scenario>
            <x:label>app-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-title-tests/app-title-test/pass.xml"/>
            <x:result href="result-d6327.xml"/>
            <x:test successful="true">
               <x:label>not assert app-title-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-title-tests/app-title-test/fail.xml"/>
            <x:result href="result-d6336.xml"/>
            <x:test successful="true">
               <x:label>assert app-title-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>comp-int-title-tests</x:label>
         <x:scenario>
            <x:label>comp-int-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-title-tests/comp-int-title-test/pass.xml"/>
            <x:result href="result-d6345.xml"/>
            <x:test successful="true">
               <x:label>not assert comp-int-title-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>comp-int-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-title-tests/comp-int-title-test/fail.xml"/>
            <x:result href="result-d6354.xml"/>
            <x:test successful="true">
               <x:label>assert comp-int-title-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>auth-cont-title-tests</x:label>
         <x:scenario>
            <x:label>auth-cont-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-cont-title-tests/auth-cont-title-test/pass.xml"/>
            <x:result href="result-d6363.xml"/>
            <x:test successful="true">
               <x:label>not assert auth-cont-title-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-cont-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>auth-cont-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-cont-title-tests/auth-cont-title-test/fail.xml"/>
            <x:result href="result-d6372.xml"/>
            <x:test successful="true">
               <x:label>assert auth-cont-title-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-cont-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ethics-title-tests</x:label>
         <x:scenario>
            <x:label>ethics-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-title-tests/ethics-title-test/pass.xml"/>
            <x:result href="result-d6381.xml"/>
            <x:test successful="true">
               <x:label>not assert ethics-title-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-title-tests/ethics-title-test/fail.xml"/>
            <x:result href="result-d6390.xml"/>
            <x:test successful="true">
               <x:label>assert ethics-title-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>dec-letter-title-tests</x:label>
         <x:scenario>
            <x:label>dec-letter-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-title-tests/dec-letter-title-test/pass.xml"/>
            <x:result href="result-d6399.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-title-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-title-tests/dec-letter-title-test/fail.xml"/>
            <x:result href="result-d6408.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-title-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>reply-title-tests</x:label>
         <x:scenario>
            <x:label>reply-title-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-title-tests/reply-title-test/pass.xml"/>
            <x:result href="result-d6417.xml"/>
            <x:test successful="true">
               <x:label>not assert reply-title-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert reply-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-title-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-title-tests/reply-title-test/fail.xml"/>
            <x:result href="result-d6426.xml"/>
            <x:test successful="false">
               <x:label>assert reply-title-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-title-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert reply-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>author-contrib-ids</x:label>
         <x:scenario>
            <x:label>author-id-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/author-contrib-ids/author-id-1/pass.xml"/>
            <x:result href="result-d6435.xml"/>
            <x:test successful="true">
               <x:label>not report author-id-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-id-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert author-contrib-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-contrib-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-id-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/author-contrib-ids/author-id-1/fail.xml"/>
            <x:result href="result-d6444.xml"/>
            <x:test successful="true">
               <x:label>report author-id-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-id-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert author-contrib-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-contrib-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>award-group-ids</x:label>
         <x:scenario>
            <x:label>award-group-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-ids/award-group-test-1/pass.xml"/>
            <x:result href="result-d6453.xml"/>
            <x:test successful="true">
               <x:label>not assert award-group-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>award-group-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/award-group-ids/award-group-test-1/fail.xml"/>
            <x:result href="result-d6462.xml"/>
            <x:test successful="true">
               <x:label>assert award-group-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert award-group-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'award-group-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-ids</x:label>
         <x:scenario>
            <x:label>fig-id-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-1/pass.xml"/>
            <x:result href="result-d6471.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-id-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-1/fail.xml"/>
            <x:result href="result-d6480.xml"/>
            <x:test successful="true">
               <x:label>assert fig-id-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-2/pass.xml"/>
            <x:result href="result-d6489.xml"/>
            <x:test successful="true">
               <x:label>not report fig-id-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-2/fail.xml"/>
            <x:result href="result-d6498.xml"/>
            <x:test successful="true">
               <x:label>report fig-id-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-3/pass.xml"/>
            <x:result href="result-d6507.xml"/>
            <x:test successful="true">
               <x:label>not report fig-id-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-3/fail.xml"/>
            <x:result href="result-d6516.xml"/>
            <x:test successful="true">
               <x:label>report fig-id-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-4/pass.xml"/>
            <x:result href="result-d6525.xml"/>
            <x:test successful="true">
               <x:label>not report fig-id-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-id-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-ids/fig-id-test-4/fail.xml"/>
            <x:result href="result-d6534.xml"/>
            <x:test successful="true">
               <x:label>report fig-id-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-id-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-sup-ids</x:label>
         <x:scenario>
            <x:label>fig-sup-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-ids/fig-sup-id-test/pass.xml"/>
            <x:result href="result-d6543.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-sup-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-sup-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-sup-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-sup-ids/fig-sup-id-test/fail.xml"/>
            <x:result href="result-d6552.xml"/>
            <x:test successful="false">
               <x:label>assert fig-sup-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-sup-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-sup-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>box-fig-ids</x:label>
         <x:scenario>
            <x:label>box-fig-id-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/box-fig-ids/box-fig-id-1/pass.xml"/>
            <x:result href="result-d6561.xml"/>
            <x:test successful="true">
               <x:label>not assert box-fig-id-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-id-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert box-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>box-fig-id-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/box-fig-ids/box-fig-id-1/fail.xml"/>
            <x:result href="result-d6570.xml"/>
            <x:test successful="true">
               <x:label>assert box-fig-id-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-id-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert box-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>box-fig-id-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/box-fig-ids/box-fig-id-2/pass.xml"/>
            <x:result href="result-d6579.xml"/>
            <x:test successful="true">
               <x:label>not assert box-fig-id-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-id-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert box-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>box-fig-id-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/box-fig-ids/box-fig-id-2/fail.xml"/>
            <x:result href="result-d6588.xml"/>
            <x:test successful="true">
               <x:label>assert box-fig-id-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-id-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert box-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'box-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-fig-ids</x:label>
         <x:scenario>
            <x:label>app-fig-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-ids/app-fig-id-test/pass.xml"/>
            <x:result href="result-d6597.xml"/>
            <x:test successful="true">
               <x:label>not assert app-fig-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-ids/app-fig-id-test/fail.xml"/>
            <x:result href="result-d6606.xml"/>
            <x:test successful="true">
               <x:label>assert app-fig-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-fig-sup-ids</x:label>
         <x:scenario>
            <x:label>app-fig-sup-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-sup-ids/app-fig-sup-id-test/pass.xml"/>
            <x:result href="result-d6615.xml"/>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-fig-sup-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-fig-sup-ids/app-fig-sup-id-test/fail.xml"/>
            <x:result href="result-d6624.xml"/>
            <x:test successful="true">
               <x:label>assert app-fig-sup-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-fig-sup-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-fig-sup-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>rep-fig-ids</x:label>
         <x:scenario>
            <x:label>resp-fig-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-ids/resp-fig-id-test/pass.xml"/>
            <x:result href="result-d6633.xml"/>
            <x:test successful="true">
               <x:label>not assert resp-fig-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-fig-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rep-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>resp-fig-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-ids/resp-fig-id-test/fail.xml"/>
            <x:result href="result-d6642.xml"/>
            <x:test successful="false">
               <x:label>assert resp-fig-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-fig-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rep-fig-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>rep-fig-sup-ids</x:label>
         <x:scenario>
            <x:label>resp-fig-sup-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-sup-ids/resp-fig-sup-id-test/pass.xml"/>
            <x:result href="result-d6651.xml"/>
            <x:test successful="true">
               <x:label>not assert resp-fig-sup-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-fig-sup-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rep-fig-sup-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-sup-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>resp-fig-sup-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rep-fig-sup-ids/resp-fig-sup-id-test/fail.xml"/>
            <x:result href="result-d6660.xml"/>
            <x:test successful="false">
               <x:label>assert resp-fig-sup-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-fig-sup-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rep-fig-sup-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rep-fig-sup-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>related-articles-ids</x:label>
         <x:scenario>
            <x:label>related-articles-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-ids/related-articles-test-7/pass.xml"/>
            <x:result href="result-d6669.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert related-articles-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-ids/related-articles-test-7/fail.xml"/>
            <x:result href="result-d6678.xml"/>
            <x:test successful="false">
               <x:label>assert related-articles-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert related-articles-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>aff-ids</x:label>
         <x:scenario>
            <x:label>aff-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/aff-ids/aff-id-test/pass.xml"/>
            <x:result href="result-d6687.xml"/>
            <x:test successful="true">
               <x:label>not assert aff-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert aff-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>aff-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/aff-ids/aff-id-test/fail.xml"/>
            <x:result href="result-d6696.xml"/>
            <x:test successful="true">
               <x:label>assert aff-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert aff-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'aff-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fn-ids</x:label>
         <x:scenario>
            <x:label>fn-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fn-ids/fn-id-test/pass.xml"/>
            <x:result href="result-d6705.xml"/>
            <x:test successful="true">
               <x:label>not report fn-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fn-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fn-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fn-ids/fn-id-test/fail.xml"/>
            <x:result href="result-d6714.xml"/>
            <x:test successful="true">
               <x:label>report fn-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fn-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fn-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>disp-formula-ids</x:label>
         <x:scenario>
            <x:label>disp-formula-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-formula-ids/disp-formula-id-test/pass.xml"/>
            <x:result href="result-d6723.xml"/>
            <x:test successful="true">
               <x:label>not assert disp-formula-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-formula-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>disp-formula-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/disp-formula-ids/disp-formula-id-test/fail.xml"/>
            <x:result href="result-d6732.xml"/>
            <x:test successful="true">
               <x:label>assert disp-formula-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert disp-formula-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'disp-formula-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>mml-math-ids</x:label>
         <x:scenario>
            <x:label>mml-math-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/mml-math-ids/mml-math-id-test/pass.xml"/>
            <x:result href="result-d6741.xml"/>
            <x:test successful="true">
               <x:label>not assert mml-math-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mml-math-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert mml-math-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mml-math-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>mml-math-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/mml-math-ids/mml-math-id-test/fail.xml"/>
            <x:result href="result-d6750.xml"/>
            <x:test successful="true">
               <x:label>assert mml-math-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mml-math-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert mml-math-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mml-math-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-table-wrap-ids</x:label>
         <x:scenario>
            <x:label>app-table-wrap-id-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-wrap-ids/app-table-wrap-id-test-1/pass.xml"/>
            <x:result href="result-d6759.xml"/>
            <x:test successful="true">
               <x:label>not assert app-table-wrap-id-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-table-wrap-id-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-wrap-ids/app-table-wrap-id-test-1/fail.xml"/>
            <x:result href="result-d6768.xml"/>
            <x:test successful="true">
               <x:label>assert app-table-wrap-id-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-table-wrap-id-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-wrap-ids/app-table-wrap-id-test-2/pass.xml"/>
            <x:result href="result-d6777.xml"/>
            <x:test successful="true">
               <x:label>not assert app-table-wrap-id-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-table-wrap-id-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-table-wrap-ids/app-table-wrap-id-test-2/fail.xml"/>
            <x:result href="result-d6786.xml"/>
            <x:test successful="true">
               <x:label>assert app-table-wrap-id-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>resp-table-wrap-ids</x:label>
         <x:scenario>
            <x:label>resp-table-wrap-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/resp-table-wrap-ids/resp-table-wrap-id-test/pass.xml"/>
            <x:result href="result-d6795.xml"/>
            <x:test successful="true">
               <x:label>not assert resp-table-wrap-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-table-wrap-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert resp-table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>resp-table-wrap-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/resp-table-wrap-ids/resp-table-wrap-id-test/fail.xml"/>
            <x:result href="result-d6804.xml"/>
            <x:test successful="false">
               <x:label>assert resp-table-wrap-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-table-wrap-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert resp-table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'resp-table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>table-wrap-ids</x:label>
         <x:scenario>
            <x:label>table-wrap-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-ids/table-wrap-id-test/pass.xml"/>
            <x:result href="result-d6813.xml"/>
            <x:test successful="true">
               <x:label>not assert table-wrap-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-wrap-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-wrap-ids/table-wrap-id-test/fail.xml"/>
            <x:result href="result-d6822.xml"/>
            <x:test successful="false">
               <x:label>assert table-wrap-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-wrap-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-wrap-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>body-top-level-sec-ids</x:label>
         <x:scenario>
            <x:label>body-top-level-sec-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-top-level-sec-ids/body-top-level-sec-id-test/pass.xml"/>
            <x:result href="result-d6831.xml"/>
            <x:test successful="true">
               <x:label>not assert body-top-level-sec-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-top-level-sec-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-top-level-sec-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-top-level-sec-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>body-top-level-sec-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/body-top-level-sec-ids/body-top-level-sec-id-test/fail.xml"/>
            <x:result href="result-d6840.xml"/>
            <x:test successful="true">
               <x:label>assert body-top-level-sec-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-top-level-sec-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert body-top-level-sec-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'body-top-level-sec-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>back-top-level-sec-ids</x:label>
         <x:scenario>
            <x:label>back-top-level-sec-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-top-level-sec-ids/back-top-level-sec-id-test/pass.xml"/>
            <x:result href="result-d6849.xml"/>
            <x:test successful="true">
               <x:label>not assert back-top-level-sec-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-top-level-sec-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-top-level-sec-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-top-level-sec-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-top-level-sec-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-top-level-sec-ids/back-top-level-sec-id-test/fail.xml"/>
            <x:result href="result-d6858.xml"/>
            <x:test successful="true">
               <x:label>assert back-top-level-sec-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-top-level-sec-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-top-level-sec-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-top-level-sec-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>low-level-sec-ids</x:label>
         <x:scenario>
            <x:label>low-level-sec-id-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/low-level-sec-ids/low-level-sec-id-test/pass.xml"/>
            <x:result href="result-d6867.xml"/>
            <x:test successful="true">
               <x:label>not assert low-level-sec-id-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'low-level-sec-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert low-level-sec-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'low-level-sec-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>low-level-sec-id-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/low-level-sec-ids/low-level-sec-id-test/fail.xml"/>
            <x:result href="result-d6876.xml"/>
            <x:test successful="true">
               <x:label>assert low-level-sec-id-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'low-level-sec-id-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert low-level-sec-ids-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'low-level-sec-ids-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>sec-tests</x:label>
         <x:scenario>
            <x:label>sec-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-tests/sec-test-1/pass.xml"/>
            <x:result href="result-d6885.xml"/>
            <x:test successful="true">
               <x:label>not assert sec-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-tests/sec-test-1/fail.xml"/>
            <x:result href="result-d6894.xml"/>
            <x:test successful="false">
               <x:label>assert sec-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-tests/sec-test-2/pass.xml"/>
            <x:result href="result-d6903.xml"/>
            <x:test successful="true">
               <x:label>not assert sec-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-tests/sec-test-2/fail.xml"/>
            <x:result href="result-d6912.xml"/>
            <x:test successful="false">
               <x:label>assert sec-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert sec-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>back-tests</x:label>
         <x:scenario>
            <x:label>back-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-1/pass.xml"/>
            <x:result href="result-d6921.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-1/fail.xml"/>
            <x:result href="result-d6930.xml"/>
            <x:test successful="true">
               <x:label>report back-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-2/pass.xml"/>
            <x:result href="result-d6939.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-2/fail.xml"/>
            <x:result href="result-d6948.xml"/>
            <x:test successful="true">
               <x:label>report back-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-3/pass.xml"/>
            <x:result href="result-d6957.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-3/fail.xml"/>
            <x:result href="result-d6966.xml"/>
            <x:test successful="true">
               <x:label>report back-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-4/pass.xml"/>
            <x:result href="result-d6975.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-4/fail.xml"/>
            <x:result href="result-d6984.xml"/>
            <x:test successful="true">
               <x:label>report back-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-5/pass.xml"/>
            <x:result href="result-d6993.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-5/fail.xml"/>
            <x:result href="result-d7002.xml"/>
            <x:test successful="true">
               <x:label>report back-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-6/pass.xml"/>
            <x:result href="result-d7011.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-6/fail.xml"/>
            <x:result href="result-d7020.xml"/>
            <x:test successful="true">
               <x:label>report back-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-8/pass.xml"/>
            <x:result href="result-d7029.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-8 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-8/fail.xml"/>
            <x:result href="result-d7038.xml"/>
            <x:test successful="true">
               <x:label>report back-test-8 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-7/pass.xml"/>
            <x:result href="result-d7047.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-7/fail.xml"/>
            <x:result href="result-d7056.xml"/>
            <x:test successful="true">
               <x:label>report back-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-9/pass.xml"/>
            <x:result href="result-d7065.xml"/>
            <x:test successful="true">
               <x:label>not report back-test-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>back-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/back-tests/back-test-9/fail.xml"/>
            <x:result href="result-d7074.xml"/>
            <x:test successful="true">
               <x:label>report back-test-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert back-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'back-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>data-content-tests</x:label>
         <x:scenario>
            <x:label>data-p-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-content-tests/data-p-presence/pass.xml"/>
            <x:result href="result-d7083.xml"/>
            <x:test successful="true">
               <x:label>not assert data-p-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-p-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-content-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-content-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>data-p-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-content-tests/data-p-presence/fail.xml"/>
            <x:result href="result-d7092.xml"/>
            <x:test successful="true">
               <x:label>assert data-p-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-p-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-content-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-content-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ack-tests</x:label>
         <x:scenario>
            <x:label>ack-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-tests/ack-test-1/pass.xml"/>
            <x:result href="result-d7101.xml"/>
            <x:test successful="true">
               <x:label>not assert ack-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ack-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-tests/ack-test-1/fail.xml"/>
            <x:result href="result-d7110.xml"/>
            <x:test successful="true">
               <x:label>assert ack-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ack-child-tests</x:label>
         <x:scenario>
            <x:label>ack-child-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-child-tests/ack-child-test-1/pass.xml"/>
            <x:result href="result-d7119.xml"/>
            <x:test successful="true">
               <x:label>not assert ack-child-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ack-child-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ack-child-tests/ack-child-test-1/fail.xml"/>
            <x:result href="result-d7128.xml"/>
            <x:test successful="true">
               <x:label>assert ack-child-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-child-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ack-child-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ack-child-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>app-tests</x:label>
         <x:scenario>
            <x:label>app-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-tests/app-test-1/pass.xml"/>
            <x:result href="result-d7137.xml"/>
            <x:test successful="true">
               <x:label>not assert app-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-tests/app-test-1/fail.xml"/>
            <x:result href="result-d7146.xml"/>
            <x:test successful="true">
               <x:label>assert app-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-tests/app-test-2/pass.xml"/>
            <x:result href="result-d7155.xml"/>
            <x:test successful="true">
               <x:label>not assert app-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>app-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/app-tests/app-test-2/fail.xml"/>
            <x:result href="result-d7164.xml"/>
            <x:test successful="true">
               <x:label>assert app-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert app-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'app-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>additional-info-tests</x:label>
         <x:scenario>
            <x:label>additional-info-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/additional-info-tests/additional-info-test-1/pass.xml"/>
            <x:result href="result-d7173.xml"/>
            <x:test successful="true">
               <x:label>not assert additional-info-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert additional-info-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>additional-info-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/additional-info-tests/additional-info-test-1/fail.xml"/>
            <x:result href="result-d7182.xml"/>
            <x:test successful="true">
               <x:label>assert additional-info-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert additional-info-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>additional-info-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/additional-info-tests/additional-info-test-2/pass.xml"/>
            <x:result href="result-d7191.xml"/>
            <x:test successful="true">
               <x:label>not report additional-info-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert additional-info-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>additional-info-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/additional-info-tests/additional-info-test-2/fail.xml"/>
            <x:result href="result-d7200.xml"/>
            <x:test successful="true">
               <x:label>report additional-info-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert additional-info-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>additional-info-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/additional-info-tests/additional-info-test-3/pass.xml"/>
            <x:result href="result-d7209.xml"/>
            <x:test successful="true">
               <x:label>not report additional-info-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert additional-info-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>additional-info-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/additional-info-tests/additional-info-test-3/fail.xml"/>
            <x:result href="result-d7218.xml"/>
            <x:test successful="true">
               <x:label>report additional-info-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert additional-info-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'additional-info-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>comp-int-fn-group-tests</x:label>
         <x:scenario>
            <x:label>comp-int-fn-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-fn-group-tests/comp-int-fn-test-1/pass.xml"/>
            <x:result href="result-d7227.xml"/>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>comp-int-fn-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-fn-group-tests/comp-int-fn-test-1/fail.xml"/>
            <x:result href="result-d7236.xml"/>
            <x:test successful="true">
               <x:label>assert comp-int-fn-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>comp-int-fn-group-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-fn-group-tests/comp-int-fn-group-test-1/pass.xml"/>
            <x:result href="result-d7245.xml"/>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-group-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>comp-int-fn-group-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-fn-group-tests/comp-int-fn-group-test-1/fail.xml"/>
            <x:result href="result-d7254.xml"/>
            <x:test successful="true">
               <x:label>assert comp-int-fn-group-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-group-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-group-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-group-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>comp-int-fn-tests</x:label>
         <x:scenario>
            <x:label>comp-int-fn-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-fn-tests/comp-int-fn-test-2/pass.xml"/>
            <x:result href="result-d7263.xml"/>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>comp-int-fn-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/comp-int-fn-tests/comp-int-fn-test-2/fail.xml"/>
            <x:result href="result-d7272.xml"/>
            <x:test successful="true">
               <x:label>assert comp-int-fn-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert comp-int-fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'comp-int-fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>auth-cont-tests</x:label>
         <x:scenario>
            <x:label>auth-cont-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-cont-tests/auth-cont-test-1/pass.xml"/>
            <x:result href="result-d7281.xml"/>
            <x:test successful="true">
               <x:label>not assert auth-cont-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-cont-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>auth-cont-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-cont-tests/auth-cont-test-1/fail.xml"/>
            <x:result href="result-d7290.xml"/>
            <x:test successful="true">
               <x:label>assert auth-cont-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-cont-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>auth-cont-fn-tests</x:label>
         <x:scenario>
            <x:label>auth-cont-fn-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-cont-fn-tests/auth-cont-fn-test-1/pass.xml"/>
            <x:result href="result-d7299.xml"/>
            <x:test successful="true">
               <x:label>not assert auth-cont-fn-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-fn-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-cont-fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>auth-cont-fn-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-cont-fn-tests/auth-cont-fn-test-1/fail.xml"/>
            <x:result href="result-d7308.xml"/>
            <x:test successful="true">
               <x:label>assert auth-cont-fn-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-fn-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-cont-fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-cont-fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ethics-tests</x:label>
         <x:scenario>
            <x:label>ethics-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-tests/ethics-test-1/pass.xml"/>
            <x:result href="result-d7317.xml"/>
            <x:test successful="true">
               <x:label>not assert ethics-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-tests/ethics-test-1/fail.xml"/>
            <x:result href="result-d7326.xml"/>
            <x:test successful="true">
               <x:label>assert ethics-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-tests/ethics-test-2/pass.xml"/>
            <x:result href="result-d7335.xml"/>
            <x:test successful="true">
               <x:label>not report ethics-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-tests/ethics-test-2/fail.xml"/>
            <x:result href="result-d7344.xml"/>
            <x:test successful="true">
               <x:label>report ethics-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-tests/ethics-test-3/pass.xml"/>
            <x:result href="result-d7353.xml"/>
            <x:test successful="true">
               <x:label>not report ethics-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-tests/ethics-test-3/fail.xml"/>
            <x:result href="result-d7362.xml"/>
            <x:test successful="true">
               <x:label>report ethics-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ethics-fn-tests</x:label>
         <x:scenario>
            <x:label>ethics-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-fn-tests/ethics-test-4/pass.xml"/>
            <x:result href="result-d7371.xml"/>
            <x:test successful="true">
               <x:label>not assert ethics-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-fn-tests/ethics-test-4/fail.xml"/>
            <x:result href="result-d7380.xml"/>
            <x:test successful="true">
               <x:label>assert ethics-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-fn-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-fn-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>dec-letter-reply-tests</x:label>
         <x:scenario>
            <x:label>dec-letter-reply-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-1/pass.xml"/>
            <x:result href="result-d7389.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-1/fail.xml"/>
            <x:result href="result-d7398.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-reply-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-2/pass.xml"/>
            <x:result href="result-d7407.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-2/fail.xml"/>
            <x:result href="result-d7416.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-reply-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-3/pass.xml"/>
            <x:result href="result-d7425.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-3/fail.xml"/>
            <x:result href="result-d7434.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-reply-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-4/pass.xml"/>
            <x:result href="result-d7443.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-4/fail.xml"/>
            <x:result href="result-d7452.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-reply-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-5/pass.xml"/>
            <x:result href="result-d7461.xml"/>
            <x:test successful="true">
               <x:label>not report dec-letter-reply-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-reply-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-reply-tests/dec-letter-reply-test-5/fail.xml"/>
            <x:result href="result-d7470.xml"/>
            <x:test successful="true">
               <x:label>report dec-letter-reply-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-reply-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-reply-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>dec-letter-front-tests</x:label>
         <x:scenario>
            <x:label>dec-letter-front-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-front-tests/dec-letter-front-test-1/pass.xml"/>
            <x:result href="result-d7479.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-front-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-front-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-front-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-front-tests/dec-letter-front-test-1/fail.xml"/>
            <x:result href="result-d7488.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-front-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-front-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-front-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-front-tests/dec-letter-front-test-2/pass.xml"/>
            <x:result href="result-d7497.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-front-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-front-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-front-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-front-tests/dec-letter-front-test-2/fail.xml"/>
            <x:result href="result-d7506.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-front-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-front-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-front-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>dec-letter-body-tests</x:label>
         <x:scenario>
            <x:label>dec-letter-body-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-body-tests/dec-letter-body-test-1/pass.xml"/>
            <x:result href="result-d7515.xml"/>
            <x:test successful="true">
               <x:label>not assert dec-letter-body-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-body-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dec-letter-body-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/dec-letter-body-tests/dec-letter-body-test-1/fail.xml"/>
            <x:result href="result-d7524.xml"/>
            <x:test successful="true">
               <x:label>assert dec-letter-body-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-body-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert dec-letter-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dec-letter-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>reply-front-tests</x:label>
         <x:scenario>
            <x:label>reply-front-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-front-tests/reply-front-test-1/pass.xml"/>
            <x:result href="result-d7533.xml"/>
            <x:test successful="true">
               <x:label>not assert reply-front-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-front-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert reply-front-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-front-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-front-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-front-tests/reply-front-test-1/fail.xml"/>
            <x:result href="result-d7542.xml"/>
            <x:test successful="false">
               <x:label>assert reply-front-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-front-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert reply-front-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-front-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>reply-body-tests</x:label>
         <x:scenario>
            <x:label>reply-body-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-body-tests/reply-body-test-1/pass.xml"/>
            <x:result href="result-d7551.xml"/>
            <x:test successful="true">
               <x:label>not report reply-body-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert reply-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-body-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-body-tests/reply-body-test-1/fail.xml"/>
            <x:result href="result-d7560.xml"/>
            <x:test successful="false">
               <x:label>report reply-body-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert reply-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-body-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-body-tests/reply-body-test-2/pass.xml"/>
            <x:result href="result-d7569.xml"/>
            <x:test successful="true">
               <x:label>not report reply-body-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert reply-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-body-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-body-tests/reply-body-test-2/fail.xml"/>
            <x:result href="result-d7578.xml"/>
            <x:test successful="false">
               <x:label>report reply-body-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert reply-body-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-body-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>reply-disp-quote-tests</x:label>
         <x:scenario>
            <x:label>reply-disp-quote-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-disp-quote-tests/reply-disp-quote-test-1/pass.xml"/>
            <x:result href="result-d7587.xml"/>
            <x:test successful="true">
               <x:label>not assert reply-disp-quote-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-disp-quote-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert reply-disp-quote-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-disp-quote-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reply-disp-quote-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/reply-disp-quote-tests/reply-disp-quote-test-1/fail.xml"/>
            <x:result href="result-d7596.xml"/>
            <x:test successful="false">
               <x:label>assert reply-disp-quote-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-disp-quote-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert reply-disp-quote-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reply-disp-quote-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>research-advance-test</x:label>
         <x:scenario>
            <x:label>related-articles-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-advance-test/related-articles-test-1/pass.xml"/>
            <x:result href="result-d7605.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert research-advance-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-advance-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/research-advance-test/related-articles-test-1/fail.xml"/>
            <x:result href="result-d7614.xml"/>
            <x:test successful="false">
               <x:label>assert related-articles-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert research-advance-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'research-advance-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>insight-test</x:label>
         <x:scenario>
            <x:label>related-articles-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/insight-test/related-articles-test-2/pass.xml"/>
            <x:result href="result-d7623.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert insight-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'insight-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/insight-test/related-articles-test-2/fail.xml"/>
            <x:result href="result-d7632.xml"/>
            <x:test successful="true">
               <x:label>assert related-articles-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert insight-test-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'insight-test-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>related-articles-conformance</x:label>
         <x:scenario>
            <x:label>related-articles-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-3/pass.xml"/>
            <x:result href="result-d7641.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-3/fail.xml"/>
            <x:result href="result-d7650.xml"/>
            <x:test successful="false">
               <x:label>assert related-articles-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-4/pass.xml"/>
            <x:result href="result-d7659.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-4/fail.xml"/>
            <x:result href="result-d7668.xml"/>
            <x:test successful="false">
               <x:label>assert related-articles-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-5/pass.xml"/>
            <x:result href="result-d7677.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-5/fail.xml"/>
            <x:result href="result-d7686.xml"/>
            <x:test successful="false">
               <x:label>assert related-articles-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-6/pass.xml"/>
            <x:result href="result-d7695.xml"/>
            <x:test successful="true">
               <x:label>not assert related-articles-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>related-articles-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/related-articles-conformance/related-articles-test-6/fail.xml"/>
            <x:result href="result-d7704.xml"/>
            <x:test successful="false">
               <x:label>assert related-articles-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert related-articles-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'related-articles-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-general</x:label>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-general/err-elem-cit-gen-name-2/pass.xml"/>
            <x:result href="result-d7713.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-gen-name-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-general-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-general-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-general/err-elem-cit-gen-name-2/fail.xml"/>
            <x:result href="result-d7722.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-gen-name-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-general-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-general-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-general/err-elem-cit-gen-name-5/pass.xml"/>
            <x:result href="result-d7731.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-gen-name-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-general-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-general-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-general/err-elem-cit-gen-name-5/fail.xml"/>
            <x:result href="result-d7740.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-gen-name-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-general-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-general-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-general/err-elem-cit-gen-date-1-9/pass.xml"/>
            <x:result href="result-d7749.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-gen-date-1-9 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-general-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-general-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-general/err-elem-cit-gen-date-1-9/fail.xml"/>
            <x:result href="result-d7758.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-gen-date-1-9 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-general-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-general-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-gen-name-3-1</x:label>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-3-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-gen-name-3-1/err-elem-cit-gen-name-3-1/pass.xml"/>
            <x:result href="result-d7767.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-gen-name-3-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-gen-name-3-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-gen-name-3-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-3-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-gen-name-3-1/err-elem-cit-gen-name-3-1/fail.xml"/>
            <x:result href="result-d7776.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-gen-name-3-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-gen-name-3-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-gen-name-3-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-gen-name-3-2</x:label>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-3-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-gen-name-3-2/err-elem-cit-gen-name-3-2/pass.xml"/>
            <x:result href="result-d7785.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-name-3-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-gen-name-3-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-gen-name-3-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-3-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-gen-name-3-2/err-elem-cit-gen-name-3-2/fail.xml"/>
            <x:result href="result-d7794.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-gen-name-3-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-gen-name-3-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-gen-name-3-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-gen-name-4</x:label>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-gen-name-4/err-elem-cit-gen-name-4/pass.xml"/>
            <x:result href="result-d7803.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-name-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-gen-name-4-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-gen-name-4-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-name-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-gen-name-4/err-elem-cit-gen-name-4/fail.xml"/>
            <x:result href="result-d7812.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-gen-name-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-name-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-gen-name-4-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-gen-name-4-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-year</x:label>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-1/pass.xml"/>
            <x:result href="result-d7821.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-1/fail.xml"/>
            <x:result href="result-d7830.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-gen-date-1-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-2/pass.xml"/>
            <x:result href="result-d7839.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-2/fail.xml"/>
            <x:result href="result-d7848.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-gen-date-1-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-3/pass.xml"/>
            <x:result href="result-d7857.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-3/fail.xml"/>
            <x:result href="result-d7866.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-gen-date-1-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-4/pass.xml"/>
            <x:result href="result-d7875.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-4/fail.xml"/>
            <x:result href="result-d7884.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-gen-date-1-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-5/pass.xml"/>
            <x:result href="result-d7893.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-5/fail.xml"/>
            <x:result href="result-d7902.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-gen-date-1-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-6/pass.xml"/>
            <x:result href="result-d7911.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-6/fail.xml"/>
            <x:result href="result-d7920.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-gen-date-1-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-7/pass.xml"/>
            <x:result href="result-d7929.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-gen-date-1-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-7/fail.xml"/>
            <x:result href="result-d7938.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-gen-date-1-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-8/pass.xml"/>
            <x:result href="result-d7947.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-gen-date-1-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-gen-date-1-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-year/err-elem-cit-gen-date-1-8/fail.xml"/>
            <x:result href="result-d7956.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-gen-date-1-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-gen-date-1-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref</x:label>
         <x:scenario>
            <x:label>err-elem-cit-high-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-1/pass.xml"/>
            <x:result href="result-d7965.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-1/fail.xml"/>
            <x:result href="result-d7974.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-high-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-2-2/pass.xml"/>
            <x:result href="result-d7983.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-2-2/fail.xml"/>
            <x:result href="result-d7992.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-high-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-3-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-3-1/pass.xml"/>
            <x:result href="result-d8001.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-3-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-3-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-3-1/fail.xml"/>
            <x:result href="result-d8010.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-high-3-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-3-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-3-2/pass.xml"/>
            <x:result href="result-d8019.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-3-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-3-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-3-2/fail.xml"/>
            <x:result href="result-d8028.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-high-3-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-3-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-3-3/pass.xml"/>
            <x:result href="result-d8037.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-3-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-3-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-3-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref/err-elem-cit-high-3-3/fail.xml"/>
            <x:result href="result-d8046.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-high-3-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-3-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>xref</x:label>
         <x:scenario>
            <x:label>err-xref-high-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref/err-xref-high-2-1/pass.xml"/>
            <x:result href="result-d8055.xml"/>
            <x:test successful="true">
               <x:label>not assert err-xref-high-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-xref-high-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert xref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-xref-high-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref/err-xref-high-2-1/fail.xml"/>
            <x:result href="result-d8064.xml"/>
            <x:test successful="false">
               <x:label>assert err-xref-high-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-xref-high-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert xref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation</x:label>
         <x:scenario>
            <x:label>err-elem-cit-high-6-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation/err-elem-cit-high-6-1/pass.xml"/>
            <x:result href="result-d8073.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-6-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-6-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-6-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation/err-elem-cit-high-6-1/fail.xml"/>
            <x:result href="result-d8082.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-high-6-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-6-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-6-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation/err-elem-cit-high-6-2/pass.xml"/>
            <x:result href="result-d8091.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-high-6-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-6-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-high-6-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation/err-elem-cit-high-6-2/fail.xml"/>
            <x:result href="result-d8100.xml"/>
            <x:test successful="true">
               <x:label>assert err-elem-cit-high-6-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-high-6-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert elem-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-2-1/pass.xml"/>
            <x:result href="result-d8109.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-2-1/fail.xml"/>
            <x:result href="result-d8118.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-2-2/pass.xml"/>
            <x:result href="result-d8127.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-2-2/fail.xml"/>
            <x:result href="result-d8136.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-3-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-3-1/pass.xml"/>
            <x:result href="result-d8145.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-3-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-3-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-3-1/fail.xml"/>
            <x:result href="result-d8154.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-3-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-4-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-4-1/pass.xml"/>
            <x:result href="result-d8163.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-4-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-4-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-4-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-4-1/fail.xml"/>
            <x:result href="result-d8172.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-4-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-4-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-4-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-4-2-1/pass.xml"/>
            <x:result href="result-d8181.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-4-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-4-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-4-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-4-2-1/fail.xml"/>
            <x:result href="result-d8190.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-4-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-4-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-4-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-4-2-2/pass.xml"/>
            <x:result href="result-d8199.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-4-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-4-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-4-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-4-2-2/fail.xml"/>
            <x:result href="result-d8208.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-4-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-4-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-5-1-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-5-1-3/pass.xml"/>
            <x:result href="result-d8217.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-5-1-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-5-1-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-5-1-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-5-1-3/fail.xml"/>
            <x:result href="result-d8226.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-5-1-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-5-1-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>warning-elem-cit-journal-6-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/warning-elem-cit-journal-6-1/pass.xml"/>
            <x:result href="result-d8235.xml"/>
            <x:test successful="true">
               <x:label>not assert warning-elem-cit-journal-6-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'warning-elem-cit-journal-6-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>warning-elem-cit-journal-6-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/warning-elem-cit-journal-6-1/fail.xml"/>
            <x:result href="result-d8244.xml"/>
            <x:test successful="false">
               <x:label>assert warning-elem-cit-journal-6-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'warning-elem-cit-journal-6-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-5-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-6-5-1/pass.xml"/>
            <x:result href="result-d8253.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-journal-6-5-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-5-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-5-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-6-5-1/fail.xml"/>
            <x:result href="result-d8262.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-journal-6-5-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-5-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-5-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-6-5-2/pass.xml"/>
            <x:result href="result-d8271.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-journal-6-5-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-5-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-5-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-6-5-2/fail.xml"/>
            <x:result href="result-d8280.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-journal-6-5-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-5-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-6-7/pass.xml"/>
            <x:result href="result-d8289.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-journal-6-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-6-7/fail.xml"/>
            <x:result href="result-d8298.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-journal-6-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-12-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-12/pass.xml"/>
            <x:result href="result-d8307.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-12 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-12-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal/err-elem-cit-journal-12/fail.xml"/>
            <x:result href="result-d8316.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-12 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-3-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-article-title/err-elem-cit-journal-3-2/pass.xml"/>
            <x:result href="result-d8325.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-3-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-3-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-article-title/err-elem-cit-journal-3-2/fail.xml"/>
            <x:result href="result-d8334.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-3-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-volume</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-5-1-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-volume/err-elem-cit-journal-5-1-2/pass.xml"/>
            <x:result href="result-d8343.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-5-1-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-5-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-volume-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-volume-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-5-1-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-volume/err-elem-cit-journal-5-1-2/fail.xml"/>
            <x:result href="result-d8352.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-5-1-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-5-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-volume-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-volume-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-fpage</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-fpage/err-elem-cit-journal-6-2/pass.xml"/>
            <x:result href="result-d8361.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-6-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-fpage/err-elem-cit-journal-6-2/fail.xml"/>
            <x:result href="result-d8370.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-6-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-fpage/err-elem-cit-journal-6-6/pass.xml"/>
            <x:result href="result-d8379.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-6-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-fpage/err-elem-cit-journal-6-6/fail.xml"/>
            <x:result href="result-d8388.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-6-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-elocation-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-elocation-id/err-elem-cit-journal-6-3/pass.xml"/>
            <x:result href="result-d8397.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-6-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-elocation-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-elocation-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-elocation-id/err-elem-cit-journal-6-3/fail.xml"/>
            <x:result href="result-d8406.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-6-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-elocation-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-elocation-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-comment</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-comment/err-elem-cit-journal-6-4/pass.xml"/>
            <x:result href="result-d8415.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-6-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-comment-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-comment-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-6-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-comment/err-elem-cit-journal-6-4/fail.xml"/>
            <x:result href="result-d8424.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-6-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-6-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-comment-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-comment-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-comment/err-elem-cit-journal-13/pass.xml"/>
            <x:result href="result-d8433.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-13 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-comment-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-comment-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-comment/err-elem-cit-journal-13/fail.xml"/>
            <x:result href="result-d8442.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-13 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-comment-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-comment-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-pub-id-pmid</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-10-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-pub-id-pmid/err-elem-cit-journal-10/pass.xml"/>
            <x:result href="result-d8451.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-journal-10 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-pub-id-pmid-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-pub-id-pmid-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-10-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-pub-id-pmid/err-elem-cit-journal-10/fail.xml"/>
            <x:result href="result-d8460.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-journal-10 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-pub-id-pmid-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-pub-id-pmid-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-journal-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-journal-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-pub-id/err-elem-cit-journal-9-1/pass.xml"/>
            <x:result href="result-d8469.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-journal-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-journal-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-journal-pub-id/err-elem-cit-journal-9-1/fail.xml"/>
            <x:result href="result-d8478.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-journal-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-journal-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-journal-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-journal-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-2-2/pass.xml"/>
            <x:result href="result-d8487.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-2-2/fail.xml"/>
            <x:result href="result-d8496.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-2-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-2-3/pass.xml"/>
            <x:result href="result-d8505.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-2-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-2-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-2-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-2-3/fail.xml"/>
            <x:result href="result-d8514.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-2-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-2-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-10-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-10-1/pass.xml"/>
            <x:result href="result-d8523.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-10-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-10-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-10-1/fail.xml"/>
            <x:result href="result-d8532.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-10-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-10-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-10-2-1/pass.xml"/>
            <x:result href="result-d8541.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-10-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-10-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-10-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-10-2-1/fail.xml"/>
            <x:result href="result-d8550.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-10-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-10-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-10-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-10-2-2/pass.xml"/>
            <x:result href="result-d8559.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-10-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-10-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-10-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-10-2-2/fail.xml"/>
            <x:result href="result-d8568.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-10-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-10-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-13-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-13-1/pass.xml"/>
            <x:result href="result-d8577.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-13-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-13-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-13-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-13-1/fail.xml"/>
            <x:result href="result-d8586.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-13-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-13-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>warning-elem-cit-book-13-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/warning-elem-cit-book-13-3/pass.xml"/>
            <x:result href="result-d8595.xml"/>
            <x:test successful="true">
               <x:label>not report warning-elem-cit-book-13-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'warning-elem-cit-book-13-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>warning-elem-cit-book-13-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/warning-elem-cit-book-13-3/fail.xml"/>
            <x:result href="result-d8604.xml"/>
            <x:test successful="false">
               <x:label>report warning-elem-cit-book-13-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'warning-elem-cit-book-13-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-16-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-16/pass.xml"/>
            <x:result href="result-d8613.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-book-16 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-16-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-16/fail.xml"/>
            <x:result href="result-d8622.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-book-16 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-36-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-36/pass.xml"/>
            <x:result href="result-d8631.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-book-36 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-36'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-36-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-36/fail.xml"/>
            <x:result href="result-d8640.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-book-36 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-36'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-36-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-36-2/pass.xml"/>
            <x:result href="result-d8649.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-book-36-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-36-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-36-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-36-2/fail.xml"/>
            <x:result href="result-d8658.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-book-36-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-36-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-36-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-36-6/pass.xml"/>
            <x:result href="result-d8667.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-book-36-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-36-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-36-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-36-6/fail.xml"/>
            <x:result href="result-d8676.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-book-36-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-36-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-40-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-40/pass.xml"/>
            <x:result href="result-d8685.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-40 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-40'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-40-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book/err-elem-cit-book-40/fail.xml"/>
            <x:result href="result-d8694.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-40 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-40'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book-person-group</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-person-group/err-elem-cit-book-2-1/pass.xml"/>
            <x:result href="result-d8703.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-person-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-person-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-person-group/err-elem-cit-book-2-1/fail.xml"/>
            <x:result href="result-d8712.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-person-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-person-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book-chapter-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-22-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-chapter-title/err-elem-cit-book-22/pass.xml"/>
            <x:result href="result-d8721.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-22 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-22'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-chapter-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-chapter-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-22-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-chapter-title/err-elem-cit-book-22/fail.xml"/>
            <x:result href="result-d8730.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-22 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-22'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-chapter-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-chapter-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-28-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-chapter-title/err-elem-cit-book-28-1/pass.xml"/>
            <x:result href="result-d8739.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-28-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-28-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-chapter-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-chapter-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-28-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-chapter-title/err-elem-cit-book-28-1/fail.xml"/>
            <x:result href="result-d8748.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-28-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-28-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-chapter-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-chapter-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-31-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-chapter-title/err-elem-cit-book-31/pass.xml"/>
            <x:result href="result-d8757.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-31 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-31'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-chapter-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-chapter-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-31-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-chapter-title/err-elem-cit-book-31/fail.xml"/>
            <x:result href="result-d8766.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-31 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-31'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-chapter-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-chapter-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book-publisher-name</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-13-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-publisher-name/err-elem-cit-book-13-2/pass.xml"/>
            <x:result href="result-d8775.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-13-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-13-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-publisher-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-publisher-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-13-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-publisher-name/err-elem-cit-book-13-2/fail.xml"/>
            <x:result href="result-d8784.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-13-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-13-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-publisher-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-publisher-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book-edition</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-15-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-edition/err-elem-cit-book-15/pass.xml"/>
            <x:result href="result-d8793.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-15 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-edition-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-edition-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-15-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-edition/err-elem-cit-book-15/fail.xml"/>
            <x:result href="result-d8802.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-15 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-edition-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-edition-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book-pub-id-pmid</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-18-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-pub-id-pmid/err-elem-cit-book-18/pass.xml"/>
            <x:result href="result-d8811.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-book-18 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-pub-id-pmid-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-pub-id-pmid-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-18-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-pub-id-pmid/err-elem-cit-book-18/fail.xml"/>
            <x:result href="result-d8820.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-book-18 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-pub-id-pmid-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-pub-id-pmid-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-book-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-book-17-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-pub-id/err-elem-cit-book-17/pass.xml"/>
            <x:result href="result-d8829.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-book-17 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-17'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-book-17-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-book-pub-id/err-elem-cit-book-17/fail.xml"/>
            <x:result href="result-d8838.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-book-17 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-book-17'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-book-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-book-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-data</x:label>
         <x:scenario>
            <x:label>err-elem-cit-data-3-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-3-1/pass.xml"/>
            <x:result href="result-d8847.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-3-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-3-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-3-1/fail.xml"/>
            <x:result href="result-d8856.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-3-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-3-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-3-2/pass.xml"/>
            <x:result href="result-d8865.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-3-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-3-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-3-2/fail.xml"/>
            <x:result href="result-d8874.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-3-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-10-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-10/pass.xml"/>
            <x:result href="result-d8883.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-10 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-10-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-10/fail.xml"/>
            <x:result href="result-d8892.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-10 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-10'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-11-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-11-2/pass.xml"/>
            <x:result href="result-d8901.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-11-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-11-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-11-2/fail.xml"/>
            <x:result href="result-d8910.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-11-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-11-3-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-11-3-1/pass.xml"/>
            <x:result href="result-d8919.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-11-3-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-11-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-11-3-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-11-3-1/fail.xml"/>
            <x:result href="result-d8928.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-11-3-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-11-3-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-11-3-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-11-3-2/pass.xml"/>
            <x:result href="result-d8937.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-11-3-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-11-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-11-3-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-11-3-2/fail.xml"/>
            <x:result href="result-d8946.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-11-3-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-11-3-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-13-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-13-1/pass.xml"/>
            <x:result href="result-d8955.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-13-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-13-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-13-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-13-1/fail.xml"/>
            <x:result href="result-d8964.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-13-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-13-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-17-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-17-1/pass.xml"/>
            <x:result href="result-d8973.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-17-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-17-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-17-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-17-1/fail.xml"/>
            <x:result href="result-d8982.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-17-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-17-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-18-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-18/pass.xml"/>
            <x:result href="result-d8991.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-18 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-18-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data/err-elem-cit-data-18/fail.xml"/>
            <x:result href="result-d9000.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-18 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-data-pub-id-doi</x:label>
         <x:scenario>
            <x:label>err-elem-cit-data-14-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-pub-id-doi/err-elem-cit-data-14-2/pass.xml"/>
            <x:result href="result-d9009.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-14-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-14-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-pub-id-doi-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-pub-id-doi-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-14-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-pub-id-doi/err-elem-cit-data-14-2/fail.xml"/>
            <x:result href="result-d9018.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-14-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-14-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-pub-id-doi-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-pub-id-doi-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-data-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-data-13-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-pub-id/err-elem-cit-data-13-2/pass.xml"/>
            <x:result href="result-d9027.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-13-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-13-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-13-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-pub-id/err-elem-cit-data-13-2/fail.xml"/>
            <x:result href="result-d9036.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-13-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-13-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-14-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-pub-id/err-elem-cit-data-14-1/pass.xml"/>
            <x:result href="result-d9045.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-data-14-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-14-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-14-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-pub-id/err-elem-cit-data-14-1/fail.xml"/>
            <x:result href="result-d9054.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-data-14-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-14-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-data-ext-link</x:label>
         <x:scenario>
            <x:label>err-elem-cit-data-17-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-ext-link/err-elem-cit-data-17-2/pass.xml"/>
            <x:result href="result-d9063.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-17-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-17-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-17-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-ext-link/err-elem-cit-data-17-2/fail.xml"/>
            <x:result href="result-d9072.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-17-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-17-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-17-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-ext-link/err-elem-cit-data-17-3/pass.xml"/>
            <x:result href="result-d9081.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-17-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-17-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-17-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-ext-link/err-elem-cit-data-17-3/fail.xml"/>
            <x:result href="result-d9090.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-17-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-17-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-17-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-ext-link/err-elem-cit-data-17-4/pass.xml"/>
            <x:result href="result-d9099.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-data-17-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-17-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-data-17-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-data-ext-link/err-elem-cit-data-17-4/fail.xml"/>
            <x:result href="result-d9108.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-data-17-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-data-17-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-data-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-data-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-patent</x:label>
         <x:scenario>
            <x:label>err-elem-cit-patent-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-2-1/pass.xml"/>
            <x:result href="result-d9117.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-2-1/fail.xml"/>
            <x:result href="result-d9126.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-2-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-2-3/pass.xml"/>
            <x:result href="result-d9135.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-2-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-2-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-2-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-2-3/fail.xml"/>
            <x:result href="result-d9144.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-2-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-2-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-2A-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-2A/pass.xml"/>
            <x:result href="result-d9153.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-2A error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-2A'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-2A-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-2A/fail.xml"/>
            <x:result href="result-d9162.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-2A error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-2A'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-8-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-8-1/pass.xml"/>
            <x:result href="result-d9171.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-8-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-8-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-8-1/fail.xml"/>
            <x:result href="result-d9180.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-8-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-9-1/pass.xml"/>
            <x:result href="result-d9189.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-9-1/fail.xml"/>
            <x:result href="result-d9198.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-10-1-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-10-1-1/pass.xml"/>
            <x:result href="result-d9207.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-10-1-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-10-1-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-10-1-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-10-1-1/fail.xml"/>
            <x:result href="result-d9216.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-10-1-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-10-1-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-11-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-11-1/pass.xml"/>
            <x:result href="result-d9225.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-11-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-11-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-11-1/fail.xml"/>
            <x:result href="result-d9234.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-11-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-18-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-18/pass.xml"/>
            <x:result href="result-d9243.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-18 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-18-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent/err-elem-cit-patent-18/fail.xml"/>
            <x:result href="result-d9252.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-18 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-patent-ext-link</x:label>
         <x:scenario>
            <x:label>err-elem-cit-patent-11-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-ext-link/err-elem-cit-patent-11-2/pass.xml"/>
            <x:result href="result-d9261.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-11-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-11-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-ext-link/err-elem-cit-patent-11-2/fail.xml"/>
            <x:result href="result-d9270.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-11-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-11-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-ext-link/err-elem-cit-patent-11-3/pass.xml"/>
            <x:result href="result-d9279.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-11-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-11-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-ext-link/err-elem-cit-patent-11-3/fail.xml"/>
            <x:result href="result-d9288.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-11-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-11-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-ext-link/err-elem-cit-patent-11-4/pass.xml"/>
            <x:result href="result-d9297.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-11-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-11-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-11-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-ext-link/err-elem-cit-patent-11-4/fail.xml"/>
            <x:result href="result-d9306.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-11-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-11-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-patent-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-patent-8-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-article-title/err-elem-cit-patent-8-2-1/pass.xml"/>
            <x:result href="result-d9315.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-8-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-8-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-8-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-article-title/err-elem-cit-patent-8-2-1/fail.xml"/>
            <x:result href="result-d9324.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-8-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-8-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-8-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-article-title/err-elem-cit-patent-8-2-2/pass.xml"/>
            <x:result href="result-d9333.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-8-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-8-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-8-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-article-title/err-elem-cit-patent-8-2-2/fail.xml"/>
            <x:result href="result-d9342.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-8-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-8-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-patent-source</x:label>
         <x:scenario>
            <x:label>err-elem-cit-patent-9-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-source/err-elem-cit-patent-9-2-1/pass.xml"/>
            <x:result href="result-d9351.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-9-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-9-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-9-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-source/err-elem-cit-patent-9-2-1/fail.xml"/>
            <x:result href="result-d9360.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-9-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-9-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-9-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-source/err-elem-cit-patent-9-2-2/pass.xml"/>
            <x:result href="result-d9369.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-9-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-9-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-source/err-elem-cit-patent-9-2-2/fail.xml"/>
            <x:result href="result-d9378.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-9-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-patent-patent</x:label>
         <x:scenario>
            <x:label>err-elem-cit-patent-10-1-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-patent/err-elem-cit-patent-10-1-2/pass.xml"/>
            <x:result href="result-d9387.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-10-1-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-10-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-10-1-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-patent/err-elem-cit-patent-10-1-2/fail.xml"/>
            <x:result href="result-d9396.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-10-1-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-10-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-10-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-patent/err-elem-cit-patent-10-2/pass.xml"/>
            <x:result href="result-d9405.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-patent-10-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-patent-10-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-patent-patent/err-elem-cit-patent-10-2/fail.xml"/>
            <x:result href="result-d9414.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-patent-10-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-patent-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-patent-patent-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-patent-patent-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-software</x:label>
         <x:scenario>
            <x:label>err-elem-cit-software-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-2-1/pass.xml"/>
            <x:result href="result-d9423.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-software-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-2-1/fail.xml"/>
            <x:result href="result-d9432.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-software-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-2-2/pass.xml"/>
            <x:result href="result-d9441.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-software-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-2-2/fail.xml"/>
            <x:result href="result-d9450.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-software-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-10-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-10-1/pass.xml"/>
            <x:result href="result-d9459.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-software-10-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-10-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-10-1/fail.xml"/>
            <x:result href="result-d9468.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-software-10-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-16-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-16/pass.xml"/>
            <x:result href="result-d9477.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-software-16 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-16-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software/err-elem-cit-software-16/fail.xml"/>
            <x:result href="result-d9486.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-software-16 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-software-data-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-software-10-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software-data-title/err-elem-cit-software-10-2/pass.xml"/>
            <x:result href="result-d9495.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-software-10-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-data-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-data-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-10-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software-data-title/err-elem-cit-software-10-2/fail.xml"/>
            <x:result href="result-d9504.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-software-10-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-data-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-data-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-software-ext-link</x:label>
         <x:scenario>
            <x:label>err-elem-cit-software-15-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software-ext-link/err-elem-cit-software-15-1/pass.xml"/>
            <x:result href="result-d9513.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-software-15-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-15-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-15-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software-ext-link/err-elem-cit-software-15-1/fail.xml"/>
            <x:result href="result-d9522.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-software-15-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-15-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-15-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software-ext-link/err-elem-cit-software-15-2/pass.xml"/>
            <x:result href="result-d9531.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-software-15-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-15-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-15-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software-ext-link/err-elem-cit-software-15-2/fail.xml"/>
            <x:result href="result-d9540.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-software-15-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-15-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-15-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software-ext-link/err-elem-cit-software-15-3/pass.xml"/>
            <x:result href="result-d9549.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-software-15-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-15-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-software-15-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-software-ext-link/err-elem-cit-software-15-3/fail.xml"/>
            <x:result href="result-d9558.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-software-15-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-software-15-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-software-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-software-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-preprint</x:label>
         <x:scenario>
            <x:label>err-elem-cit-preprint-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-2-1/pass.xml"/>
            <x:result href="result-d9567.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-2-1/fail.xml"/>
            <x:result href="result-d9576.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-8-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-8-1/pass.xml"/>
            <x:result href="result-d9585.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-8-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-8-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-8-1/fail.xml"/>
            <x:result href="result-d9594.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-8-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-9-1/pass.xml"/>
            <x:result href="result-d9603.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-9-1/fail.xml"/>
            <x:result href="result-d9612.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-10-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-10-1/pass.xml"/>
            <x:result href="result-d9621.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-10-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-10-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-10-1/fail.xml"/>
            <x:result href="result-d9630.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-10-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-10-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-10-3/pass.xml"/>
            <x:result href="result-d9639.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-10-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-10-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-10-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-10-3/fail.xml"/>
            <x:result href="result-d9648.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-10-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-10-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-13/pass.xml"/>
            <x:result href="result-d9657.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-13 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint/err-elem-cit-preprint-13/fail.xml"/>
            <x:result href="result-d9666.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-13 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-preprint-person-group</x:label>
         <x:scenario>
            <x:label>err-elem-cit-preprint-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-person-group/err-elem-cit-preprint-2-2/pass.xml"/>
            <x:result href="result-d9675.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-person-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-person-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-person-group/err-elem-cit-preprint-2-2/fail.xml"/>
            <x:result href="result-d9684.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-person-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-person-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-preprint-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-preprint-10-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-pub-id/err-elem-cit-preprint-10-2/pass.xml"/>
            <x:result href="result-d9693.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-10-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-10-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-pub-id/err-elem-cit-preprint-10-2/fail.xml"/>
            <x:result href="result-d9702.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-10-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-preprint-ext-link</x:label>
         <x:scenario>
            <x:label>err-elem-cit-preprint-11-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-ext-link/err-elem-cit-preprint-11-1/pass.xml"/>
            <x:result href="result-d9711.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-11-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-11-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-ext-link/err-elem-cit-preprint-11-1/fail.xml"/>
            <x:result href="result-d9720.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-11-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-11-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-ext-link/err-elem-cit-preprint-11-2/pass.xml"/>
            <x:result href="result-d9729.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-11-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-11-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-ext-link/err-elem-cit-preprint-11-2/fail.xml"/>
            <x:result href="result-d9738.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-11-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-11-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-ext-link/err-elem-cit-preprint-11-3/pass.xml"/>
            <x:result href="result-d9747.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-11-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-11-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-ext-link/err-elem-cit-preprint-11-3/fail.xml"/>
            <x:result href="result-d9756.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-11-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-preprint-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-preprint-8-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-article-title/err-elem-cit-preprint-8-2-1/pass.xml"/>
            <x:result href="result-d9765.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-8-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-8-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-8-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-article-title/err-elem-cit-preprint-8-2-1/fail.xml"/>
            <x:result href="result-d9774.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-8-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-8-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-8-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-article-title/err-elem-cit-preprint-8-2-2/pass.xml"/>
            <x:result href="result-d9783.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-8-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-8-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-8-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-article-title/err-elem-cit-preprint-8-2-2/fail.xml"/>
            <x:result href="result-d9792.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-8-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-8-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-preprint-source</x:label>
         <x:scenario>
            <x:label>err-elem-cit-preprint-9-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-source/err-elem-cit-preprint-9-2-1/pass.xml"/>
            <x:result href="result-d9801.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-9-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-9-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-9-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-source/err-elem-cit-preprint-9-2-1/fail.xml"/>
            <x:result href="result-d9810.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-9-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-9-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-9-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-source/err-elem-cit-preprint-9-2-2/pass.xml"/>
            <x:result href="result-d9819.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-preprint-9-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-preprint-9-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-preprint-source/err-elem-cit-preprint-9-2-2/fail.xml"/>
            <x:result href="result-d9828.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-preprint-9-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-preprint-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-preprint-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-preprint-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-web</x:label>
         <x:scenario>
            <x:label>err-elem-cit-web-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-2-1/pass.xml"/>
            <x:result href="result-d9837.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-2-1/fail.xml"/>
            <x:result href="result-d9846.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-8-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-8-1/pass.xml"/>
            <x:result href="result-d9855.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-8-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-8-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-8-1/fail.xml"/>
            <x:result href="result-d9864.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-8-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-9-1/pass.xml"/>
            <x:result href="result-d9873.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-web-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-9-1/fail.xml"/>
            <x:result href="result-d9882.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-web-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-10-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-10-1/pass.xml"/>
            <x:result href="result-d9891.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-10-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-10-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-10-1/fail.xml"/>
            <x:result href="result-d9900.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-10-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-11-1/pass.xml"/>
            <x:result href="result-d9909.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-11-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-11-1/fail.xml"/>
            <x:result href="result-d9918.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-11-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-12-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-12/pass.xml"/>
            <x:result href="result-d9927.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-12 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-12-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web/err-elem-cit-web-12/fail.xml"/>
            <x:result href="result-d9936.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-12 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-web-person-group</x:label>
         <x:scenario>
            <x:label>err-elem-cit-web-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-person-group/err-elem-cit-web-2-2/pass.xml"/>
            <x:result href="result-d9945.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-person-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-person-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-person-group/err-elem-cit-web-2-2/fail.xml"/>
            <x:result href="result-d9954.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-person-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-person-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-web-ext-link</x:label>
         <x:scenario>
            <x:label>err-elem-cit-web-10-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-ext-link/err-elem-cit-web-10-2/pass.xml"/>
            <x:result href="result-d9963.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-10-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-10-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-ext-link/err-elem-cit-web-10-2/fail.xml"/>
            <x:result href="result-d9972.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-10-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-10-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-ext-link/err-elem-cit-web-10-3/pass.xml"/>
            <x:result href="result-d9981.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-10-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-10-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-10-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-ext-link/err-elem-cit-web-10-3/fail.xml"/>
            <x:result href="result-d9990.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-10-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-10-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-10-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-ext-link/err-elem-cit-web-10-4/pass.xml"/>
            <x:result href="result-d9999.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-10-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-10-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-10-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-ext-link/err-elem-cit-web-10-4/fail.xml"/>
            <x:result href="result-d10008.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-10-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-10-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-web-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-web-8-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-article-title/err-elem-cit-web-8-2-1/pass.xml"/>
            <x:result href="result-d10017.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-8-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-8-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-8-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-article-title/err-elem-cit-web-8-2-1/fail.xml"/>
            <x:result href="result-d10026.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-8-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-8-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-8-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-article-title/err-elem-cit-web-8-2-2/pass.xml"/>
            <x:result href="result-d10035.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-8-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-8-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-8-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-article-title/err-elem-cit-web-8-2-2/fail.xml"/>
            <x:result href="result-d10044.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-8-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-8-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-web-source</x:label>
         <x:scenario>
            <x:label>err-elem-cit-web-9-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-source/err-elem-cit-web-9-2-1/pass.xml"/>
            <x:result href="result-d10053.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-9-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-9-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-9-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-source/err-elem-cit-web-9-2-1/fail.xml"/>
            <x:result href="result-d10062.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-9-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-9-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-9-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-source/err-elem-cit-web-9-2-2/pass.xml"/>
            <x:result href="result-d10071.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-9-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-9-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-source/err-elem-cit-web-9-2-2/fail.xml"/>
            <x:result href="result-d10080.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-9-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-web-date-in-citation</x:label>
         <x:scenario>
            <x:label>err-elem-cit-web-11-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-2-1/pass.xml"/>
            <x:result href="result-d10089.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-11-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-2-1/fail.xml"/>
            <x:result href="result-d10098.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-11-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-2-2/pass.xml"/>
            <x:result href="result-d10107.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-11-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-2-2/fail.xml"/>
            <x:result href="result-d10116.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-11-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-3/pass.xml"/>
            <x:result href="result-d10125.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-web-11-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-3/fail.xml"/>
            <x:result href="result-d10134.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-web-11-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-4/pass.xml"/>
            <x:result href="result-d10143.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-web-11-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-web-11-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-web-date-in-citation/err-elem-cit-web-11-4/fail.xml"/>
            <x:result href="result-d10152.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-web-11-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-web-11-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-web-date-in-citation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-web-date-in-citation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-report</x:label>
         <x:scenario>
            <x:label>err-elem-cit-report-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-2-1/pass.xml"/>
            <x:result href="result-d10161.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-2-1/fail.xml"/>
            <x:result href="result-d10170.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-report-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-9-1/pass.xml"/>
            <x:result href="result-d10179.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-9-1/fail.xml"/>
            <x:result href="result-d10188.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-report-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-11-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-11-1/pass.xml"/>
            <x:result href="result-d10197.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-11-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-11-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-11-1/fail.xml"/>
            <x:result href="result-d10206.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-report-11-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>warning-elem-cit-report-11-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/warning-elem-cit-report-11-3/pass.xml"/>
            <x:result href="result-d10215.xml"/>
            <x:test successful="true">
               <x:label>not report warning-elem-cit-report-11-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'warning-elem-cit-report-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>warning-elem-cit-report-11-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/warning-elem-cit-report-11-3/fail.xml"/>
            <x:result href="result-d10224.xml"/>
            <x:test successful="false">
               <x:label>report warning-elem-cit-report-11-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'warning-elem-cit-report-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-15-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-15/pass.xml"/>
            <x:result href="result-d10233.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-15 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-15-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report/err-elem-cit-report-15/fail.xml"/>
            <x:result href="result-d10242.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-report-15 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-report-preson-group</x:label>
         <x:scenario>
            <x:label>err-elem-cit-report-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-preson-group/err-elem-cit-report-2-2/pass.xml"/>
            <x:result href="result-d10251.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-preson-group/err-elem-cit-report-2-2/fail.xml"/>
            <x:result href="result-d10260.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-report-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-report-source</x:label>
         <x:scenario>
            <x:label>err-elem-cit-report-9-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-source/err-elem-cit-report-9-2-1/pass.xml"/>
            <x:result href="result-d10269.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-9-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-9-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-9-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-source/err-elem-cit-report-9-2-1/fail.xml"/>
            <x:result href="result-d10278.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-report-9-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-9-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-9-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-source/err-elem-cit-report-9-2-2/pass.xml"/>
            <x:result href="result-d10287.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-9-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-9-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-source/err-elem-cit-report-9-2-2/fail.xml"/>
            <x:result href="result-d10296.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-report-9-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-report-publisher-name</x:label>
         <x:scenario>
            <x:label>err-elem-cit-report-11-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-publisher-name/err-elem-cit-report-11-2/pass.xml"/>
            <x:result href="result-d10305.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-11-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-publisher-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-publisher-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-11-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-publisher-name/err-elem-cit-report-11-2/fail.xml"/>
            <x:result href="result-d10314.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-report-11-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-publisher-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-publisher-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-report-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-report-12-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-pub-id/err-elem-cit-report-12-2/pass.xml"/>
            <x:result href="result-d10323.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-12-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-12-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-12-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-pub-id/err-elem-cit-report-12-2/fail.xml"/>
            <x:result href="result-d10332.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-report-12-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-12-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-report-ext-link</x:label>
         <x:scenario>
            <x:label>err-elem-cit-report-14-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-ext-link/err-elem-cit-report-14-1/pass.xml"/>
            <x:result href="result-d10341.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-14-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-14-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-14-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-ext-link/err-elem-cit-report-14-1/fail.xml"/>
            <x:result href="result-d10350.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-report-14-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-14-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-14-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-ext-link/err-elem-cit-report-14-2/pass.xml"/>
            <x:result href="result-d10359.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-14-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-14-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-14-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-ext-link/err-elem-cit-report-14-2/fail.xml"/>
            <x:result href="result-d10368.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-report-14-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-14-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-14-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-ext-link/err-elem-cit-report-14-3/pass.xml"/>
            <x:result href="result-d10377.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-report-14-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-14-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-report-14-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-report-ext-link/err-elem-cit-report-14-3/fail.xml"/>
            <x:result href="result-d10386.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-report-14-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-report-14-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-report-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-report-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-2-1/pass.xml"/>
            <x:result href="result-d10395.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-2-1/fail.xml"/>
            <x:result href="result-d10404.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-8-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-8-1/pass.xml"/>
            <x:result href="result-d10413.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-8-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-8-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-8-1/fail.xml"/>
            <x:result href="result-d10422.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-8-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-9-1/pass.xml"/>
            <x:result href="result-d10431.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-9-1/fail.xml"/>
            <x:result href="result-d10440.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-10-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-10-1/pass.xml"/>
            <x:result href="result-d10449.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-10-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-10-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-10-1/fail.xml"/>
            <x:result href="result-d10458.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-10-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-10-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-1/pass.xml"/>
            <x:result href="result-d10467.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-confproc-12-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-1/fail.xml"/>
            <x:result href="result-d10476.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-confproc-12-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-2/pass.xml"/>
            <x:result href="result-d10485.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-confproc-12-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-2/fail.xml"/>
            <x:result href="result-d10494.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-confproc-12-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-3/pass.xml"/>
            <x:result href="result-d10503.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-confproc-12-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-3/fail.xml"/>
            <x:result href="result-d10512.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-confproc-12-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-4/pass.xml"/>
            <x:result href="result-d10521.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-12-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-12-4/fail.xml"/>
            <x:result href="result-d10530.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-12-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-16-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-16-1/pass.xml"/>
            <x:result href="result-d10539.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-16-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-16-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-16-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-16-1/fail.xml"/>
            <x:result href="result-d10548.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-16-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-16-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-17-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-17/pass.xml"/>
            <x:result href="result-d10557.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-17 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-17'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-17-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc/err-elem-cit-confproc-17/fail.xml"/>
            <x:result href="result-d10566.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-17 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-17'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-preson-group</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-preson-group/err-elem-cit-confproc-2-2/pass.xml"/>
            <x:result href="result-d10575.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-preson-group/err-elem-cit-confproc-2-2/fail.xml"/>
            <x:result href="result-d10584.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-source</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-9-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-source/err-elem-cit-confproc-9-2-1/pass.xml"/>
            <x:result href="result-d10593.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-9-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-9-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-9-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-source/err-elem-cit-confproc-9-2-1/fail.xml"/>
            <x:result href="result-d10602.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-9-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-9-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-9-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-source/err-elem-cit-confproc-9-2-2/pass.xml"/>
            <x:result href="result-d10611.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-9-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-9-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-source/err-elem-cit-confproc-9-2-2/fail.xml"/>
            <x:result href="result-d10620.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-9-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-source-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-source-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-8-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-article-title/err-elem-cit-confproc-8-2/pass.xml"/>
            <x:result href="result-d10629.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-8-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-8-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-8-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-article-title/err-elem-cit-confproc-8-2/fail.xml"/>
            <x:result href="result-d10638.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-8-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-8-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-conf-name</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-10-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-conf-name/err-elem-cit-confproc-10-2/pass.xml"/>
            <x:result href="result-d10647.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-10-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-conf-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-conf-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-10-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-conf-name/err-elem-cit-confproc-10-2/fail.xml"/>
            <x:result href="result-d10656.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-10-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-conf-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-conf-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-conf-loc</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-11-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-conf-loc/err-elem-cit-confproc-11-2/pass.xml"/>
            <x:result href="result-d10665.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-11-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-conf-loc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-conf-loc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-11-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-conf-loc/err-elem-cit-confproc-11-2/fail.xml"/>
            <x:result href="result-d10674.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-11-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-conf-loc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-conf-loc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-fpage</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-fpage/err-elem-cit-confproc-12-5/pass.xml"/>
            <x:result href="result-d10683.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-12-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-12-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-fpage/err-elem-cit-confproc-12-5/fail.xml"/>
            <x:result href="result-d10692.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-12-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-12-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-16-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-pub-id/err-elem-cit-confproc-16-2/pass.xml"/>
            <x:result href="result-d10701.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-16-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-16-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-16-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-pub-id/err-elem-cit-confproc-16-2/fail.xml"/>
            <x:result href="result-d10710.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-16-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-16-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-confproc-ext-link</x:label>
         <x:scenario>
            <x:label>err-elem-cit-confproc-14-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-ext-link/err-elem-cit-confproc-14-1/pass.xml"/>
            <x:result href="result-d10719.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-14-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-14-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-14-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-ext-link/err-elem-cit-confproc-14-1/fail.xml"/>
            <x:result href="result-d10728.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-14-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-14-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-14-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-ext-link/err-elem-cit-confproc-14-2/pass.xml"/>
            <x:result href="result-d10737.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-14-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-14-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-14-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-ext-link/err-elem-cit-confproc-14-2/fail.xml"/>
            <x:result href="result-d10746.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-14-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-14-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-14-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-ext-link/err-elem-cit-confproc-14-3/pass.xml"/>
            <x:result href="result-d10755.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-confproc-14-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-14-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-confproc-14-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-confproc-ext-link/err-elem-cit-confproc-14-3/fail.xml"/>
            <x:result href="result-d10764.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-confproc-14-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-confproc-14-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-confproc-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-confproc-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-thesis</x:label>
         <x:scenario>
            <x:label>err-elem-cit-thesis-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-2-1/pass.xml"/>
            <x:result href="result-d10773.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-2-1/fail.xml"/>
            <x:result href="result-d10782.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-3/pass.xml"/>
            <x:result href="result-d10791.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-3/fail.xml"/>
            <x:result href="result-d10800.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-6/pass.xml"/>
            <x:result href="result-d10809.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-6/fail.xml"/>
            <x:result href="result-d10818.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-8-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-8-1/pass.xml"/>
            <x:result href="result-d10827.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-8-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-8-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-8-1/fail.xml"/>
            <x:result href="result-d10836.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-8-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-9-1/pass.xml"/>
            <x:result href="result-d10845.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-9-1/fail.xml"/>
            <x:result href="result-d10854.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-11-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-11-1/pass.xml"/>
            <x:result href="result-d10863.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-11-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-11-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-11-1/fail.xml"/>
            <x:result href="result-d10872.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-11-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-13/pass.xml"/>
            <x:result href="result-d10881.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-13 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis/err-elem-cit-thesis-13/fail.xml"/>
            <x:result href="result-d10890.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-13 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-thesis-preson-group</x:label>
         <x:scenario>
            <x:label>err-elem-cit-thesis-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-preson-group/err-elem-cit-thesis-2-2/pass.xml"/>
            <x:result href="result-d10899.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-preson-group/err-elem-cit-thesis-2-2/fail.xml"/>
            <x:result href="result-d10908.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-2-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-preson-group/err-elem-cit-thesis-2-3/pass.xml"/>
            <x:result href="result-d10917.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-2-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-2-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-2-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-preson-group/err-elem-cit-thesis-2-3/fail.xml"/>
            <x:result href="result-d10926.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-2-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-2-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-preson-group-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-preson-group-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-thesis-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-thesis-8-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-article-title/err-elem-cit-thesis-8-2/pass.xml"/>
            <x:result href="result-d10935.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-8-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-8-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-8-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-article-title/err-elem-cit-thesis-8-2/fail.xml"/>
            <x:result href="result-d10944.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-8-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-8-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-thesis-publisher-name</x:label>
         <x:scenario>
            <x:label>err-elem-cit-thesis-9-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-publisher-name/err-elem-cit-thesis-9-2/pass.xml"/>
            <x:result href="result-d10953.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-9-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-9-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-publisher-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-publisher-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-9-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-publisher-name/err-elem-cit-thesis-9-2/fail.xml"/>
            <x:result href="result-d10962.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-9-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-9-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-publisher-name-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-publisher-name-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-thesis-publisher-loc</x:label>
         <x:scenario>
            <x:label>err-elem-cit-thesis-10-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-publisher-loc/err-elem-cit-thesis-10-2/pass.xml"/>
            <x:result href="result-d10971.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-10-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-publisher-loc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-publisher-loc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-10-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-publisher-loc/err-elem-cit-thesis-10-2/fail.xml"/>
            <x:result href="result-d10980.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-10-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-10-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-publisher-loc-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-publisher-loc-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-thesis-pub-id</x:label>
         <x:scenario>
            <x:label>err-elem-cit-thesis-11-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-pub-id/err-elem-cit-thesis-11-2/pass.xml"/>
            <x:result href="result-d10989.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-11-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-11-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-pub-id/err-elem-cit-thesis-11-2/fail.xml"/>
            <x:result href="result-d10998.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-11-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-pub-id-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-pub-id-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-thesis-ext-link</x:label>
         <x:scenario>
            <x:label>err-elem-cit-thesis-12-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-ext-link/err-elem-cit-thesis-12-1/pass.xml"/>
            <x:result href="result-d11007.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-12-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-12-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-12-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-ext-link/err-elem-cit-thesis-12-1/fail.xml"/>
            <x:result href="result-d11016.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-12-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-12-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-12-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-ext-link/err-elem-cit-thesis-12-2/pass.xml"/>
            <x:result href="result-d11025.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-12-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-12-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-12-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-ext-link/err-elem-cit-thesis-12-2/fail.xml"/>
            <x:result href="result-d11034.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-12-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-12-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-12-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-ext-link/err-elem-cit-thesis-12-3/pass.xml"/>
            <x:result href="result-d11043.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-thesis-12-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-12-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-thesis-12-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-thesis-ext-link/err-elem-cit-thesis-12-3/fail.xml"/>
            <x:result href="result-d11052.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-thesis-12-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-thesis-12-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-thesis-ext-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-thesis-ext-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-2-1/pass.xml"/>
            <x:result href="result-d11061.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-2-1/fail.xml"/>
            <x:result href="result-d11070.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-2-2/pass.xml"/>
            <x:result href="result-d11079.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-2-2/fail.xml"/>
            <x:result href="result-d11088.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-7-1/pass.xml"/>
            <x:result href="result-d11097.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-7-1/fail.xml"/>
            <x:result href="result-d11106.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-7-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-8-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-8-1/pass.xml"/>
            <x:result href="result-d11115.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-8-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-8-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-8-1/fail.xml"/>
            <x:result href="result-d11124.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-8-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-8-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-9-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-9-1/pass.xml"/>
            <x:result href="result-d11133.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-9-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-9-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-9-1/fail.xml"/>
            <x:result href="result-d11142.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-9-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-9-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-9-2-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-9-2-1/pass.xml"/>
            <x:result href="result-d11151.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-9-2-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-9-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-9-2-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-9-2-1/fail.xml"/>
            <x:result href="result-d11160.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-9-2-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-9-2-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-9-2-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-9-2-2/pass.xml"/>
            <x:result href="result-d11169.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-9-2-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-9-2-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-9-2-2/fail.xml"/>
            <x:result href="result-d11178.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-9-2-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-9-2-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-10-1-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-10-1-3/pass.xml"/>
            <x:result href="result-d11187.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-10-1-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-10-1-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-10-1-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-10-1-3/fail.xml"/>
            <x:result href="result-d11196.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-10-1-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-10-1-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-1/pass.xml"/>
            <x:result href="result-d11205.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-periodical-11-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-1/fail.xml"/>
            <x:result href="result-d11214.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-periodical-11-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-2/pass.xml"/>
            <x:result href="result-d11223.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-periodical-11-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-2/fail.xml"/>
            <x:result href="result-d11232.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-periodical-11-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-3/pass.xml"/>
            <x:result href="result-d11241.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-periodical-11-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-3/fail.xml"/>
            <x:result href="result-d11250.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-periodical-11-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-4/pass.xml"/>
            <x:result href="result-d11259.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-11-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-11-4/fail.xml"/>
            <x:result href="result-d11268.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-11-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-13/pass.xml"/>
            <x:result href="result-d11277.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-13 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-13/fail.xml"/>
            <x:result href="result-d11286.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-13 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-14-1/pass.xml"/>
            <x:result href="result-d11295.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical/err-elem-cit-periodical-14-1/fail.xml"/>
            <x:result href="result-d11304.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-14-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-year</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-2/pass.xml"/>
            <x:result href="result-d11313.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-2/fail.xml"/>
            <x:result href="result-d11322.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-7-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-3/pass.xml"/>
            <x:result href="result-d11331.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-3/fail.xml"/>
            <x:result href="result-d11340.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-7-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-4-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-4-1/pass.xml"/>
            <x:result href="result-d11349.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-4-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-4-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-4-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-4-1/fail.xml"/>
            <x:result href="result-d11358.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-7-4-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-4-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-4-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-4-2/pass.xml"/>
            <x:result href="result-d11367.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-4-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-4-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-4-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-4-2/fail.xml"/>
            <x:result href="result-d11376.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-7-4-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-4-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-5/pass.xml"/>
            <x:result href="result-d11385.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-5/fail.xml"/>
            <x:result href="result-d11394.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-7-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-6/pass.xml"/>
            <x:result href="result-d11403.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-6/fail.xml"/>
            <x:result href="result-d11412.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-7-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-7/pass.xml"/>
            <x:result href="result-d11421.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-7-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-7/fail.xml"/>
            <x:result href="result-d11430.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-7-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-8/pass.xml"/>
            <x:result href="result-d11439.xml"/>
            <x:test successful="true">
               <x:label>not report err-elem-cit-periodical-7-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-7-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-year/err-elem-cit-periodical-7-8/fail.xml"/>
            <x:result href="result-d11448.xml"/>
            <x:test successful="false">
               <x:label>report err-elem-cit-periodical-7-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-7-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-year-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-year-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-article-title</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-8-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-article-title/err-elem-cit-periodical-8-2/pass.xml"/>
            <x:result href="result-d11457.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-8-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-8-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-8-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-article-title/err-elem-cit-periodical-8-2/fail.xml"/>
            <x:result href="result-d11466.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-8-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-8-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-article-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-article-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-volume</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-10-1-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-volume/err-elem-cit-periodical-10-1-2/pass.xml"/>
            <x:result href="result-d11475.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-10-1-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-10-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-volume-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-volume-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-10-1-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-volume/err-elem-cit-periodical-10-1-2/fail.xml"/>
            <x:result href="result-d11484.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-10-1-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-10-1-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-volume-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-volume-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-fpage</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-fpage/err-elem-cit-periodical-11-5/pass.xml"/>
            <x:result href="result-d11493.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-11-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-11-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-fpage/err-elem-cit-periodical-11-5/fail.xml"/>
            <x:result href="result-d11502.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-11-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-11-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-fpage-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-fpage-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-string-date</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-string-date/err-elem-cit-periodical-14-2/pass.xml"/>
            <x:result href="result-d11511.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-string-date-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-string-date-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-string-date/err-elem-cit-periodical-14-2/fail.xml"/>
            <x:result href="result-d11520.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-14-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-string-date-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-string-date-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-string-date/err-elem-cit-periodical-14-3/pass.xml"/>
            <x:result href="result-d11529.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-string-date-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-string-date-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-string-date/err-elem-cit-periodical-14-3/fail.xml"/>
            <x:result href="result-d11538.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-14-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-string-date-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-string-date-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-string-date/err-elem-cit-periodical-14-8/pass.xml"/>
            <x:result href="result-d11547.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-8 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-string-date-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-string-date-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-string-date/err-elem-cit-periodical-14-8/fail.xml"/>
            <x:result href="result-d11556.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-14-8 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-string-date-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-string-date-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-month</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-month/err-elem-cit-periodical-14-4/pass.xml"/>
            <x:result href="result-d11565.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-month-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-month-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-month/err-elem-cit-periodical-14-4/fail.xml"/>
            <x:result href="result-d11574.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-14-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-month-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-month-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-month/err-elem-cit-periodical-14-5/pass.xml"/>
            <x:result href="result-d11583.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-month-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-month-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-month/err-elem-cit-periodical-14-5/fail.xml"/>
            <x:result href="result-d11592.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-14-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-month-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-month-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>elem-citation-periodical-day</x:label>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-day/err-elem-cit-periodical-14-6/pass.xml"/>
            <x:result href="result-d11601.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-day-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-day-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-day/err-elem-cit-periodical-14-6/fail.xml"/>
            <x:result href="result-d11610.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-14-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-day-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-day-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-day/err-elem-cit-periodical-14-7/pass.xml"/>
            <x:result href="result-d11619.xml"/>
            <x:test successful="true">
               <x:label>not assert err-elem-cit-periodical-14-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-day-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-day-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>err-elem-cit-periodical-14-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/elem-citation-periodical-day/err-elem-cit-periodical-14-7/fail.xml"/>
            <x:result href="result-d11628.xml"/>
            <x:test successful="false">
               <x:label>assert err-elem-cit-periodical-14-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'err-elem-cit-periodical-14-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert elem-citation-periodical-day-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'elem-citation-periodical-day-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>pub-id-tests</x:label>
         <x:scenario>
            <x:label>pub-id-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-id-tests/pub-id-test-1/pass.xml"/>
            <x:result href="result-d11637.xml"/>
            <x:test successful="true">
               <x:label>not report pub-id-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-id-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-id-tests/pub-id-test-1/fail.xml"/>
            <x:result href="result-d11646.xml"/>
            <x:test successful="false">
               <x:label>report pub-id-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-id-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-id-tests/pub-id-test-2/pass.xml"/>
            <x:result href="result-d11655.xml"/>
            <x:test successful="true">
               <x:label>not report pub-id-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-id-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-id-tests/pub-id-test-2/fail.xml"/>
            <x:result href="result-d11664.xml"/>
            <x:test successful="false">
               <x:label>report pub-id-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-id-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-id-tests/pub-id-test-3/pass.xml"/>
            <x:result href="result-d11673.xml"/>
            <x:test successful="true">
               <x:label>not report pub-id-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-id-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pub-id-tests/pub-id-test-3/fail.xml"/>
            <x:result href="result-d11682.xml"/>
            <x:test successful="false">
               <x:label>report pub-id-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pub-id-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-id-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-title-tests</x:label>
         <x:scenario>
            <x:label>feature-title-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-title-tests/feature-title-test-1/pass.xml"/>
            <x:result href="result-d11691.xml"/>
            <x:test successful="true">
               <x:label>not report feature-title-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-title-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-title-tests/feature-title-test-1/fail.xml"/>
            <x:result href="result-d11700.xml"/>
            <x:test successful="true">
               <x:label>report feature-title-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-title-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-abstract-tests</x:label>
         <x:scenario>
            <x:label>feature-abstract-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-abstract-tests/feature-abstract-test-1/pass.xml"/>
            <x:result href="result-d11709.xml"/>
            <x:test successful="true">
               <x:label>not assert feature-abstract-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-abstract-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-abstract-tests/feature-abstract-test-1/fail.xml"/>
            <x:result href="result-d11718.xml"/>
            <x:test successful="true">
               <x:label>assert feature-abstract-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-abstract-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-abstract-tests/feature-abstract-test-2/pass.xml"/>
            <x:result href="result-d11727.xml"/>
            <x:test successful="true">
               <x:label>not assert feature-abstract-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-abstract-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-abstract-tests/feature-abstract-test-2/fail.xml"/>
            <x:result href="result-d11736.xml"/>
            <x:test successful="true">
               <x:label>assert feature-abstract-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-abstract-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-abstract-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-subj-tests-1</x:label>
         <x:scenario>
            <x:label>feature-subj-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-1/feature-subj-test-1/pass.xml"/>
            <x:result href="result-d11745.xml"/>
            <x:test successful="true">
               <x:label>not assert feature-subj-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-subj-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-1/feature-subj-test-1/fail.xml"/>
            <x:result href="result-d11754.xml"/>
            <x:test successful="true">
               <x:label>assert feature-subj-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-1-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-1-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-subj-tests-2</x:label>
         <x:scenario>
            <x:label>feature-subj-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-2/feature-subj-test-2/pass.xml"/>
            <x:result href="result-d11763.xml"/>
            <x:test successful="true">
               <x:label>not report feature-subj-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-subj-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-2/feature-subj-test-2/fail.xml"/>
            <x:result href="result-d11772.xml"/>
            <x:test successful="true">
               <x:label>report feature-subj-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-subj-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-2/feature-subj-test-3/pass.xml"/>
            <x:result href="result-d11781.xml"/>
            <x:test successful="true">
               <x:label>not report feature-subj-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-subj-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-2/feature-subj-test-3/fail.xml"/>
            <x:result href="result-d11790.xml"/>
            <x:test successful="true">
               <x:label>report feature-subj-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-subj-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-2/feature-subj-test-4/pass.xml"/>
            <x:result href="result-d11799.xml"/>
            <x:test successful="true">
               <x:label>not report feature-subj-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-subj-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-subj-tests-2/feature-subj-test-4/fail.xml"/>
            <x:result href="result-d11808.xml"/>
            <x:test successful="true">
               <x:label>report feature-subj-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-subj-tests-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-subj-tests-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-article-category-tests</x:label>
         <x:scenario>
            <x:label>feature-article-category-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-article-category-tests/feature-article-category-test-1/pass.xml"/>
            <x:result href="result-d11817.xml"/>
            <x:test successful="true">
               <x:label>not assert feature-article-category-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-article-category-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-article-category-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-article-category-tests/feature-article-category-test-1/fail.xml"/>
            <x:result href="result-d11826.xml"/>
            <x:test successful="true">
               <x:label>assert feature-article-category-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-article-category-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-article-category-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-article-category-tests/feature-article-category-test-2/pass.xml"/>
            <x:result href="result-d11835.xml"/>
            <x:test successful="true">
               <x:label>not report feature-article-category-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-article-category-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-article-category-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-article-category-tests/feature-article-category-test-2/fail.xml"/>
            <x:result href="result-d11844.xml"/>
            <x:test successful="true">
               <x:label>report feature-article-category-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-article-category-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-article-category-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-author-tests</x:label>
         <x:scenario>
            <x:label>feature-author-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-author-tests/feature-author-test-1/pass.xml"/>
            <x:result href="result-d11853.xml"/>
            <x:test successful="true">
               <x:label>not assert feature-author-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-author-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-author-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-author-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-author-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-author-tests/feature-author-test-1/fail.xml"/>
            <x:result href="result-d11862.xml"/>
            <x:test successful="true">
               <x:label>assert feature-author-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-author-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-author-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-author-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>feature-bio-tests</x:label>
         <x:scenario>
            <x:label>feature-bio-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-bio-tests/feature-bio-test-1/pass.xml"/>
            <x:result href="result-d11871.xml"/>
            <x:test successful="true">
               <x:label>not assert feature-bio-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-bio-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-bio-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-bio-tests/feature-bio-test-1/fail.xml"/>
            <x:result href="result-d11880.xml"/>
            <x:test successful="true">
               <x:label>assert feature-bio-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-bio-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-bio-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-bio-tests/feature-bio-test-2/pass.xml"/>
            <x:result href="result-d11889.xml"/>
            <x:test successful="true">
               <x:label>not report feature-bio-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-bio-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-bio-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-bio-tests/feature-bio-test-2/fail.xml"/>
            <x:result href="result-d11898.xml"/>
            <x:test successful="true">
               <x:label>report feature-bio-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-bio-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-bio-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-bio-tests/feature-bio-test-3/pass.xml"/>
            <x:result href="result-d11907.xml"/>
            <x:test successful="true">
               <x:label>not report feature-bio-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-bio-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>feature-bio-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/feature-bio-tests/feature-bio-test-3/fail.xml"/>
            <x:result href="result-d11916.xml"/>
            <x:test successful="true">
               <x:label>report feature-bio-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert feature-bio-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'feature-bio-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>correction-tests</x:label>
         <x:scenario>
            <x:label>corr-aff-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-aff-presence/pass.xml"/>
            <x:result href="result-d11925.xml"/>
            <x:test successful="true">
               <x:label>not report corr-aff-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-aff-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-aff-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-aff-presence/fail.xml"/>
            <x:result href="result-d11934.xml"/>
            <x:test successful="true">
               <x:label>report corr-aff-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-aff-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-auth-kw-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-auth-kw-presence/pass.xml"/>
            <x:result href="result-d11943.xml"/>
            <x:test successful="true">
               <x:label>not report corr-auth-kw-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-auth-kw-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-auth-kw-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-auth-kw-presence/fail.xml"/>
            <x:result href="result-d11952.xml"/>
            <x:test successful="true">
               <x:label>report corr-auth-kw-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-auth-kw-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-COI-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-COI-presence/pass.xml"/>
            <x:result href="result-d11961.xml"/>
            <x:test successful="true">
               <x:label>not report corr-COI-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-COI-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-COI-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-COI-presence/fail.xml"/>
            <x:result href="result-d11970.xml"/>
            <x:test successful="true">
               <x:label>report corr-COI-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-COI-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-self-uri-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-self-uri-presence/pass.xml"/>
            <x:result href="result-d11979.xml"/>
            <x:test successful="true">
               <x:label>not report corr-self-uri-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-self-uri-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-self-uri-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-self-uri-presence/fail.xml"/>
            <x:result href="result-d11988.xml"/>
            <x:test successful="true">
               <x:label>report corr-self-uri-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-self-uri-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-abstract-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-abstract-presence/pass.xml"/>
            <x:result href="result-d11997.xml"/>
            <x:test successful="true">
               <x:label>not report corr-abstract-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-abstract-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-abstract-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-abstract-presence/fail.xml"/>
            <x:result href="result-d12006.xml"/>
            <x:test successful="true">
               <x:label>report corr-abstract-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-abstract-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-back-sec-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-back-sec/pass.xml"/>
            <x:result href="result-d12015.xml"/>
            <x:test successful="true">
               <x:label>not report corr-back-sec error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-back-sec'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-back-sec-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-back-sec/fail.xml"/>
            <x:result href="result-d12024.xml"/>
            <x:test successful="true">
               <x:label>report corr-back-sec error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-back-sec'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-impact-statement-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-impact-statement/pass.xml"/>
            <x:result href="result-d12033.xml"/>
            <x:test successful="true">
               <x:label>not report corr-impact-statement error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-impact-statement'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-impact-statement-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-impact-statement/fail.xml"/>
            <x:result href="result-d12042.xml"/>
            <x:test successful="true">
               <x:label>report corr-impact-statement error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-impact-statement'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-SE-BRE-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-SE-BRE/pass.xml"/>
            <x:result href="result-d12051.xml"/>
            <x:test successful="true">
               <x:label>not report corr-SE-BRE error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-SE-BRE'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>corr-SE-BRE-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/correction-tests/corr-SE-BRE/fail.xml"/>
            <x:result href="result-d12060.xml"/>
            <x:test successful="true">
               <x:label>report corr-SE-BRE error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'corr-SE-BRE'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert correction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'correction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>retraction-tests</x:label>
         <x:scenario>
            <x:label>retr-aff-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-aff-presence/pass.xml"/>
            <x:result href="result-d12069.xml"/>
            <x:test successful="true">
               <x:label>not report retr-aff-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-aff-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-aff-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-aff-presence/fail.xml"/>
            <x:result href="result-d12078.xml"/>
            <x:test successful="false">
               <x:label>report retr-aff-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-aff-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-auth-kw-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-auth-kw-presence/pass.xml"/>
            <x:result href="result-d12087.xml"/>
            <x:test successful="true">
               <x:label>not report retr-auth-kw-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-auth-kw-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-auth-kw-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-auth-kw-presence/fail.xml"/>
            <x:result href="result-d12096.xml"/>
            <x:test successful="false">
               <x:label>report retr-auth-kw-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-auth-kw-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-COI-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-COI-presence/pass.xml"/>
            <x:result href="result-d12105.xml"/>
            <x:test successful="true">
               <x:label>not report retr-COI-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-COI-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-COI-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-COI-presence/fail.xml"/>
            <x:result href="result-d12114.xml"/>
            <x:test successful="false">
               <x:label>report retr-COI-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-COI-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-self-uri-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-self-uri-presence/pass.xml"/>
            <x:result href="result-d12123.xml"/>
            <x:test successful="true">
               <x:label>not report retr-self-uri-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-self-uri-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-self-uri-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-self-uri-presence/fail.xml"/>
            <x:result href="result-d12132.xml"/>
            <x:test successful="false">
               <x:label>report retr-self-uri-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-self-uri-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-abstract-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-abstract-presence/pass.xml"/>
            <x:result href="result-d12141.xml"/>
            <x:test successful="true">
               <x:label>not report retr-abstract-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-abstract-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-abstract-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-abstract-presence/fail.xml"/>
            <x:result href="result-d12150.xml"/>
            <x:test successful="false">
               <x:label>report retr-abstract-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-abstract-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-back-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-back/pass.xml"/>
            <x:result href="result-d12159.xml"/>
            <x:test successful="true">
               <x:label>not report retr-back error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-back'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-back-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-back/fail.xml"/>
            <x:result href="result-d12168.xml"/>
            <x:test successful="false">
               <x:label>report retr-back error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-back'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-impact-statement-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-impact-statement/pass.xml"/>
            <x:result href="result-d12177.xml"/>
            <x:test successful="true">
               <x:label>not report retr-impact-statement error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-impact-statement'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-impact-statement-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-impact-statement/fail.xml"/>
            <x:result href="result-d12186.xml"/>
            <x:test successful="false">
               <x:label>report retr-impact-statement error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-impact-statement'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-SE-BRE-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-SE-BRE/pass.xml"/>
            <x:result href="result-d12195.xml"/>
            <x:test successful="true">
               <x:label>not report retr-SE-BRE error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-SE-BRE'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>retr-SE-BRE-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/retraction-tests/retr-SE-BRE/fail.xml"/>
            <x:result href="result-d12204.xml"/>
            <x:test successful="false">
               <x:label>report retr-SE-BRE error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retr-SE-BRE'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert retraction-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'retraction-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>final-gene-primer-sequence</x:label>
         <x:scenario>
            <x:label>gene-primer-sequence-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/final-gene-primer-sequence/gene-primer-sequence-test/pass.xml"/>
            <x:result href="result-d12213.xml"/>
            <x:test successful="true">
               <x:label>not assert gene-primer-sequence-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'gene-primer-sequence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert final-gene-primer-sequence-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-gene-primer-sequence-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>gene-primer-sequence-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/final-gene-primer-sequence/gene-primer-sequence-test/fail.xml"/>
            <x:result href="result-d12222.xml"/>
            <x:test successful="true">
               <x:label>assert gene-primer-sequence-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'gene-primer-sequence-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert final-gene-primer-sequence-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-gene-primer-sequence-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>rrid-org-code</x:label>
         <x:scenario>
            <x:label>rrid-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/rrid-test/pass.xml"/>
            <x:result href="result-d12231.xml"/>
            <x:test successful="true">
               <x:label>not report rrid-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>rrid-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/rrid-test/fail.xml"/>
            <x:result href="result-d12240.xml"/>
            <x:test successful="false">
               <x:label>report rrid-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>org-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/org-test/pass.xml"/>
            <x:result href="result-d12249.xml"/>
            <x:test successful="true">
               <x:label>not report org-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>org-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/org-test/fail.xml"/>
            <x:result href="result-d12258.xml"/>
            <x:test successful="false">
               <x:label>report org-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>code-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/code-test/pass.xml"/>
            <x:result href="result-d12267.xml"/>
            <x:test successful="true">
               <x:label>not report code-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'code-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>code-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/code-test/fail.xml"/>
            <x:result href="result-d12276.xml"/>
            <x:test successful="false">
               <x:label>report code-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'code-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cell-spacing-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/cell-spacing-test/pass.xml"/>
            <x:result href="result-d12285.xml"/>
            <x:test successful="true">
               <x:label>not report cell-spacing-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cell-spacing-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cell-spacing-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/cell-spacing-test/fail.xml"/>
            <x:result href="result-d12294.xml"/>
            <x:test successful="true">
               <x:label>report cell-spacing-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cell-spacing-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-spacing-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/equal-spacing-test/pass.xml"/>
            <x:result href="result-d12303.xml"/>
            <x:test successful="true">
               <x:label>not report equal-spacing-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-spacing-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equal-spacing-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/equal-spacing-test/fail.xml"/>
            <x:result href="result-d12312.xml"/>
            <x:test successful="false">
               <x:label>report equal-spacing-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equal-spacing-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ring-diacritic-symbol-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/ring-diacritic-symbol-test/pass.xml"/>
            <x:result href="result-d12321.xml"/>
            <x:test successful="true">
               <x:label>not report ring-diacritic-symbol-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ring-diacritic-symbol-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ring-diacritic-symbol-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/ring-diacritic-symbol-test/fail.xml"/>
            <x:result href="result-d12330.xml"/>
            <x:test successful="false">
               <x:label>report ring-diacritic-symbol-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ring-diacritic-symbol-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>diabetes-1-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/diabetes-1-test/pass.xml"/>
            <x:result href="result-d12339.xml"/>
            <x:test successful="true">
               <x:label>not report diabetes-1-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'diabetes-1-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>diabetes-1-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/diabetes-1-test/fail.xml"/>
            <x:result href="result-d12348.xml"/>
            <x:test successful="false">
               <x:label>report diabetes-1-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'diabetes-1-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>diabetes-2-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/diabetes-2-test/pass.xml"/>
            <x:result href="result-d12357.xml"/>
            <x:test successful="true">
               <x:label>not report diabetes-2-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'diabetes-2-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>diabetes-2-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/rrid-org-code/diabetes-2-test/fail.xml"/>
            <x:result href="result-d12366.xml"/>
            <x:test successful="false">
               <x:label>report diabetes-2-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'diabetes-2-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert rrid-org-code-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rrid-org-code-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>duplicate-ref</x:label>
         <x:scenario>
            <x:label>duplicate-ref-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-1/pass.xml"/>
            <x:result href="result-d12375.xml"/>
            <x:test successful="true">
               <x:label>not report duplicate-ref-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-1/fail.xml"/>
            <x:result href="result-d12384.xml"/>
            <x:test successful="true">
               <x:label>report duplicate-ref-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-2/pass.xml"/>
            <x:result href="result-d12393.xml"/>
            <x:test successful="true">
               <x:label>not report duplicate-ref-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-2/fail.xml"/>
            <x:result href="result-d12402.xml"/>
            <x:test successful="true">
               <x:label>report duplicate-ref-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-3/pass.xml"/>
            <x:result href="result-d12411.xml"/>
            <x:test successful="true">
               <x:label>not report duplicate-ref-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-3/fail.xml"/>
            <x:result href="result-d12420.xml"/>
            <x:test successful="true">
               <x:label>report duplicate-ref-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-4/pass.xml"/>
            <x:result href="result-d12429.xml"/>
            <x:test successful="true">
               <x:label>not report duplicate-ref-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-4/fail.xml"/>
            <x:result href="result-d12438.xml"/>
            <x:test successful="true">
               <x:label>report duplicate-ref-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-6/pass.xml"/>
            <x:result href="result-d12447.xml"/>
            <x:test successful="true">
               <x:label>not report duplicate-ref-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>duplicate-ref-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/duplicate-ref/duplicate-ref-test-6/fail.xml"/>
            <x:result href="result-d12456.xml"/>
            <x:test successful="true">
               <x:label>report duplicate-ref-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert duplicate-ref-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'duplicate-ref-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref-xref-conformance</x:label>
         <x:scenario>
            <x:label>ref-xref-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-1/pass.xml"/>
            <x:result href="result-d12465.xml"/>
            <x:test successful="true">
               <x:label>not assert ref-xref-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-1/fail.xml"/>
            <x:result href="result-d12474.xml"/>
            <x:test successful="false">
               <x:label>assert ref-xref-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-2/pass.xml"/>
            <x:result href="result-d12483.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-2/fail.xml"/>
            <x:result href="result-d12492.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-3/pass.xml"/>
            <x:result href="result-d12501.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-3/fail.xml"/>
            <x:result href="result-d12510.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-4/pass.xml"/>
            <x:result href="result-d12519.xml"/>
            <x:test successful="true">
               <x:label>not assert ref-xref-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-4/fail.xml"/>
            <x:result href="result-d12528.xml"/>
            <x:test successful="false">
               <x:label>assert ref-xref-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-5/pass.xml"/>
            <x:result href="result-d12537.xml"/>
            <x:test successful="true">
               <x:label>not assert ref-xref-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-5/fail.xml"/>
            <x:result href="result-d12546.xml"/>
            <x:test successful="false">
               <x:label>assert ref-xref-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-6/pass.xml"/>
            <x:result href="result-d12555.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-6/fail.xml"/>
            <x:result href="result-d12564.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-7/pass.xml"/>
            <x:result href="result-d12573.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-7 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-7/fail.xml"/>
            <x:result href="result-d12582.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-7 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-8/pass.xml"/>
            <x:result href="result-d12591.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-8 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-8/fail.xml"/>
            <x:result href="result-d12600.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-8 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-9/pass.xml"/>
            <x:result href="result-d12609.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-9 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-9/fail.xml"/>
            <x:result href="result-d12618.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-9 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-11-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-11/pass.xml"/>
            <x:result href="result-d12627.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-11 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-11-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-11/fail.xml"/>
            <x:result href="result-d12636.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-11 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-11'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-12-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-12/pass.xml"/>
            <x:result href="result-d12645.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-12 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-12-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-12/fail.xml"/>
            <x:result href="result-d12654.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-12 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-12'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-13-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-13/pass.xml"/>
            <x:result href="result-d12663.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-13 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-13-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-13/fail.xml"/>
            <x:result href="result-d12672.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-13 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-13'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-14-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-14/pass.xml"/>
            <x:result href="result-d12681.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-14 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-14'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-14-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-14/fail.xml"/>
            <x:result href="result-d12690.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-14 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-14'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-15-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-15/pass.xml"/>
            <x:result href="result-d12699.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-15 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-15-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-15/fail.xml"/>
            <x:result href="result-d12708.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-15 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-15'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-16-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-16/pass.xml"/>
            <x:result href="result-d12717.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-16 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-16-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-16/fail.xml"/>
            <x:result href="result-d12726.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-16 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-16'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-17-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-17/pass.xml"/>
            <x:result href="result-d12735.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-17 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-17'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-17-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-17/fail.xml"/>
            <x:result href="result-d12744.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-17 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-17'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-18-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-18/pass.xml"/>
            <x:result href="result-d12753.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-18 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-18-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-18/fail.xml"/>
            <x:result href="result-d12762.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-18 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-18'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-19-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-19/pass.xml"/>
            <x:result href="result-d12771.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-19 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-19'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-19-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-19/fail.xml"/>
            <x:result href="result-d12780.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-19 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-19'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-20-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-20/pass.xml"/>
            <x:result href="result-d12789.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-20 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-20'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-20-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-20/fail.xml"/>
            <x:result href="result-d12798.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-20 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-20'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-21-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-21/pass.xml"/>
            <x:result href="result-d12807.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-21 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-21'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-21-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-21/fail.xml"/>
            <x:result href="result-d12816.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-21 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-21'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-22-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-22/pass.xml"/>
            <x:result href="result-d12825.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-test-22 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-22'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-test-22-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-conformance/ref-xref-test-22/fail.xml"/>
            <x:result href="result-d12834.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-test-22 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-test-22'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>unlinked-ref-cite</x:label>
         <x:scenario>
            <x:label>text-v-cite-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unlinked-ref-cite/text-v-cite-test/pass.xml"/>
            <x:result href="result-d12843.xml"/>
            <x:test successful="true">
               <x:label>not report text-v-cite-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'text-v-cite-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unlinked-ref-cite-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unlinked-ref-cite-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>text-v-cite-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unlinked-ref-cite/text-v-cite-test/fail.xml"/>
            <x:result href="result-d12852.xml"/>
            <x:test successful="false">
               <x:label>report text-v-cite-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'text-v-cite-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unlinked-ref-cite-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unlinked-ref-cite-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>vid-xref-conformance</x:label>
         <x:scenario>
            <x:label>vid-xref-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-conformity-1/pass.xml"/>
            <x:result href="result-d12861.xml"/>
            <x:test successful="true">
               <x:label>not assert vid-xref-conformity-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-conformity-1/fail.xml"/>
            <x:result href="result-d12870.xml"/>
            <x:test successful="false">
               <x:label>assert vid-xref-conformity-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-conformity-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-conformity-2/pass.xml"/>
            <x:result href="result-d12879.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-conformity-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-conformity-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-conformity-2/fail.xml"/>
            <x:result href="result-d12888.xml"/>
            <x:test successful="false">
               <x:label>report vid-xref-conformity-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-2/pass.xml"/>
            <x:result href="result-d12897.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-2/fail.xml"/>
            <x:result href="result-d12906.xml"/>
            <x:test successful="false">
               <x:label>report vid-xref-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-3/pass.xml"/>
            <x:result href="result-d12915.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-3/fail.xml"/>
            <x:result href="result-d12924.xml"/>
            <x:test successful="false">
               <x:label>report vid-xref-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-4/pass.xml"/>
            <x:result href="result-d12933.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-4/fail.xml"/>
            <x:result href="result-d12942.xml"/>
            <x:test successful="false">
               <x:label>report vid-xref-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-5/pass.xml"/>
            <x:result href="result-d12951.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-5/fail.xml"/>
            <x:result href="result-d12960.xml"/>
            <x:test successful="false">
               <x:label>report vid-xref-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-6/pass.xml"/>
            <x:result href="result-d12969.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-6/fail.xml"/>
            <x:result href="result-d12978.xml"/>
            <x:test successful="false">
               <x:label>report vid-xref-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-7/pass.xml"/>
            <x:result href="result-d12987.xml"/>
            <x:test successful="true">
               <x:label>not report vid-xref-test-7 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vid-xref-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/vid-xref-conformance/vid-xref-test-7/fail.xml"/>
            <x:result href="result-d12996.xml"/>
            <x:test successful="false">
               <x:label>report vid-xref-test-7 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert vid-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vid-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-xref-conformance</x:label>
         <x:scenario>
            <x:label>fig-xref-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-1/pass.xml"/>
            <x:result href="result-d13005.xml"/>
            <x:test successful="true">
               <x:label>not assert fig-xref-conformity-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-1/fail.xml"/>
            <x:result href="result-d13014.xml"/>
            <x:test successful="false">
               <x:label>assert fig-xref-conformity-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-2/pass.xml"/>
            <x:result href="result-d13023.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-conformity-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-2/fail.xml"/>
            <x:result href="result-d13032.xml"/>
            <x:test successful="false">
               <x:label>report fig-xref-conformity-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-3/pass.xml"/>
            <x:result href="result-d13041.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-conformity-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-3/fail.xml"/>
            <x:result href="result-d13050.xml"/>
            <x:test successful="false">
               <x:label>report fig-xref-conformity-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-4/pass.xml"/>
            <x:result href="result-d13059.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-conformity-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-4/fail.xml"/>
            <x:result href="result-d13068.xml"/>
            <x:test successful="false">
               <x:label>report fig-xref-conformity-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-5/pass.xml"/>
            <x:result href="result-d13077.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-conformity-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-5/fail.xml"/>
            <x:result href="result-d13086.xml"/>
            <x:test successful="false">
               <x:label>report fig-xref-conformity-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-6/pass.xml"/>
            <x:result href="result-d13095.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-conformity-6 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-conformity-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-conformity-6/fail.xml"/>
            <x:result href="result-d13104.xml"/>
            <x:test successful="false">
               <x:label>report fig-xref-conformity-6 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformity-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-2/pass.xml"/>
            <x:result href="result-d13113.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-2/fail.xml"/>
            <x:result href="result-d13122.xml"/>
            <x:test successful="false">
               <x:label>report fig-xref-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-3/pass.xml"/>
            <x:result href="result-d13131.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-3/fail.xml"/>
            <x:result href="result-d13140.xml"/>
            <x:test successful="false">
               <x:label>report fig-xref-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-4/pass.xml"/>
            <x:result href="result-d13149.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-4/fail.xml"/>
            <x:result href="result-d13158.xml"/>
            <x:test successful="false">
               <x:label>report fig-xref-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-5/pass.xml"/>
            <x:result href="result-d13167.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-5/fail.xml"/>
            <x:result href="result-d13176.xml"/>
            <x:test successful="false">
               <x:label>report fig-xref-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-6-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-6/pass.xml"/>
            <x:result href="result-d13185.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-6 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-6-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-6/fail.xml"/>
            <x:result href="result-d13194.xml"/>
            <x:test successful="false">
               <x:label>report fig-xref-test-6 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-6'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-7-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-7/pass.xml"/>
            <x:result href="result-d13203.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-7 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-7-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-7/fail.xml"/>
            <x:result href="result-d13212.xml"/>
            <x:test successful="false">
               <x:label>report fig-xref-test-7 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-7'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-8-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-8/pass.xml"/>
            <x:result href="result-d13221.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-8 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-8-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-8/fail.xml"/>
            <x:result href="result-d13230.xml"/>
            <x:test successful="false">
               <x:label>report fig-xref-test-8 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-8'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-9-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-9/pass.xml"/>
            <x:result href="result-d13239.xml"/>
            <x:test successful="true">
               <x:label>not report fig-xref-test-9 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>fig-xref-test-9-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-xref-conformance/fig-xref-test-9/fail.xml"/>
            <x:result href="result-d13248.xml"/>
            <x:test successful="false">
               <x:label>report fig-xref-test-9 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-test-9'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert fig-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>table-xref-conformance</x:label>
         <x:scenario>
            <x:label>table-xref-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-1/pass.xml"/>
            <x:result href="result-d13257.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-conformity-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-1/fail.xml"/>
            <x:result href="result-d13266.xml"/>
            <x:test successful="false">
               <x:label>report table-xref-conformity-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-2/pass.xml"/>
            <x:result href="result-d13275.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-conformity-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-2/fail.xml"/>
            <x:result href="result-d13284.xml"/>
            <x:test successful="false">
               <x:label>report table-xref-conformity-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-3/pass.xml"/>
            <x:result href="result-d13293.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-conformity-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-3/fail.xml"/>
            <x:result href="result-d13302.xml"/>
            <x:test successful="false">
               <x:label>report table-xref-conformity-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-4/pass.xml"/>
            <x:result href="result-d13311.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-conformity-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-conformity-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-conformity-4/fail.xml"/>
            <x:result href="result-d13320.xml"/>
            <x:test successful="false">
               <x:label>report table-xref-conformity-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformity-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-test-1/pass.xml"/>
            <x:result href="result-d13329.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-test-1/fail.xml"/>
            <x:result href="result-d13338.xml"/>
            <x:test successful="false">
               <x:label>report table-xref-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-test-2/pass.xml"/>
            <x:result href="result-d13347.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-test-2/fail.xml"/>
            <x:result href="result-d13356.xml"/>
            <x:test successful="false">
               <x:label>report table-xref-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-test-3/pass.xml"/>
            <x:result href="result-d13365.xml"/>
            <x:test successful="true">
               <x:label>not report table-xref-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>table-xref-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/table-xref-conformance/table-xref-test-3/fail.xml"/>
            <x:result href="result-d13374.xml"/>
            <x:test successful="false">
               <x:label>report table-xref-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert table-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'table-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>supp-file-xref-conformance</x:label>
         <x:scenario>
            <x:label>supp-file-xref-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-1/pass.xml"/>
            <x:result href="result-d13383.xml"/>
            <x:test successful="true">
               <x:label>not report supp-file-xref-conformity-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-1/fail.xml"/>
            <x:result href="result-d13392.xml"/>
            <x:test successful="false">
               <x:label>report supp-file-xref-conformity-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-2/pass.xml"/>
            <x:result href="result-d13401.xml"/>
            <x:test successful="true">
               <x:label>not report supp-file-xref-conformity-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-2/fail.xml"/>
            <x:result href="result-d13410.xml"/>
            <x:test successful="false">
               <x:label>report supp-file-xref-conformity-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-3/pass.xml"/>
            <x:result href="result-d13419.xml"/>
            <x:test successful="true">
               <x:label>not report supp-file-xref-conformity-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-3/fail.xml"/>
            <x:result href="result-d13428.xml"/>
            <x:test successful="false">
               <x:label>report supp-file-xref-conformity-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-4/pass.xml"/>
            <x:result href="result-d13437.xml"/>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformity-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-4/fail.xml"/>
            <x:result href="result-d13446.xml"/>
            <x:test successful="false">
               <x:label>assert supp-file-xref-conformity-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-5/pass.xml"/>
            <x:result href="result-d13455.xml"/>
            <x:test successful="true">
               <x:label>not assert supp-file-xref-conformity-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-conformity-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-conformity-5/fail.xml"/>
            <x:result href="result-d13464.xml"/>
            <x:test successful="false">
               <x:label>assert supp-file-xref-conformity-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformity-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-test-1/pass.xml"/>
            <x:result href="result-d13473.xml"/>
            <x:test successful="true">
               <x:label>not report supp-file-xref-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-file-xref-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-file-xref-test-1/fail.xml"/>
            <x:result href="result-d13482.xml"/>
            <x:test successful="false">
               <x:label>report supp-file-xref-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-xref-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-xref-test-2/pass.xml"/>
            <x:result href="result-d13491.xml"/>
            <x:test successful="true">
               <x:label>not report supp-xref-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-xref-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-xref-test-2/fail.xml"/>
            <x:result href="result-d13500.xml"/>
            <x:test successful="false">
               <x:label>report supp-xref-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-xref-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-xref-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-xref-test-3/pass.xml"/>
            <x:result href="result-d13509.xml"/>
            <x:test successful="true">
               <x:label>not report supp-xref-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supp-xref-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/supp-file-xref-conformance/supp-xref-test-3/fail.xml"/>
            <x:result href="result-d13518.xml"/>
            <x:test successful="false">
               <x:label>report supp-xref-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-xref-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert supp-file-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supp-file-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>equation-xref-conformance</x:label>
         <x:scenario>
            <x:label>equ-xref-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equation-xref-conformance/equ-xref-conformity-1/pass.xml"/>
            <x:result href="result-d13527.xml"/>
            <x:test successful="true">
               <x:label>not report equ-xref-conformity-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equ-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equation-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equation-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equ-xref-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equation-xref-conformance/equ-xref-conformity-1/fail.xml"/>
            <x:result href="result-d13536.xml"/>
            <x:test successful="true">
               <x:label>report equ-xref-conformity-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equ-xref-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equation-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equation-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equ-xref-conformity-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equation-xref-conformance/equ-xref-conformity-2/pass.xml"/>
            <x:result href="result-d13545.xml"/>
            <x:test successful="true">
               <x:label>not assert equ-xref-conformity-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equ-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equation-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equation-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>equ-xref-conformity-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/equation-xref-conformance/equ-xref-conformity-2/fail.xml"/>
            <x:result href="result-d13554.xml"/>
            <x:test successful="true">
               <x:label>assert equ-xref-conformity-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equ-xref-conformity-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert equation-xref-conformance-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'equation-xref-conformance-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>org-ref-article-book-title</x:label>
         <x:scenario>
            <x:label>bssubtilis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/bssubtilis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13563.xml"/>
            <x:test successful="true">
               <x:label>not report bssubtilis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bssubtilis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bssubtilis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/bssubtilis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13572.xml"/>
            <x:test successful="true">
               <x:label>report bssubtilis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bssubtilis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bacillusssubtilis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/bacillusssubtilis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13581.xml"/>
            <x:test successful="true">
               <x:label>not report bacillusssubtilis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bacillusssubtilis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bacillusssubtilis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/bacillusssubtilis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13590.xml"/>
            <x:test successful="true">
               <x:label>report bacillusssubtilis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bacillusssubtilis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsmelanogaster-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dsmelanogaster-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13599.xml"/>
            <x:test successful="true">
               <x:label>not report dsmelanogaster-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsmelanogaster-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsmelanogaster-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dsmelanogaster-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13608.xml"/>
            <x:test successful="true">
               <x:label>report dsmelanogaster-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsmelanogaster-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasmelanogaster-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilasmelanogaster-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13617.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilasmelanogaster-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasmelanogaster-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasmelanogaster-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilasmelanogaster-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13626.xml"/>
            <x:test successful="true">
               <x:label>report drosophilasmelanogaster-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasmelanogaster-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escoli-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escoli-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13635.xml"/>
            <x:test successful="true">
               <x:label>not report escoli-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escoli-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escoli-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escoli-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13644.xml"/>
            <x:test successful="true">
               <x:label>report escoli-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escoli-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escherichiascoli-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escherichiascoli-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13653.xml"/>
            <x:test successful="true">
               <x:label>not report escherichiascoli-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escherichiascoli-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escherichiascoli-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escherichiascoli-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13662.xml"/>
            <x:test successful="true">
               <x:label>report escherichiascoli-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escherichiascoli-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspombe-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sspombe-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13671.xml"/>
            <x:test successful="true">
               <x:label>not report sspombe-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspombe-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspombe-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sspombe-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13680.xml"/>
            <x:test successful="true">
               <x:label>report sspombe-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspombe-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schizosaccharomycesspombe-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/schizosaccharomycesspombe-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13689.xml"/>
            <x:test successful="true">
               <x:label>not report schizosaccharomycesspombe-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schizosaccharomycesspombe-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schizosaccharomycesspombe-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/schizosaccharomycesspombe-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13698.xml"/>
            <x:test successful="true">
               <x:label>report schizosaccharomycesspombe-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schizosaccharomycesspombe-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sscerevisiae-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sscerevisiae-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13707.xml"/>
            <x:test successful="true">
               <x:label>not report sscerevisiae-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sscerevisiae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sscerevisiae-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sscerevisiae-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13716.xml"/>
            <x:test successful="true">
               <x:label>report sscerevisiae-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sscerevisiae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>saccharomycesscerevisiae-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/saccharomycesscerevisiae-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13725.xml"/>
            <x:test successful="true">
               <x:label>not report saccharomycesscerevisiae-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'saccharomycesscerevisiae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>saccharomycesscerevisiae-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/saccharomycesscerevisiae-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13734.xml"/>
            <x:test successful="true">
               <x:label>report saccharomycesscerevisiae-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'saccharomycesscerevisiae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cselegans-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/cselegans-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13743.xml"/>
            <x:test successful="true">
               <x:label>not report cselegans-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cselegans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cselegans-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/cselegans-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13752.xml"/>
            <x:test successful="true">
               <x:label>report cselegans-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cselegans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>caenorhabditisselegans-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/caenorhabditisselegans-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13761.xml"/>
            <x:test successful="true">
               <x:label>not report caenorhabditisselegans-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'caenorhabditisselegans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>caenorhabditisselegans-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/caenorhabditisselegans-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13770.xml"/>
            <x:test successful="true">
               <x:label>report caenorhabditisselegans-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'caenorhabditisselegans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>asthaliana-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/asthaliana-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13779.xml"/>
            <x:test successful="true">
               <x:label>not report asthaliana-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'asthaliana-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>asthaliana-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/asthaliana-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13788.xml"/>
            <x:test successful="true">
               <x:label>report asthaliana-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'asthaliana-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arabidopsissthaliana-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/arabidopsissthaliana-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13797.xml"/>
            <x:test successful="true">
               <x:label>not report arabidopsissthaliana-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arabidopsissthaliana-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arabidopsissthaliana-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/arabidopsissthaliana-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13806.xml"/>
            <x:test successful="true">
               <x:label>report arabidopsissthaliana-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arabidopsissthaliana-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>msthermophila-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/msthermophila-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13815.xml"/>
            <x:test successful="true">
               <x:label>not report msthermophila-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'msthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>msthermophila-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/msthermophila-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13824.xml"/>
            <x:test successful="true">
               <x:label>report msthermophila-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'msthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>myceliophthorasthermophila-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/myceliophthorasthermophila-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13833.xml"/>
            <x:test successful="true">
               <x:label>not report myceliophthorasthermophila-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'myceliophthorasthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>myceliophthorasthermophila-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/myceliophthorasthermophila-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13842.xml"/>
            <x:test successful="true">
               <x:label>report myceliophthorasthermophila-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'myceliophthorasthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dictyostelium-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dictyostelium-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13851.xml"/>
            <x:test successful="true">
               <x:label>not report dictyostelium-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dictyostelium-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dictyostelium-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dictyostelium-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13860.xml"/>
            <x:test successful="true">
               <x:label>report dictyostelium-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dictyostelium-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psfalciparum-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/psfalciparum-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13869.xml"/>
            <x:test successful="true">
               <x:label>not report psfalciparum-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psfalciparum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psfalciparum-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/psfalciparum-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13878.xml"/>
            <x:test successful="true">
               <x:label>report psfalciparum-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psfalciparum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plasmodiumsfalciparum-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/plasmodiumsfalciparum-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13887.xml"/>
            <x:test successful="true">
               <x:label>not report plasmodiumsfalciparum-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plasmodiumsfalciparum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plasmodiumsfalciparum-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/plasmodiumsfalciparum-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13896.xml"/>
            <x:test successful="true">
               <x:label>report plasmodiumsfalciparum-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plasmodiumsfalciparum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssenterica-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssenterica-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13905.xml"/>
            <x:test successful="true">
               <x:label>not report ssenterica-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssenterica-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssenterica-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssenterica-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13914.xml"/>
            <x:test successful="true">
               <x:label>report ssenterica-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssenterica-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salmonellasenterica-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/salmonellasenterica-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13923.xml"/>
            <x:test successful="true">
               <x:label>not report salmonellasenterica-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salmonellasenterica-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salmonellasenterica-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/salmonellasenterica-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13932.xml"/>
            <x:test successful="true">
               <x:label>report salmonellasenterica-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salmonellasenterica-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspyogenes-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sspyogenes-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13941.xml"/>
            <x:test successful="true">
               <x:label>not report sspyogenes-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspyogenes-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspyogenes-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sspyogenes-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13950.xml"/>
            <x:test successful="true">
               <x:label>report sspyogenes-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspyogenes-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>streptococcusspyogenes-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/streptococcusspyogenes-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13959.xml"/>
            <x:test successful="true">
               <x:label>not report streptococcusspyogenes-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'streptococcusspyogenes-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>streptococcusspyogenes-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/streptococcusspyogenes-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13968.xml"/>
            <x:test successful="true">
               <x:label>report streptococcusspyogenes-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'streptococcusspyogenes-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psdumerilii-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/psdumerilii-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13977.xml"/>
            <x:test successful="true">
               <x:label>not report psdumerilii-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psdumerilii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psdumerilii-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/psdumerilii-ref-article-title-check/fail.xml"/>
            <x:result href="result-d13986.xml"/>
            <x:test successful="true">
               <x:label>report psdumerilii-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psdumerilii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>platynereissdumerilii-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/platynereissdumerilii-ref-article-title-check/pass.xml"/>
            <x:result href="result-d13995.xml"/>
            <x:test successful="true">
               <x:label>not report platynereissdumerilii-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'platynereissdumerilii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>platynereissdumerilii-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/platynereissdumerilii-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14004.xml"/>
            <x:test successful="true">
               <x:label>report platynereissdumerilii-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'platynereissdumerilii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pscynocephalus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/pscynocephalus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14013.xml"/>
            <x:test successful="true">
               <x:label>not report pscynocephalus-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pscynocephalus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pscynocephalus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/pscynocephalus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14022.xml"/>
            <x:test successful="true">
               <x:label>report pscynocephalus-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pscynocephalus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>papioscynocephalus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/papioscynocephalus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14031.xml"/>
            <x:test successful="true">
               <x:label>not report papioscynocephalus-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'papioscynocephalus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>papioscynocephalus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/papioscynocephalus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14040.xml"/>
            <x:test successful="true">
               <x:label>report papioscynocephalus-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'papioscynocephalus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>osfasciatus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/osfasciatus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14049.xml"/>
            <x:test successful="true">
               <x:label>not report osfasciatus-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'osfasciatus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>osfasciatus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/osfasciatus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14058.xml"/>
            <x:test successful="true">
               <x:label>report osfasciatus-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'osfasciatus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>oncopeltussfasciatus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/oncopeltussfasciatus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14067.xml"/>
            <x:test successful="true">
               <x:label>not report oncopeltussfasciatus-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'oncopeltussfasciatus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>oncopeltussfasciatus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/oncopeltussfasciatus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14076.xml"/>
            <x:test successful="true">
               <x:label>report oncopeltussfasciatus-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'oncopeltussfasciatus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nscrassa-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nscrassa-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14085.xml"/>
            <x:test successful="true">
               <x:label>not report nscrassa-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nscrassa-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nscrassa-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nscrassa-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14094.xml"/>
            <x:test successful="true">
               <x:label>report nscrassa-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nscrassa-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>neurosporascrassa-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/neurosporascrassa-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14103.xml"/>
            <x:test successful="true">
               <x:label>not report neurosporascrassa-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'neurosporascrassa-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>neurosporascrassa-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/neurosporascrassa-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14112.xml"/>
            <x:test successful="true">
               <x:label>report neurosporascrassa-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'neurosporascrassa-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csintestinalis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/csintestinalis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14121.xml"/>
            <x:test successful="true">
               <x:label>not report csintestinalis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csintestinalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csintestinalis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/csintestinalis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14130.xml"/>
            <x:test successful="true">
               <x:label>report csintestinalis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csintestinalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cionasintestinalis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/cionasintestinalis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14139.xml"/>
            <x:test successful="true">
               <x:label>not report cionasintestinalis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cionasintestinalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cionasintestinalis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/cionasintestinalis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14148.xml"/>
            <x:test successful="true">
               <x:label>report cionasintestinalis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cionasintestinalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escuniculi-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escuniculi-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14157.xml"/>
            <x:test successful="true">
               <x:label>not report escuniculi-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escuniculi-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escuniculi-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escuniculi-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14166.xml"/>
            <x:test successful="true">
               <x:label>report escuniculi-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escuniculi-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>encephalitozoonscuniculi-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/encephalitozoonscuniculi-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14175.xml"/>
            <x:test successful="true">
               <x:label>not report encephalitozoonscuniculi-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'encephalitozoonscuniculi-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>encephalitozoonscuniculi-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/encephalitozoonscuniculi-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14184.xml"/>
            <x:test successful="true">
               <x:label>report encephalitozoonscuniculi-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'encephalitozoonscuniculi-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hssalinarum-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/hssalinarum-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14193.xml"/>
            <x:test successful="true">
               <x:label>not report hssalinarum-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hssalinarum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hssalinarum-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/hssalinarum-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14202.xml"/>
            <x:test successful="true">
               <x:label>report hssalinarum-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hssalinarum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>halobacteriumssalinarum-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/halobacteriumssalinarum-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14211.xml"/>
            <x:test successful="true">
               <x:label>not report halobacteriumssalinarum-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'halobacteriumssalinarum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>halobacteriumssalinarum-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/halobacteriumssalinarum-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14220.xml"/>
            <x:test successful="true">
               <x:label>report halobacteriumssalinarum-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'halobacteriumssalinarum-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sssolfataricus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sssolfataricus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14229.xml"/>
            <x:test successful="true">
               <x:label>not report sssolfataricus-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sssolfataricus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sssolfataricus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sssolfataricus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14238.xml"/>
            <x:test successful="true">
               <x:label>report sssolfataricus-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sssolfataricus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sulfolobusssolfataricus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sulfolobusssolfataricus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14247.xml"/>
            <x:test successful="true">
               <x:label>not report sulfolobusssolfataricus-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sulfolobusssolfataricus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sulfolobusssolfataricus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/sulfolobusssolfataricus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14256.xml"/>
            <x:test successful="true">
               <x:label>report sulfolobusssolfataricus-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sulfolobusssolfataricus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssmediterranea-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssmediterranea-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14265.xml"/>
            <x:test successful="true">
               <x:label>not report ssmediterranea-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssmediterranea-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssmediterranea-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssmediterranea-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14274.xml"/>
            <x:test successful="true">
               <x:label>report ssmediterranea-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssmediterranea-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schmidteasmediterranea-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/schmidteasmediterranea-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14283.xml"/>
            <x:test successful="true">
               <x:label>not report schmidteasmediterranea-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schmidteasmediterranea-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schmidteasmediterranea-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/schmidteasmediterranea-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14292.xml"/>
            <x:test successful="true">
               <x:label>report schmidteasmediterranea-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schmidteasmediterranea-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssrosetta-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssrosetta-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14301.xml"/>
            <x:test successful="true">
               <x:label>not report ssrosetta-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssrosetta-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssrosetta-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssrosetta-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14310.xml"/>
            <x:test successful="true">
               <x:label>report ssrosetta-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssrosetta-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salpingoecasrosetta-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/salpingoecasrosetta-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14319.xml"/>
            <x:test successful="true">
               <x:label>not report salpingoecasrosetta-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salpingoecasrosetta-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salpingoecasrosetta-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/salpingoecasrosetta-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14328.xml"/>
            <x:test successful="true">
               <x:label>report salpingoecasrosetta-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salpingoecasrosetta-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsvectensis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nsvectensis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14337.xml"/>
            <x:test successful="true">
               <x:label>not report nsvectensis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsvectensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsvectensis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nsvectensis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14346.xml"/>
            <x:test successful="true">
               <x:label>report nsvectensis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsvectensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nematostellasvectensis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nematostellasvectensis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14355.xml"/>
            <x:test successful="true">
               <x:label>not report nematostellasvectensis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nematostellasvectensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nematostellasvectensis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nematostellasvectensis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14364.xml"/>
            <x:test successful="true">
               <x:label>report nematostellasvectensis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nematostellasvectensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssaureus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssaureus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14373.xml"/>
            <x:test successful="true">
               <x:label>not report ssaureus-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssaureus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssaureus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ssaureus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14382.xml"/>
            <x:test successful="true">
               <x:label>report ssaureus-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssaureus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>staphylococcussaureus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/staphylococcussaureus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14391.xml"/>
            <x:test successful="true">
               <x:label>not report staphylococcussaureus-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'staphylococcussaureus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>staphylococcussaureus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/staphylococcussaureus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14400.xml"/>
            <x:test successful="true">
               <x:label>report staphylococcussaureus-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'staphylococcussaureus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vscholerae-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/vscholerae-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14409.xml"/>
            <x:test successful="true">
               <x:label>not report vscholerae-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vscholerae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vscholerae-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/vscholerae-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14418.xml"/>
            <x:test successful="true">
               <x:label>report vscholerae-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vscholerae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vibrioscholerae-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/vibrioscholerae-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14427.xml"/>
            <x:test successful="true">
               <x:label>not report vibrioscholerae-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vibrioscholerae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vibrioscholerae-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/vibrioscholerae-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14436.xml"/>
            <x:test successful="true">
               <x:label>report vibrioscholerae-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vibrioscholerae-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tsthermophila-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/tsthermophila-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14445.xml"/>
            <x:test successful="true">
               <x:label>not report tsthermophila-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tsthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tsthermophila-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/tsthermophila-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14454.xml"/>
            <x:test successful="true">
               <x:label>report tsthermophila-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tsthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tetrahymenasthermophila-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/tetrahymenasthermophila-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14463.xml"/>
            <x:test successful="true">
               <x:label>not report tetrahymenasthermophila-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tetrahymenasthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tetrahymenasthermophila-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/tetrahymenasthermophila-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14472.xml"/>
            <x:test successful="true">
               <x:label>report tetrahymenasthermophila-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tetrahymenasthermophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csreinhardtii-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/csreinhardtii-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14481.xml"/>
            <x:test successful="true">
               <x:label>not report csreinhardtii-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csreinhardtii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csreinhardtii-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/csreinhardtii-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14490.xml"/>
            <x:test successful="true">
               <x:label>report csreinhardtii-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csreinhardtii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydomonassreinhardtii-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/chlamydomonassreinhardtii-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14499.xml"/>
            <x:test successful="true">
               <x:label>not report chlamydomonassreinhardtii-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydomonassreinhardtii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydomonassreinhardtii-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/chlamydomonassreinhardtii-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14508.xml"/>
            <x:test successful="true">
               <x:label>report chlamydomonassreinhardtii-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydomonassreinhardtii-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsattenuata-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nsattenuata-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14517.xml"/>
            <x:test successful="true">
               <x:label>not report nsattenuata-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsattenuata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsattenuata-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nsattenuata-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14526.xml"/>
            <x:test successful="true">
               <x:label>report nsattenuata-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsattenuata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nicotianasattenuata-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nicotianasattenuata-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14535.xml"/>
            <x:test successful="true">
               <x:label>not report nicotianasattenuata-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nicotianasattenuata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nicotianasattenuata-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/nicotianasattenuata-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14544.xml"/>
            <x:test successful="true">
               <x:label>report nicotianasattenuata-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nicotianasattenuata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escarotovora-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escarotovora-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14553.xml"/>
            <x:test successful="true">
               <x:label>not report escarotovora-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escarotovora-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escarotovora-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/escarotovora-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14562.xml"/>
            <x:test successful="true">
               <x:label>report escarotovora-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escarotovora-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>erwiniascarotovora-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/erwiniascarotovora-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14571.xml"/>
            <x:test successful="true">
               <x:label>not report erwiniascarotovora-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'erwiniascarotovora-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>erwiniascarotovora-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/erwiniascarotovora-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14580.xml"/>
            <x:test successful="true">
               <x:label>report erwiniascarotovora-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'erwiniascarotovora-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>esfaecalis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/esfaecalis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14589.xml"/>
            <x:test successful="true">
               <x:label>not report esfaecalis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'esfaecalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>esfaecalis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/esfaecalis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14598.xml"/>
            <x:test successful="true">
               <x:label>report esfaecalis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'esfaecalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hsapiens-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/hsapiens-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14607.xml"/>
            <x:test successful="true">
               <x:label>not report hsapiens-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hsapiens-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hsapiens-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/hsapiens-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14616.xml"/>
            <x:test successful="true">
               <x:label>report hsapiens-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hsapiens-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>homosapiens-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/homosapiens-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14625.xml"/>
            <x:test successful="true">
               <x:label>not report homosapiens-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'homosapiens-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>homosapiens-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/homosapiens-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14634.xml"/>
            <x:test successful="true">
               <x:label>report homosapiens-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'homosapiens-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ctrachomatis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ctrachomatis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14643.xml"/>
            <x:test successful="true">
               <x:label>not report ctrachomatis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ctrachomatis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ctrachomatis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ctrachomatis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14652.xml"/>
            <x:test successful="true">
               <x:label>report ctrachomatis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ctrachomatis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydiatrachomatis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/chlamydiatrachomatis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14661.xml"/>
            <x:test successful="true">
               <x:label>not report chlamydiatrachomatis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydiatrachomatis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydiatrachomatis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/chlamydiatrachomatis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14670.xml"/>
            <x:test successful="true">
               <x:label>report chlamydiatrachomatis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydiatrachomatis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>enterococcussfaecalis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/enterococcussfaecalis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14679.xml"/>
            <x:test successful="true">
               <x:label>not report enterococcussfaecalis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'enterococcussfaecalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>enterococcussfaecalis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/enterococcussfaecalis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14688.xml"/>
            <x:test successful="true">
               <x:label>report enterococcussfaecalis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'enterococcussfaecalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xlaevis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xlaevis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14697.xml"/>
            <x:test successful="true">
               <x:label>not report xlaevis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xlaevis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xlaevis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xlaevis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14706.xml"/>
            <x:test successful="true">
               <x:label>report xlaevis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xlaevis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopuslaevis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xenopuslaevis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14715.xml"/>
            <x:test successful="true">
               <x:label>not report xenopuslaevis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopuslaevis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopuslaevis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xenopuslaevis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14724.xml"/>
            <x:test successful="true">
               <x:label>report xenopuslaevis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopuslaevis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xtropicalis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xtropicalis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14733.xml"/>
            <x:test successful="true">
               <x:label>not report xtropicalis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xtropicalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xtropicalis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xtropicalis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14742.xml"/>
            <x:test successful="true">
               <x:label>report xtropicalis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xtropicalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopustropicalis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xenopustropicalis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14751.xml"/>
            <x:test successful="true">
               <x:label>not report xenopustropicalis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopustropicalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopustropicalis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xenopustropicalis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14760.xml"/>
            <x:test successful="true">
               <x:label>report xenopustropicalis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopustropicalis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>mmusculus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/mmusculus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14769.xml"/>
            <x:test successful="true">
               <x:label>not report mmusculus-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mmusculus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>mmusculus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/mmusculus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14778.xml"/>
            <x:test successful="true">
               <x:label>report mmusculus-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mmusculus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>musmusculus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/musmusculus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14787.xml"/>
            <x:test successful="true">
               <x:label>not report musmusculus-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'musmusculus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>musmusculus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/musmusculus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14796.xml"/>
            <x:test successful="true">
               <x:label>report musmusculus-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'musmusculus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dimmigrans-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dimmigrans-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14805.xml"/>
            <x:test successful="true">
               <x:label>not report dimmigrans-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dimmigrans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dimmigrans-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dimmigrans-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14814.xml"/>
            <x:test successful="true">
               <x:label>report dimmigrans-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dimmigrans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaimmigrans-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilaimmigrans-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14823.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilaimmigrans-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaimmigrans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaimmigrans-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilaimmigrans-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14832.xml"/>
            <x:test successful="true">
               <x:label>report drosophilaimmigrans-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaimmigrans-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsubobscura-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dsubobscura-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14841.xml"/>
            <x:test successful="true">
               <x:label>not report dsubobscura-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsubobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsubobscura-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dsubobscura-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14850.xml"/>
            <x:test successful="true">
               <x:label>report dsubobscura-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsubobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasubobscura-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilasubobscura-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14859.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilasubobscura-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasubobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasubobscura-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilasubobscura-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14868.xml"/>
            <x:test successful="true">
               <x:label>report drosophilasubobscura-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasubobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daffinis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/daffinis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14877.xml"/>
            <x:test successful="true">
               <x:label>not report daffinis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daffinis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daffinis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/daffinis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14886.xml"/>
            <x:test successful="true">
               <x:label>report daffinis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daffinis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaaffinis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilaaffinis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14895.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilaaffinis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaaffinis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaaffinis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilaaffinis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14904.xml"/>
            <x:test successful="true">
               <x:label>report drosophilaaffinis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaaffinis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dobscura-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dobscura-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14913.xml"/>
            <x:test successful="true">
               <x:label>not report dobscura-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dobscura-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/dobscura-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14922.xml"/>
            <x:test successful="true">
               <x:label>report dobscura-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaobscura-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilaobscura-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14931.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilaobscura-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaobscura-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophilaobscura-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14940.xml"/>
            <x:test successful="true">
               <x:label>report drosophilaobscura-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaobscura-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ftularensis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ftularensis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14949.xml"/>
            <x:test successful="true">
               <x:label>not report ftularensis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ftularensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ftularensis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/ftularensis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14958.xml"/>
            <x:test successful="true">
               <x:label>report ftularensis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ftularensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>francisellatularensis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/francisellatularensis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14967.xml"/>
            <x:test successful="true">
               <x:label>not report francisellatularensis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'francisellatularensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>francisellatularensis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/francisellatularensis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14976.xml"/>
            <x:test successful="true">
               <x:label>report francisellatularensis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'francisellatularensis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pplantaginis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/pplantaginis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d14985.xml"/>
            <x:test successful="true">
               <x:label>not report pplantaginis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pplantaginis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pplantaginis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/pplantaginis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d14994.xml"/>
            <x:test successful="true">
               <x:label>report pplantaginis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pplantaginis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>podosphaeraplantaginis-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/podosphaeraplantaginis-ref-article-title-check/pass.xml"/>
            <x:result href="result-d15003.xml"/>
            <x:test successful="true">
               <x:label>not report podosphaeraplantaginis-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'podosphaeraplantaginis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>podosphaeraplantaginis-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/podosphaeraplantaginis-ref-article-title-check/fail.xml"/>
            <x:result href="result-d15012.xml"/>
            <x:test successful="true">
               <x:label>report podosphaeraplantaginis-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'podosphaeraplantaginis-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>planceolata-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/planceolata-ref-article-title-check/pass.xml"/>
            <x:result href="result-d15021.xml"/>
            <x:test successful="true">
               <x:label>not report planceolata-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'planceolata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>planceolata-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/planceolata-ref-article-title-check/fail.xml"/>
            <x:result href="result-d15030.xml"/>
            <x:test successful="true">
               <x:label>report planceolata-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'planceolata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plantagolanceolata-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/plantagolanceolata-ref-article-title-check/pass.xml"/>
            <x:result href="result-d15039.xml"/>
            <x:test successful="true">
               <x:label>not report plantagolanceolata-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plantagolanceolata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plantagolanceolata-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/plantagolanceolata-ref-article-title-check/fail.xml"/>
            <x:result href="result-d15048.xml"/>
            <x:test successful="true">
               <x:label>report plantagolanceolata-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plantagolanceolata-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drerio-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drerio-ref-article-title-check/pass.xml"/>
            <x:result href="result-d15057.xml"/>
            <x:test successful="true">
               <x:label>not report drerio-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drerio-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drerio-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drerio-ref-article-title-check/fail.xml"/>
            <x:result href="result-d15066.xml"/>
            <x:test successful="true">
               <x:label>report drerio-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drerio-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daniorerio-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/daniorerio-ref-article-title-check/pass.xml"/>
            <x:result href="result-d15075.xml"/>
            <x:test successful="true">
               <x:label>not report daniorerio-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daniorerio-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daniorerio-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/daniorerio-ref-article-title-check/fail.xml"/>
            <x:result href="result-d15084.xml"/>
            <x:test successful="true">
               <x:label>report daniorerio-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daniorerio-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophila-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophila-ref-article-title-check/pass.xml"/>
            <x:result href="result-d15093.xml"/>
            <x:test successful="true">
               <x:label>not report drosophila-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophila-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/drosophila-ref-article-title-check/fail.xml"/>
            <x:result href="result-d15102.xml"/>
            <x:test successful="true">
               <x:label>report drosophila-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophila-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopus-ref-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xenopus-ref-article-title-check/pass.xml"/>
            <x:result href="result-d15111.xml"/>
            <x:test successful="true">
               <x:label>not report xenopus-ref-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopus-ref-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-ref-article-book-title/xenopus-ref-article-title-check/fail.xml"/>
            <x:result href="result-d15120.xml"/>
            <x:test successful="true">
               <x:label>report xenopus-ref-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopus-ref-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-ref-article-book-title-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-ref-article-book-title-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>org-title-kwd</x:label>
         <x:scenario>
            <x:label>bssubtilis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/bssubtilis-article-title-check/pass.xml"/>
            <x:result href="result-d15129.xml"/>
            <x:test successful="true">
               <x:label>not report bssubtilis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bssubtilis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bssubtilis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/bssubtilis-article-title-check/fail.xml"/>
            <x:result href="result-d15138.xml"/>
            <x:test successful="true">
               <x:label>report bssubtilis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bssubtilis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bacillusssubtilis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/bacillusssubtilis-article-title-check/pass.xml"/>
            <x:result href="result-d15147.xml"/>
            <x:test successful="true">
               <x:label>not report bacillusssubtilis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bacillusssubtilis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>bacillusssubtilis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/bacillusssubtilis-article-title-check/fail.xml"/>
            <x:result href="result-d15156.xml"/>
            <x:test successful="true">
               <x:label>report bacillusssubtilis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'bacillusssubtilis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsmelanogaster-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dsmelanogaster-article-title-check/pass.xml"/>
            <x:result href="result-d15165.xml"/>
            <x:test successful="true">
               <x:label>not report dsmelanogaster-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsmelanogaster-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsmelanogaster-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dsmelanogaster-article-title-check/fail.xml"/>
            <x:result href="result-d15174.xml"/>
            <x:test successful="true">
               <x:label>report dsmelanogaster-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsmelanogaster-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasmelanogaster-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilasmelanogaster-article-title-check/pass.xml"/>
            <x:result href="result-d15183.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilasmelanogaster-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasmelanogaster-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasmelanogaster-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilasmelanogaster-article-title-check/fail.xml"/>
            <x:result href="result-d15192.xml"/>
            <x:test successful="true">
               <x:label>report drosophilasmelanogaster-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasmelanogaster-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escoli-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escoli-article-title-check/pass.xml"/>
            <x:result href="result-d15201.xml"/>
            <x:test successful="true">
               <x:label>not report escoli-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escoli-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escoli-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escoli-article-title-check/fail.xml"/>
            <x:result href="result-d15210.xml"/>
            <x:test successful="true">
               <x:label>report escoli-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escoli-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escherichiascoli-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escherichiascoli-article-title-check/pass.xml"/>
            <x:result href="result-d15219.xml"/>
            <x:test successful="true">
               <x:label>not report escherichiascoli-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escherichiascoli-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escherichiascoli-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escherichiascoli-article-title-check/fail.xml"/>
            <x:result href="result-d15228.xml"/>
            <x:test successful="true">
               <x:label>report escherichiascoli-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escherichiascoli-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspombe-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sspombe-article-title-check/pass.xml"/>
            <x:result href="result-d15237.xml"/>
            <x:test successful="true">
               <x:label>not report sspombe-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspombe-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspombe-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sspombe-article-title-check/fail.xml"/>
            <x:result href="result-d15246.xml"/>
            <x:test successful="true">
               <x:label>report sspombe-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspombe-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schizosaccharomycesspombe-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/schizosaccharomycesspombe-article-title-check/pass.xml"/>
            <x:result href="result-d15255.xml"/>
            <x:test successful="true">
               <x:label>not report schizosaccharomycesspombe-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schizosaccharomycesspombe-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schizosaccharomycesspombe-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/schizosaccharomycesspombe-article-title-check/fail.xml"/>
            <x:result href="result-d15264.xml"/>
            <x:test successful="true">
               <x:label>report schizosaccharomycesspombe-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schizosaccharomycesspombe-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sscerevisiae-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sscerevisiae-article-title-check/pass.xml"/>
            <x:result href="result-d15273.xml"/>
            <x:test successful="true">
               <x:label>not report sscerevisiae-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sscerevisiae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sscerevisiae-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sscerevisiae-article-title-check/fail.xml"/>
            <x:result href="result-d15282.xml"/>
            <x:test successful="true">
               <x:label>report sscerevisiae-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sscerevisiae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>saccharomycesscerevisiae-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/saccharomycesscerevisiae-article-title-check/pass.xml"/>
            <x:result href="result-d15291.xml"/>
            <x:test successful="true">
               <x:label>not report saccharomycesscerevisiae-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'saccharomycesscerevisiae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>saccharomycesscerevisiae-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/saccharomycesscerevisiae-article-title-check/fail.xml"/>
            <x:result href="result-d15300.xml"/>
            <x:test successful="true">
               <x:label>report saccharomycesscerevisiae-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'saccharomycesscerevisiae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cselegans-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/cselegans-article-title-check/pass.xml"/>
            <x:result href="result-d15309.xml"/>
            <x:test successful="true">
               <x:label>not report cselegans-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cselegans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cselegans-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/cselegans-article-title-check/fail.xml"/>
            <x:result href="result-d15318.xml"/>
            <x:test successful="true">
               <x:label>report cselegans-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cselegans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>caenorhabditisselegans-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/caenorhabditisselegans-article-title-check/pass.xml"/>
            <x:result href="result-d15327.xml"/>
            <x:test successful="true">
               <x:label>not report caenorhabditisselegans-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'caenorhabditisselegans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>caenorhabditisselegans-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/caenorhabditisselegans-article-title-check/fail.xml"/>
            <x:result href="result-d15336.xml"/>
            <x:test successful="true">
               <x:label>report caenorhabditisselegans-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'caenorhabditisselegans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>asthaliana-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/asthaliana-article-title-check/pass.xml"/>
            <x:result href="result-d15345.xml"/>
            <x:test successful="true">
               <x:label>not report asthaliana-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'asthaliana-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>asthaliana-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/asthaliana-article-title-check/fail.xml"/>
            <x:result href="result-d15354.xml"/>
            <x:test successful="true">
               <x:label>report asthaliana-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'asthaliana-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arabidopsissthaliana-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/arabidopsissthaliana-article-title-check/pass.xml"/>
            <x:result href="result-d15363.xml"/>
            <x:test successful="true">
               <x:label>not report arabidopsissthaliana-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arabidopsissthaliana-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arabidopsissthaliana-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/arabidopsissthaliana-article-title-check/fail.xml"/>
            <x:result href="result-d15372.xml"/>
            <x:test successful="true">
               <x:label>report arabidopsissthaliana-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arabidopsissthaliana-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>msthermophila-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/msthermophila-article-title-check/pass.xml"/>
            <x:result href="result-d15381.xml"/>
            <x:test successful="true">
               <x:label>not report msthermophila-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'msthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>msthermophila-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/msthermophila-article-title-check/fail.xml"/>
            <x:result href="result-d15390.xml"/>
            <x:test successful="true">
               <x:label>report msthermophila-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'msthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>myceliophthorasthermophila-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/myceliophthorasthermophila-article-title-check/pass.xml"/>
            <x:result href="result-d15399.xml"/>
            <x:test successful="true">
               <x:label>not report myceliophthorasthermophila-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'myceliophthorasthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>myceliophthorasthermophila-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/myceliophthorasthermophila-article-title-check/fail.xml"/>
            <x:result href="result-d15408.xml"/>
            <x:test successful="true">
               <x:label>report myceliophthorasthermophila-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'myceliophthorasthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dictyostelium-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dictyostelium-article-title-check/pass.xml"/>
            <x:result href="result-d15417.xml"/>
            <x:test successful="true">
               <x:label>not report dictyostelium-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dictyostelium-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dictyostelium-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dictyostelium-article-title-check/fail.xml"/>
            <x:result href="result-d15426.xml"/>
            <x:test successful="true">
               <x:label>report dictyostelium-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dictyostelium-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psfalciparum-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/psfalciparum-article-title-check/pass.xml"/>
            <x:result href="result-d15435.xml"/>
            <x:test successful="true">
               <x:label>not report psfalciparum-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psfalciparum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psfalciparum-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/psfalciparum-article-title-check/fail.xml"/>
            <x:result href="result-d15444.xml"/>
            <x:test successful="true">
               <x:label>report psfalciparum-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psfalciparum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plasmodiumsfalciparum-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/plasmodiumsfalciparum-article-title-check/pass.xml"/>
            <x:result href="result-d15453.xml"/>
            <x:test successful="true">
               <x:label>not report plasmodiumsfalciparum-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plasmodiumsfalciparum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plasmodiumsfalciparum-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/plasmodiumsfalciparum-article-title-check/fail.xml"/>
            <x:result href="result-d15462.xml"/>
            <x:test successful="true">
               <x:label>report plasmodiumsfalciparum-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plasmodiumsfalciparum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssenterica-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssenterica-article-title-check/pass.xml"/>
            <x:result href="result-d15471.xml"/>
            <x:test successful="true">
               <x:label>not report ssenterica-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssenterica-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssenterica-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssenterica-article-title-check/fail.xml"/>
            <x:result href="result-d15480.xml"/>
            <x:test successful="true">
               <x:label>report ssenterica-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssenterica-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salmonellasenterica-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/salmonellasenterica-article-title-check/pass.xml"/>
            <x:result href="result-d15489.xml"/>
            <x:test successful="true">
               <x:label>not report salmonellasenterica-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salmonellasenterica-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salmonellasenterica-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/salmonellasenterica-article-title-check/fail.xml"/>
            <x:result href="result-d15498.xml"/>
            <x:test successful="true">
               <x:label>report salmonellasenterica-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salmonellasenterica-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspyogenes-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sspyogenes-article-title-check/pass.xml"/>
            <x:result href="result-d15507.xml"/>
            <x:test successful="true">
               <x:label>not report sspyogenes-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspyogenes-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sspyogenes-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sspyogenes-article-title-check/fail.xml"/>
            <x:result href="result-d15516.xml"/>
            <x:test successful="true">
               <x:label>report sspyogenes-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sspyogenes-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>streptococcusspyogenes-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/streptococcusspyogenes-article-title-check/pass.xml"/>
            <x:result href="result-d15525.xml"/>
            <x:test successful="true">
               <x:label>not report streptococcusspyogenes-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'streptococcusspyogenes-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>streptococcusspyogenes-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/streptococcusspyogenes-article-title-check/fail.xml"/>
            <x:result href="result-d15534.xml"/>
            <x:test successful="true">
               <x:label>report streptococcusspyogenes-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'streptococcusspyogenes-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psdumerilii-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/psdumerilii-article-title-check/pass.xml"/>
            <x:result href="result-d15543.xml"/>
            <x:test successful="true">
               <x:label>not report psdumerilii-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psdumerilii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psdumerilii-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/psdumerilii-article-title-check/fail.xml"/>
            <x:result href="result-d15552.xml"/>
            <x:test successful="true">
               <x:label>report psdumerilii-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psdumerilii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>platynereissdumerilii-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/platynereissdumerilii-article-title-check/pass.xml"/>
            <x:result href="result-d15561.xml"/>
            <x:test successful="true">
               <x:label>not report platynereissdumerilii-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'platynereissdumerilii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>platynereissdumerilii-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/platynereissdumerilii-article-title-check/fail.xml"/>
            <x:result href="result-d15570.xml"/>
            <x:test successful="true">
               <x:label>report platynereissdumerilii-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'platynereissdumerilii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pscynocephalus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/pscynocephalus-article-title-check/pass.xml"/>
            <x:result href="result-d15579.xml"/>
            <x:test successful="true">
               <x:label>not report pscynocephalus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pscynocephalus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pscynocephalus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/pscynocephalus-article-title-check/fail.xml"/>
            <x:result href="result-d15588.xml"/>
            <x:test successful="true">
               <x:label>report pscynocephalus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pscynocephalus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>papioscynocephalus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/papioscynocephalus-article-title-check/pass.xml"/>
            <x:result href="result-d15597.xml"/>
            <x:test successful="true">
               <x:label>not report papioscynocephalus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'papioscynocephalus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>papioscynocephalus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/papioscynocephalus-article-title-check/fail.xml"/>
            <x:result href="result-d15606.xml"/>
            <x:test successful="true">
               <x:label>report papioscynocephalus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'papioscynocephalus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>osfasciatus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/osfasciatus-article-title-check/pass.xml"/>
            <x:result href="result-d15615.xml"/>
            <x:test successful="true">
               <x:label>not report osfasciatus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'osfasciatus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>osfasciatus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/osfasciatus-article-title-check/fail.xml"/>
            <x:result href="result-d15624.xml"/>
            <x:test successful="true">
               <x:label>report osfasciatus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'osfasciatus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>oncopeltussfasciatus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/oncopeltussfasciatus-article-title-check/pass.xml"/>
            <x:result href="result-d15633.xml"/>
            <x:test successful="true">
               <x:label>not report oncopeltussfasciatus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'oncopeltussfasciatus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>oncopeltussfasciatus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/oncopeltussfasciatus-article-title-check/fail.xml"/>
            <x:result href="result-d15642.xml"/>
            <x:test successful="true">
               <x:label>report oncopeltussfasciatus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'oncopeltussfasciatus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nscrassa-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nscrassa-article-title-check/pass.xml"/>
            <x:result href="result-d15651.xml"/>
            <x:test successful="true">
               <x:label>not report nscrassa-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nscrassa-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nscrassa-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nscrassa-article-title-check/fail.xml"/>
            <x:result href="result-d15660.xml"/>
            <x:test successful="true">
               <x:label>report nscrassa-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nscrassa-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>neurosporascrassa-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/neurosporascrassa-article-title-check/pass.xml"/>
            <x:result href="result-d15669.xml"/>
            <x:test successful="true">
               <x:label>not report neurosporascrassa-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'neurosporascrassa-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>neurosporascrassa-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/neurosporascrassa-article-title-check/fail.xml"/>
            <x:result href="result-d15678.xml"/>
            <x:test successful="true">
               <x:label>report neurosporascrassa-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'neurosporascrassa-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csintestinalis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/csintestinalis-article-title-check/pass.xml"/>
            <x:result href="result-d15687.xml"/>
            <x:test successful="true">
               <x:label>not report csintestinalis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csintestinalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csintestinalis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/csintestinalis-article-title-check/fail.xml"/>
            <x:result href="result-d15696.xml"/>
            <x:test successful="true">
               <x:label>report csintestinalis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csintestinalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cionasintestinalis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/cionasintestinalis-article-title-check/pass.xml"/>
            <x:result href="result-d15705.xml"/>
            <x:test successful="true">
               <x:label>not report cionasintestinalis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cionasintestinalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>cionasintestinalis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/cionasintestinalis-article-title-check/fail.xml"/>
            <x:result href="result-d15714.xml"/>
            <x:test successful="true">
               <x:label>report cionasintestinalis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'cionasintestinalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escuniculi-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escuniculi-article-title-check/pass.xml"/>
            <x:result href="result-d15723.xml"/>
            <x:test successful="true">
               <x:label>not report escuniculi-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escuniculi-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escuniculi-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escuniculi-article-title-check/fail.xml"/>
            <x:result href="result-d15732.xml"/>
            <x:test successful="true">
               <x:label>report escuniculi-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escuniculi-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>encephalitozoonscuniculi-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/encephalitozoonscuniculi-article-title-check/pass.xml"/>
            <x:result href="result-d15741.xml"/>
            <x:test successful="true">
               <x:label>not report encephalitozoonscuniculi-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'encephalitozoonscuniculi-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>encephalitozoonscuniculi-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/encephalitozoonscuniculi-article-title-check/fail.xml"/>
            <x:result href="result-d15750.xml"/>
            <x:test successful="true">
               <x:label>report encephalitozoonscuniculi-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'encephalitozoonscuniculi-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hssalinarum-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/hssalinarum-article-title-check/pass.xml"/>
            <x:result href="result-d15759.xml"/>
            <x:test successful="true">
               <x:label>not report hssalinarum-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hssalinarum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hssalinarum-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/hssalinarum-article-title-check/fail.xml"/>
            <x:result href="result-d15768.xml"/>
            <x:test successful="true">
               <x:label>report hssalinarum-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hssalinarum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>halobacteriumssalinarum-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/halobacteriumssalinarum-article-title-check/pass.xml"/>
            <x:result href="result-d15777.xml"/>
            <x:test successful="true">
               <x:label>not report halobacteriumssalinarum-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'halobacteriumssalinarum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>halobacteriumssalinarum-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/halobacteriumssalinarum-article-title-check/fail.xml"/>
            <x:result href="result-d15786.xml"/>
            <x:test successful="true">
               <x:label>report halobacteriumssalinarum-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'halobacteriumssalinarum-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sssolfataricus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sssolfataricus-article-title-check/pass.xml"/>
            <x:result href="result-d15795.xml"/>
            <x:test successful="true">
               <x:label>not report sssolfataricus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sssolfataricus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sssolfataricus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sssolfataricus-article-title-check/fail.xml"/>
            <x:result href="result-d15804.xml"/>
            <x:test successful="true">
               <x:label>report sssolfataricus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sssolfataricus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sulfolobusssolfataricus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sulfolobusssolfataricus-article-title-check/pass.xml"/>
            <x:result href="result-d15813.xml"/>
            <x:test successful="true">
               <x:label>not report sulfolobusssolfataricus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sulfolobusssolfataricus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sulfolobusssolfataricus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/sulfolobusssolfataricus-article-title-check/fail.xml"/>
            <x:result href="result-d15822.xml"/>
            <x:test successful="true">
               <x:label>report sulfolobusssolfataricus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sulfolobusssolfataricus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssmediterranea-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssmediterranea-article-title-check/pass.xml"/>
            <x:result href="result-d15831.xml"/>
            <x:test successful="true">
               <x:label>not report ssmediterranea-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssmediterranea-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssmediterranea-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssmediterranea-article-title-check/fail.xml"/>
            <x:result href="result-d15840.xml"/>
            <x:test successful="true">
               <x:label>report ssmediterranea-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssmediterranea-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schmidteasmediterranea-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/schmidteasmediterranea-article-title-check/pass.xml"/>
            <x:result href="result-d15849.xml"/>
            <x:test successful="true">
               <x:label>not report schmidteasmediterranea-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schmidteasmediterranea-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>schmidteasmediterranea-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/schmidteasmediterranea-article-title-check/fail.xml"/>
            <x:result href="result-d15858.xml"/>
            <x:test successful="true">
               <x:label>report schmidteasmediterranea-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'schmidteasmediterranea-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssrosetta-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssrosetta-article-title-check/pass.xml"/>
            <x:result href="result-d15867.xml"/>
            <x:test successful="true">
               <x:label>not report ssrosetta-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssrosetta-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssrosetta-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssrosetta-article-title-check/fail.xml"/>
            <x:result href="result-d15876.xml"/>
            <x:test successful="true">
               <x:label>report ssrosetta-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssrosetta-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salpingoecasrosetta-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/salpingoecasrosetta-article-title-check/pass.xml"/>
            <x:result href="result-d15885.xml"/>
            <x:test successful="true">
               <x:label>not report salpingoecasrosetta-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salpingoecasrosetta-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>salpingoecasrosetta-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/salpingoecasrosetta-article-title-check/fail.xml"/>
            <x:result href="result-d15894.xml"/>
            <x:test successful="true">
               <x:label>report salpingoecasrosetta-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'salpingoecasrosetta-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsvectensis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nsvectensis-article-title-check/pass.xml"/>
            <x:result href="result-d15903.xml"/>
            <x:test successful="true">
               <x:label>not report nsvectensis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsvectensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsvectensis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nsvectensis-article-title-check/fail.xml"/>
            <x:result href="result-d15912.xml"/>
            <x:test successful="true">
               <x:label>report nsvectensis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsvectensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nematostellasvectensis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nematostellasvectensis-article-title-check/pass.xml"/>
            <x:result href="result-d15921.xml"/>
            <x:test successful="true">
               <x:label>not report nematostellasvectensis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nematostellasvectensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nematostellasvectensis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nematostellasvectensis-article-title-check/fail.xml"/>
            <x:result href="result-d15930.xml"/>
            <x:test successful="true">
               <x:label>report nematostellasvectensis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nematostellasvectensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssaureus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssaureus-article-title-check/pass.xml"/>
            <x:result href="result-d15939.xml"/>
            <x:test successful="true">
               <x:label>not report ssaureus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssaureus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ssaureus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ssaureus-article-title-check/fail.xml"/>
            <x:result href="result-d15948.xml"/>
            <x:test successful="true">
               <x:label>report ssaureus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ssaureus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>staphylococcussaureus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/staphylococcussaureus-article-title-check/pass.xml"/>
            <x:result href="result-d15957.xml"/>
            <x:test successful="true">
               <x:label>not report staphylococcussaureus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'staphylococcussaureus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>staphylococcussaureus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/staphylococcussaureus-article-title-check/fail.xml"/>
            <x:result href="result-d15966.xml"/>
            <x:test successful="true">
               <x:label>report staphylococcussaureus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'staphylococcussaureus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vscholerae-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/vscholerae-article-title-check/pass.xml"/>
            <x:result href="result-d15975.xml"/>
            <x:test successful="true">
               <x:label>not report vscholerae-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vscholerae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vscholerae-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/vscholerae-article-title-check/fail.xml"/>
            <x:result href="result-d15984.xml"/>
            <x:test successful="true">
               <x:label>report vscholerae-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vscholerae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vibrioscholerae-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/vibrioscholerae-article-title-check/pass.xml"/>
            <x:result href="result-d15993.xml"/>
            <x:test successful="true">
               <x:label>not report vibrioscholerae-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vibrioscholerae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>vibrioscholerae-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/vibrioscholerae-article-title-check/fail.xml"/>
            <x:result href="result-d16002.xml"/>
            <x:test successful="true">
               <x:label>report vibrioscholerae-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'vibrioscholerae-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tsthermophila-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/tsthermophila-article-title-check/pass.xml"/>
            <x:result href="result-d16011.xml"/>
            <x:test successful="true">
               <x:label>not report tsthermophila-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tsthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tsthermophila-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/tsthermophila-article-title-check/fail.xml"/>
            <x:result href="result-d16020.xml"/>
            <x:test successful="true">
               <x:label>report tsthermophila-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tsthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tetrahymenasthermophila-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/tetrahymenasthermophila-article-title-check/pass.xml"/>
            <x:result href="result-d16029.xml"/>
            <x:test successful="true">
               <x:label>not report tetrahymenasthermophila-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tetrahymenasthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>tetrahymenasthermophila-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/tetrahymenasthermophila-article-title-check/fail.xml"/>
            <x:result href="result-d16038.xml"/>
            <x:test successful="true">
               <x:label>report tetrahymenasthermophila-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'tetrahymenasthermophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csreinhardtii-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/csreinhardtii-article-title-check/pass.xml"/>
            <x:result href="result-d16047.xml"/>
            <x:test successful="true">
               <x:label>not report csreinhardtii-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csreinhardtii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>csreinhardtii-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/csreinhardtii-article-title-check/fail.xml"/>
            <x:result href="result-d16056.xml"/>
            <x:test successful="true">
               <x:label>report csreinhardtii-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'csreinhardtii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydomonassreinhardtii-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/chlamydomonassreinhardtii-article-title-check/pass.xml"/>
            <x:result href="result-d16065.xml"/>
            <x:test successful="true">
               <x:label>not report chlamydomonassreinhardtii-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydomonassreinhardtii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydomonassreinhardtii-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/chlamydomonassreinhardtii-article-title-check/fail.xml"/>
            <x:result href="result-d16074.xml"/>
            <x:test successful="true">
               <x:label>report chlamydomonassreinhardtii-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydomonassreinhardtii-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsattenuata-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nsattenuata-article-title-check/pass.xml"/>
            <x:result href="result-d16083.xml"/>
            <x:test successful="true">
               <x:label>not report nsattenuata-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsattenuata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nsattenuata-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nsattenuata-article-title-check/fail.xml"/>
            <x:result href="result-d16092.xml"/>
            <x:test successful="true">
               <x:label>report nsattenuata-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nsattenuata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nicotianasattenuata-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nicotianasattenuata-article-title-check/pass.xml"/>
            <x:result href="result-d16101.xml"/>
            <x:test successful="true">
               <x:label>not report nicotianasattenuata-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nicotianasattenuata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nicotianasattenuata-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/nicotianasattenuata-article-title-check/fail.xml"/>
            <x:result href="result-d16110.xml"/>
            <x:test successful="true">
               <x:label>report nicotianasattenuata-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nicotianasattenuata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escarotovora-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escarotovora-article-title-check/pass.xml"/>
            <x:result href="result-d16119.xml"/>
            <x:test successful="true">
               <x:label>not report escarotovora-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escarotovora-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>escarotovora-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/escarotovora-article-title-check/fail.xml"/>
            <x:result href="result-d16128.xml"/>
            <x:test successful="true">
               <x:label>report escarotovora-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'escarotovora-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>erwiniascarotovora-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/erwiniascarotovora-article-title-check/pass.xml"/>
            <x:result href="result-d16137.xml"/>
            <x:test successful="true">
               <x:label>not report erwiniascarotovora-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'erwiniascarotovora-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>erwiniascarotovora-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/erwiniascarotovora-article-title-check/fail.xml"/>
            <x:result href="result-d16146.xml"/>
            <x:test successful="true">
               <x:label>report erwiniascarotovora-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'erwiniascarotovora-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hsapiens-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/hsapiens-article-title-check/pass.xml"/>
            <x:result href="result-d16155.xml"/>
            <x:test successful="true">
               <x:label>not report hsapiens-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hsapiens-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>hsapiens-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/hsapiens-article-title-check/fail.xml"/>
            <x:result href="result-d16164.xml"/>
            <x:test successful="true">
               <x:label>report hsapiens-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'hsapiens-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>homosapiens-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/homosapiens-article-title-check/pass.xml"/>
            <x:result href="result-d16173.xml"/>
            <x:test successful="true">
               <x:label>not report homosapiens-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'homosapiens-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>homosapiens-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/homosapiens-article-title-check/fail.xml"/>
            <x:result href="result-d16182.xml"/>
            <x:test successful="true">
               <x:label>report homosapiens-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'homosapiens-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ctrachomatis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ctrachomatis-article-title-check/pass.xml"/>
            <x:result href="result-d16191.xml"/>
            <x:test successful="true">
               <x:label>not report ctrachomatis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ctrachomatis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ctrachomatis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ctrachomatis-article-title-check/fail.xml"/>
            <x:result href="result-d16200.xml"/>
            <x:test successful="true">
               <x:label>report ctrachomatis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ctrachomatis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydiatrachomatis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/chlamydiatrachomatis-article-title-check/pass.xml"/>
            <x:result href="result-d16209.xml"/>
            <x:test successful="true">
               <x:label>not report chlamydiatrachomatis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydiatrachomatis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chlamydiatrachomatis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/chlamydiatrachomatis-article-title-check/fail.xml"/>
            <x:result href="result-d16218.xml"/>
            <x:test successful="true">
               <x:label>report chlamydiatrachomatis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chlamydiatrachomatis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>esfaecalis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/esfaecalis-article-title-check/pass.xml"/>
            <x:result href="result-d16227.xml"/>
            <x:test successful="true">
               <x:label>not report esfaecalis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'esfaecalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>esfaecalis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/esfaecalis-article-title-check/fail.xml"/>
            <x:result href="result-d16236.xml"/>
            <x:test successful="true">
               <x:label>report esfaecalis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'esfaecalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>enterococcussfaecalis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/enterococcussfaecalis-article-title-check/pass.xml"/>
            <x:result href="result-d16245.xml"/>
            <x:test successful="true">
               <x:label>not report enterococcussfaecalis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'enterococcussfaecalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>enterococcussfaecalis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/enterococcussfaecalis-article-title-check/fail.xml"/>
            <x:result href="result-d16254.xml"/>
            <x:test successful="true">
               <x:label>report enterococcussfaecalis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'enterococcussfaecalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xlaevis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xlaevis-article-title-check/pass.xml"/>
            <x:result href="result-d16263.xml"/>
            <x:test successful="true">
               <x:label>not report xlaevis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xlaevis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xlaevis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xlaevis-article-title-check/fail.xml"/>
            <x:result href="result-d16272.xml"/>
            <x:test successful="true">
               <x:label>report xlaevis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xlaevis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopuslaevis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xenopuslaevis-article-title-check/pass.xml"/>
            <x:result href="result-d16281.xml"/>
            <x:test successful="true">
               <x:label>not report xenopuslaevis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopuslaevis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopuslaevis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xenopuslaevis-article-title-check/fail.xml"/>
            <x:result href="result-d16290.xml"/>
            <x:test successful="true">
               <x:label>report xenopuslaevis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopuslaevis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xtropicalis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xtropicalis-article-title-check/pass.xml"/>
            <x:result href="result-d16299.xml"/>
            <x:test successful="true">
               <x:label>not report xtropicalis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xtropicalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xtropicalis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xtropicalis-article-title-check/fail.xml"/>
            <x:result href="result-d16308.xml"/>
            <x:test successful="true">
               <x:label>report xtropicalis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xtropicalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopustropicalis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xenopustropicalis-article-title-check/pass.xml"/>
            <x:result href="result-d16317.xml"/>
            <x:test successful="true">
               <x:label>not report xenopustropicalis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopustropicalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopustropicalis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xenopustropicalis-article-title-check/fail.xml"/>
            <x:result href="result-d16326.xml"/>
            <x:test successful="true">
               <x:label>report xenopustropicalis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopustropicalis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>mmusculus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/mmusculus-article-title-check/pass.xml"/>
            <x:result href="result-d16335.xml"/>
            <x:test successful="true">
               <x:label>not report mmusculus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mmusculus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>mmusculus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/mmusculus-article-title-check/fail.xml"/>
            <x:result href="result-d16344.xml"/>
            <x:test successful="true">
               <x:label>report mmusculus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'mmusculus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>musmusculus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/musmusculus-article-title-check/pass.xml"/>
            <x:result href="result-d16353.xml"/>
            <x:test successful="true">
               <x:label>not report musmusculus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'musmusculus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>musmusculus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/musmusculus-article-title-check/fail.xml"/>
            <x:result href="result-d16362.xml"/>
            <x:test successful="true">
               <x:label>report musmusculus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'musmusculus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dimmigrans-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dimmigrans-article-title-check/pass.xml"/>
            <x:result href="result-d16371.xml"/>
            <x:test successful="true">
               <x:label>not report dimmigrans-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dimmigrans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dimmigrans-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dimmigrans-article-title-check/fail.xml"/>
            <x:result href="result-d16380.xml"/>
            <x:test successful="true">
               <x:label>report dimmigrans-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dimmigrans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaimmigrans-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilaimmigrans-article-title-check/pass.xml"/>
            <x:result href="result-d16389.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilaimmigrans-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaimmigrans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaimmigrans-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilaimmigrans-article-title-check/fail.xml"/>
            <x:result href="result-d16398.xml"/>
            <x:test successful="true">
               <x:label>report drosophilaimmigrans-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaimmigrans-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsubobscura-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dsubobscura-article-title-check/pass.xml"/>
            <x:result href="result-d16407.xml"/>
            <x:test successful="true">
               <x:label>not report dsubobscura-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsubobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dsubobscura-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dsubobscura-article-title-check/fail.xml"/>
            <x:result href="result-d16416.xml"/>
            <x:test successful="true">
               <x:label>report dsubobscura-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dsubobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasubobscura-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilasubobscura-article-title-check/pass.xml"/>
            <x:result href="result-d16425.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilasubobscura-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasubobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilasubobscura-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilasubobscura-article-title-check/fail.xml"/>
            <x:result href="result-d16434.xml"/>
            <x:test successful="true">
               <x:label>report drosophilasubobscura-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilasubobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daffinis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/daffinis-article-title-check/pass.xml"/>
            <x:result href="result-d16443.xml"/>
            <x:test successful="true">
               <x:label>not report daffinis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daffinis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daffinis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/daffinis-article-title-check/fail.xml"/>
            <x:result href="result-d16452.xml"/>
            <x:test successful="true">
               <x:label>report daffinis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daffinis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaaffinis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilaaffinis-article-title-check/pass.xml"/>
            <x:result href="result-d16461.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilaaffinis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaaffinis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaaffinis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilaaffinis-article-title-check/fail.xml"/>
            <x:result href="result-d16470.xml"/>
            <x:test successful="true">
               <x:label>report drosophilaaffinis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaaffinis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dobscura-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dobscura-article-title-check/pass.xml"/>
            <x:result href="result-d16479.xml"/>
            <x:test successful="true">
               <x:label>not report dobscura-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dobscura-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/dobscura-article-title-check/fail.xml"/>
            <x:result href="result-d16488.xml"/>
            <x:test successful="true">
               <x:label>report dobscura-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaobscura-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilaobscura-article-title-check/pass.xml"/>
            <x:result href="result-d16497.xml"/>
            <x:test successful="true">
               <x:label>not report drosophilaobscura-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophilaobscura-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophilaobscura-article-title-check/fail.xml"/>
            <x:result href="result-d16506.xml"/>
            <x:test successful="true">
               <x:label>report drosophilaobscura-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophilaobscura-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ftularensis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ftularensis-article-title-check/pass.xml"/>
            <x:result href="result-d16515.xml"/>
            <x:test successful="true">
               <x:label>not report ftularensis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ftularensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ftularensis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/ftularensis-article-title-check/fail.xml"/>
            <x:result href="result-d16524.xml"/>
            <x:test successful="true">
               <x:label>report ftularensis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ftularensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>francisellatularensis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/francisellatularensis-article-title-check/pass.xml"/>
            <x:result href="result-d16533.xml"/>
            <x:test successful="true">
               <x:label>not report francisellatularensis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'francisellatularensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>francisellatularensis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/francisellatularensis-article-title-check/fail.xml"/>
            <x:result href="result-d16542.xml"/>
            <x:test successful="true">
               <x:label>report francisellatularensis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'francisellatularensis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pplantaginis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/pplantaginis-article-title-check/pass.xml"/>
            <x:result href="result-d16551.xml"/>
            <x:test successful="true">
               <x:label>not report pplantaginis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pplantaginis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pplantaginis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/pplantaginis-article-title-check/fail.xml"/>
            <x:result href="result-d16560.xml"/>
            <x:test successful="true">
               <x:label>report pplantaginis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pplantaginis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>podosphaeraplantaginis-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/podosphaeraplantaginis-article-title-check/pass.xml"/>
            <x:result href="result-d16569.xml"/>
            <x:test successful="true">
               <x:label>not report podosphaeraplantaginis-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'podosphaeraplantaginis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>podosphaeraplantaginis-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/podosphaeraplantaginis-article-title-check/fail.xml"/>
            <x:result href="result-d16578.xml"/>
            <x:test successful="true">
               <x:label>report podosphaeraplantaginis-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'podosphaeraplantaginis-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>planceolata-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/planceolata-article-title-check/pass.xml"/>
            <x:result href="result-d16587.xml"/>
            <x:test successful="true">
               <x:label>not report planceolata-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'planceolata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>planceolata-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/planceolata-article-title-check/fail.xml"/>
            <x:result href="result-d16596.xml"/>
            <x:test successful="true">
               <x:label>report planceolata-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'planceolata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plantagolanceolata-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/plantagolanceolata-article-title-check/pass.xml"/>
            <x:result href="result-d16605.xml"/>
            <x:test successful="true">
               <x:label>not report plantagolanceolata-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plantagolanceolata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plantagolanceolata-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/plantagolanceolata-article-title-check/fail.xml"/>
            <x:result href="result-d16614.xml"/>
            <x:test successful="true">
               <x:label>report plantagolanceolata-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plantagolanceolata-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drerio-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drerio-article-title-check/pass.xml"/>
            <x:result href="result-d16623.xml"/>
            <x:test successful="true">
               <x:label>not report drerio-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drerio-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drerio-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drerio-article-title-check/fail.xml"/>
            <x:result href="result-d16632.xml"/>
            <x:test successful="true">
               <x:label>report drerio-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drerio-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daniorerio-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/daniorerio-article-title-check/pass.xml"/>
            <x:result href="result-d16641.xml"/>
            <x:test successful="true">
               <x:label>not report daniorerio-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daniorerio-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>daniorerio-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/daniorerio-article-title-check/fail.xml"/>
            <x:result href="result-d16650.xml"/>
            <x:test successful="true">
               <x:label>report daniorerio-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'daniorerio-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophila-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophila-article-title-check/pass.xml"/>
            <x:result href="result-d16659.xml"/>
            <x:test successful="true">
               <x:label>not report drosophila-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>drosophila-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/drosophila-article-title-check/fail.xml"/>
            <x:result href="result-d16668.xml"/>
            <x:test successful="true">
               <x:label>report drosophila-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'drosophila-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopus-article-title-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xenopus-article-title-check/pass.xml"/>
            <x:result href="result-d16677.xml"/>
            <x:test successful="true">
               <x:label>not report xenopus-article-title-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xenopus-article-title-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/org-title-kwd/xenopus-article-title-check/fail.xml"/>
            <x:result href="result-d16686.xml"/>
            <x:test successful="true">
               <x:label>report xenopus-article-title-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xenopus-article-title-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert org-title-kwd-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'org-title-kwd-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>unallowed-symbol-tests</x:label>
         <x:scenario>
            <x:label>copyright-symbol-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/copyright-symbol/pass.xml"/>
            <x:result href="result-d16695.xml"/>
            <x:test successful="true">
               <x:label>not report copyright-symbol error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'copyright-symbol'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>copyright-symbol-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/copyright-symbol/fail.xml"/>
            <x:result href="result-d16704.xml"/>
            <x:test successful="true">
               <x:label>report copyright-symbol error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'copyright-symbol'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>trademark-symbol-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/trademark-symbol/pass.xml"/>
            <x:result href="result-d16713.xml"/>
            <x:test successful="true">
               <x:label>not report trademark-symbol error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'trademark-symbol'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>trademark-symbol-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/trademark-symbol/fail.xml"/>
            <x:result href="result-d16722.xml"/>
            <x:test successful="true">
               <x:label>report trademark-symbol error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'trademark-symbol'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reg-trademark-symbol-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/reg-trademark-symbol/pass.xml"/>
            <x:result href="result-d16731.xml"/>
            <x:test successful="true">
               <x:label>not report reg-trademark-symbol error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reg-trademark-symbol'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reg-trademark-symbol-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/reg-trademark-symbol/fail.xml"/>
            <x:result href="result-d16740.xml"/>
            <x:test successful="true">
               <x:label>report reg-trademark-symbol error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reg-trademark-symbol'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>Inc-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/Inc-presence/pass.xml"/>
            <x:result href="result-d16749.xml"/>
            <x:test successful="true">
               <x:label>not report Inc-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'Inc-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>Inc-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/Inc-presence/fail.xml"/>
            <x:result href="result-d16758.xml"/>
            <x:test successful="true">
               <x:label>report Inc-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'Inc-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>andand-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/andand-presence/pass.xml"/>
            <x:result href="result-d16767.xml"/>
            <x:test successful="true">
               <x:label>not report andand-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'andand-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>andand-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/andand-presence/fail.xml"/>
            <x:result href="result-d16776.xml"/>
            <x:test successful="true">
               <x:label>report andand-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'andand-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>figurefigure-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/figurefigure-presence/pass.xml"/>
            <x:result href="result-d16785.xml"/>
            <x:test successful="true">
               <x:label>not report figurefigure-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'figurefigure-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>figurefigure-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/figurefigure-presence/fail.xml"/>
            <x:result href="result-d16794.xml"/>
            <x:test successful="true">
               <x:label>report figurefigure-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'figurefigure-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementalfigure-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/supplementalfigure-presence/pass.xml"/>
            <x:result href="result-d16803.xml"/>
            <x:test successful="true">
               <x:label>not report supplementalfigure-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementalfigure-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementalfigure-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/supplementalfigure-presence/fail.xml"/>
            <x:result href="result-d16812.xml"/>
            <x:test successful="true">
               <x:label>report supplementalfigure-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementalfigure-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementalfile-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/supplementalfile-presence/pass.xml"/>
            <x:result href="result-d16821.xml"/>
            <x:test successful="true">
               <x:label>not report supplementalfile-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementalfile-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>supplementalfile-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/supplementalfile-presence/fail.xml"/>
            <x:result href="result-d16830.xml"/>
            <x:test successful="true">
               <x:label>report supplementalfile-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'supplementalfile-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/ref-presence/pass.xml"/>
            <x:result href="result-d16839.xml"/>
            <x:test successful="true">
               <x:label>not report ref-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/ref-presence/fail.xml"/>
            <x:result href="result-d16848.xml"/>
            <x:test successful="true">
               <x:label>report ref-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>refs-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/refs-presence/pass.xml"/>
            <x:result href="result-d16857.xml"/>
            <x:test successful="true">
               <x:label>not report refs-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'refs-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>refs-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/refs-presence/fail.xml"/>
            <x:result href="result-d16866.xml"/>
            <x:test successful="true">
               <x:label>report refs-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'refs-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/replacement-character-presence/pass.xml"/>
            <x:result href="result-d16875.xml"/>
            <x:test successful="true">
               <x:label>not report replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/replacement-character-presence/fail.xml"/>
            <x:result href="result-d16884.xml"/>
            <x:test successful="true">
               <x:label>report replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>junk-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/junk-character-presence/pass.xml"/>
            <x:result href="result-d16893.xml"/>
            <x:test successful="true">
               <x:label>not report junk-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'junk-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>junk-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests/junk-character-presence/fail.xml"/>
            <x:result href="result-d16902.xml"/>
            <x:test successful="true">
               <x:label>report junk-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'junk-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert unallowed-symbol-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>unallowed-symbol-tests-sup</x:label>
         <x:scenario>
            <x:label>copyright-symbol-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/copyright-symbol-sup/pass.xml"/>
            <x:result href="result-d16911.xml"/>
            <x:test successful="true">
               <x:label>not report copyright-symbol-sup error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'copyright-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>copyright-symbol-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/copyright-symbol-sup/fail.xml"/>
            <x:result href="result-d16920.xml"/>
            <x:test successful="false">
               <x:label>report copyright-symbol-sup error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'copyright-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>trademark-symbol-1-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/trademark-symbol-1-sup/pass.xml"/>
            <x:result href="result-d16929.xml"/>
            <x:test successful="true">
               <x:label>not report trademark-symbol-1-sup error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'trademark-symbol-1-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>trademark-symbol-1-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/trademark-symbol-1-sup/fail.xml"/>
            <x:result href="result-d16938.xml"/>
            <x:test successful="false">
               <x:label>report trademark-symbol-1-sup error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'trademark-symbol-1-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>trademark-symbol-2-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/trademark-symbol-2-sup/pass.xml"/>
            <x:result href="result-d16947.xml"/>
            <x:test successful="true">
               <x:label>not report trademark-symbol-2-sup warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'trademark-symbol-2-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>trademark-symbol-2-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/trademark-symbol-2-sup/fail.xml"/>
            <x:result href="result-d16956.xml"/>
            <x:test successful="false">
               <x:label>report trademark-symbol-2-sup warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'trademark-symbol-2-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reg-trademark-symbol-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/reg-trademark-symbol-sup/pass.xml"/>
            <x:result href="result-d16965.xml"/>
            <x:test successful="true">
               <x:label>not report reg-trademark-symbol-sup error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reg-trademark-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reg-trademark-symbol-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/reg-trademark-symbol-sup/fail.xml"/>
            <x:result href="result-d16974.xml"/>
            <x:test successful="false">
               <x:label>report reg-trademark-symbol-sup error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reg-trademark-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>degree-symbol-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/degree-symbol-sup/pass.xml"/>
            <x:result href="result-d16983.xml"/>
            <x:test successful="true">
               <x:label>not report degree-symbol-sup error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'degree-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>degree-symbol-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/degree-symbol-sup/fail.xml"/>
            <x:result href="result-d16992.xml"/>
            <x:test successful="false">
               <x:label>report degree-symbol-sup error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'degree-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>white-circle-symbol-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/white-circle-symbol-sup/pass.xml"/>
            <x:result href="result-d17001.xml"/>
            <x:test successful="true">
               <x:label>not report white-circle-symbol-sup warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'white-circle-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>white-circle-symbol-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/white-circle-symbol-sup/fail.xml"/>
            <x:result href="result-d17010.xml"/>
            <x:test successful="false">
               <x:label>report white-circle-symbol-sup warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'white-circle-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ring-op-symbol-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/ring-op-symbol-sup/pass.xml"/>
            <x:result href="result-d17019.xml"/>
            <x:test successful="true">
               <x:label>not report ring-op-symbol-sup warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ring-op-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ring-op-symbol-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/ring-op-symbol-sup/fail.xml"/>
            <x:result href="result-d17028.xml"/>
            <x:test successful="false">
               <x:label>report ring-op-symbol-sup warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ring-op-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ring-diacritic-symbol-sup-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/ring-diacritic-symbol-sup/pass.xml"/>
            <x:result href="result-d17037.xml"/>
            <x:test successful="true">
               <x:label>not report ring-diacritic-symbol-sup warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ring-diacritic-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ring-diacritic-symbol-sup-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/unallowed-symbol-tests-sup/ring-diacritic-symbol-sup/fail.xml"/>
            <x:result href="result-d17046.xml"/>
            <x:test successful="false">
               <x:label>report ring-diacritic-symbol-sup warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ring-diacritic-symbol-sup'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert unallowed-symbol-tests-sup-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'unallowed-symbol-tests-sup-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>country-tests</x:label>
         <x:scenario>
            <x:label>united-states-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/united-states-test-1/pass.xml"/>
            <x:result href="result-d17055.xml"/>
            <x:test successful="true">
               <x:label>not report united-states-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'united-states-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>united-states-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/united-states-test-1/fail.xml"/>
            <x:result href="result-d17064.xml"/>
            <x:test successful="true">
               <x:label>report united-states-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'united-states-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>united-states-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/united-states-test-2/pass.xml"/>
            <x:result href="result-d17073.xml"/>
            <x:test successful="true">
               <x:label>not report united-states-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'united-states-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>united-states-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/united-states-test-2/fail.xml"/>
            <x:result href="result-d17082.xml"/>
            <x:test successful="true">
               <x:label>report united-states-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'united-states-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>united-kingdom-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/united-kingdom-test-2/pass.xml"/>
            <x:result href="result-d17091.xml"/>
            <x:test successful="true">
               <x:label>not report united-kingdom-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'united-kingdom-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>united-kingdom-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/united-kingdom-test-2/fail.xml"/>
            <x:result href="result-d17100.xml"/>
            <x:test successful="true">
               <x:label>report united-kingdom-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'united-kingdom-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>gen-country-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/gen-country-test/pass.xml"/>
            <x:result href="result-d17109.xml"/>
            <x:test successful="false">
               <x:label>not assert gen-country-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'gen-country-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>gen-country-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/gen-country-test/fail.xml"/>
            <x:result href="result-d17118.xml"/>
            <x:test successful="true">
               <x:label>assert gen-country-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'gen-country-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>singapore-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/singapore-test-1/pass.xml"/>
            <x:result href="result-d17127.xml"/>
            <x:test successful="true">
               <x:label>not report singapore-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'singapore-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>singapore-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/country-tests/singapore-test-1/fail.xml"/>
            <x:result href="result-d17136.xml"/>
            <x:test successful="true">
               <x:label>report singapore-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'singapore-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert country-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'country-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>city-tests</x:label>
         <x:scenario>
            <x:label>pre-US-states-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/pre-US-states-test/pass.xml"/>
            <x:result href="result-d17145.xml"/>
            <x:test successful="true">
               <x:label>not report pre-US-states-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-US-states-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-US-states-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/pre-US-states-test/fail.xml"/>
            <x:result href="result-d17154.xml"/>
            <x:test successful="true">
               <x:label>report pre-US-states-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-US-states-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-US-states-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/final-US-states-test/pass.xml"/>
            <x:result href="result-d17163.xml"/>
            <x:test successful="true">
               <x:label>not report final-US-states-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-US-states-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-US-states-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/final-US-states-test/fail.xml"/>
            <x:result href="result-d17172.xml"/>
            <x:test successful="true">
               <x:label>report final-US-states-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-US-states-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>singapore-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/singapore-test-2/pass.xml"/>
            <x:result href="result-d17181.xml"/>
            <x:test successful="true">
               <x:label>not report singapore-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'singapore-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>singapore-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/singapore-test-2/fail.xml"/>
            <x:result href="result-d17190.xml"/>
            <x:test successful="true">
               <x:label>report singapore-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'singapore-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>city-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/city-replacement-character-presence/pass.xml"/>
            <x:result href="result-d17199.xml"/>
            <x:test successful="true">
               <x:label>not report city-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>city-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/city-tests/city-replacement-character-presence/fail.xml"/>
            <x:result href="result-d17208.xml"/>
            <x:test successful="true">
               <x:label>report city-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert city-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'city-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>institution-tests</x:label>
         <x:scenario>
            <x:label>UC-no-test1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/institution-tests/UC-no-test1/pass.xml"/>
            <x:result href="result-d17217.xml"/>
            <x:test successful="true">
               <x:label>not report UC-no-test1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'UC-no-test1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert institution-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>UC-no-test1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/institution-tests/UC-no-test1/fail.xml"/>
            <x:result href="result-d17226.xml"/>
            <x:test successful="true">
               <x:label>report UC-no-test1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'UC-no-test1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert institution-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>institution-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/institution-tests/institution-replacement-character-presence/pass.xml"/>
            <x:result href="result-d17235.xml"/>
            <x:test successful="true">
               <x:label>not report institution-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert institution-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>institution-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/institution-tests/institution-replacement-character-presence/fail.xml"/>
            <x:result href="result-d17244.xml"/>
            <x:test successful="true">
               <x:label>report institution-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert institution-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'institution-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>department-tests</x:label>
         <x:scenario>
            <x:label>plural-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-1/pass.xml"/>
            <x:result href="result-d17253.xml"/>
            <x:test successful="true">
               <x:label>not report plural-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-1/fail.xml"/>
            <x:result href="result-d17262.xml"/>
            <x:test successful="true">
               <x:label>report plural-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-2/pass.xml"/>
            <x:result href="result-d17271.xml"/>
            <x:test successful="true">
               <x:label>not report plural-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-2/fail.xml"/>
            <x:result href="result-d17280.xml"/>
            <x:test successful="true">
               <x:label>report plural-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-3/pass.xml"/>
            <x:result href="result-d17289.xml"/>
            <x:test successful="true">
               <x:label>not report plural-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-3/fail.xml"/>
            <x:result href="result-d17298.xml"/>
            <x:test successful="true">
               <x:label>report plural-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-4/pass.xml"/>
            <x:result href="result-d17307.xml"/>
            <x:test successful="true">
               <x:label>not report plural-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>plural-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/plural-test-4/fail.xml"/>
            <x:result href="result-d17316.xml"/>
            <x:test successful="true">
               <x:label>report plural-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'plural-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dept-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/dept-replacement-character-presence/pass.xml"/>
            <x:result href="result-d17325.xml"/>
            <x:test successful="true">
               <x:label>not report dept-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dept-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>dept-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/department-tests/dept-replacement-character-presence/fail.xml"/>
            <x:result href="result-d17334.xml"/>
            <x:test successful="true">
               <x:label>report dept-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'dept-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert department-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'department-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>journal-title-tests</x:label>
         <x:scenario>
            <x:label>PLOS-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/PLOS-1/pass.xml"/>
            <x:result href="result-d17343.xml"/>
            <x:test successful="true">
               <x:label>not report PLOS-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PLOS-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PLOS-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/PLOS-1/fail.xml"/>
            <x:result href="result-d17352.xml"/>
            <x:test successful="true">
               <x:label>report PLOS-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PLOS-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PLOS-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/PLOS-2/pass.xml"/>
            <x:result href="result-d17361.xml"/>
            <x:test successful="true">
               <x:label>not report PLOS-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PLOS-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PLOS-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/PLOS-2/fail.xml"/>
            <x:result href="result-d17370.xml"/>
            <x:test successful="true">
               <x:label>report PLOS-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PLOS-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PNAS-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/PNAS/pass.xml"/>
            <x:result href="result-d17379.xml"/>
            <x:test successful="true">
               <x:label>not report PNAS error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PNAS'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PNAS-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/PNAS/fail.xml"/>
            <x:result href="result-d17388.xml"/>
            <x:test successful="true">
               <x:label>report PNAS error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PNAS'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>RNA-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/RNA/pass.xml"/>
            <x:result href="result-d17397.xml"/>
            <x:test successful="true">
               <x:label>not report RNA error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'RNA'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>RNA-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/RNA/fail.xml"/>
            <x:result href="result-d17406.xml"/>
            <x:test successful="true">
               <x:label>report RNA error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'RNA'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>G3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/G3/pass.xml"/>
            <x:result href="result-d17415.xml"/>
            <x:test successful="true">
               <x:label>not report G3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'G3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>G3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/G3/fail.xml"/>
            <x:result href="result-d17424.xml"/>
            <x:test successful="true">
               <x:label>report G3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'G3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ampersand-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/ampersand-check/pass.xml"/>
            <x:result href="result-d17433.xml"/>
            <x:test successful="true">
               <x:label>not report ampersand-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ampersand-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ampersand-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/ampersand-check/fail.xml"/>
            <x:result href="result-d17442.xml"/>
            <x:test successful="true">
               <x:label>report ampersand-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ampersand-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>Research-gate-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/Research-gate-check/pass.xml"/>
            <x:result href="result-d17451.xml"/>
            <x:test successful="true">
               <x:label>not report Research-gate-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'Research-gate-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>Research-gate-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/Research-gate-check/fail.xml"/>
            <x:result href="result-d17460.xml"/>
            <x:test successful="true">
               <x:label>report Research-gate-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'Research-gate-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>journal-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/journal-replacement-character-presence/pass.xml"/>
            <x:result href="result-d17469.xml"/>
            <x:test successful="true">
               <x:label>not report journal-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>journal-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/journal-replacement-character-presence/fail.xml"/>
            <x:result href="result-d17478.xml"/>
            <x:test successful="true">
               <x:label>report journal-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>journal-off-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/journal-off-presence/pass.xml"/>
            <x:result href="result-d17487.xml"/>
            <x:test successful="true">
               <x:label>not report journal-off-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-off-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>journal-off-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-title-tests/journal-off-presence/fail.xml"/>
            <x:result href="result-d17496.xml"/>
            <x:test successful="true">
               <x:label>report journal-off-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-off-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref-article-title-tests</x:label>
         <x:scenario>
            <x:label>article-title-fullstop-check-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-fullstop-check-1/pass.xml"/>
            <x:result href="result-d17505.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-fullstop-check-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-fullstop-check-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-fullstop-check-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-fullstop-check-1/fail.xml"/>
            <x:result href="result-d17514.xml"/>
            <x:test successful="false">
               <x:label>report article-title-fullstop-check-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-fullstop-check-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-fullstop-check-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-fullstop-check-2/pass.xml"/>
            <x:result href="result-d17523.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-fullstop-check-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-fullstop-check-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-fullstop-check-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-fullstop-check-2/fail.xml"/>
            <x:result href="result-d17532.xml"/>
            <x:test successful="false">
               <x:label>report article-title-fullstop-check-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-fullstop-check-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-fullstop-check-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-fullstop-check-3/pass.xml"/>
            <x:result href="result-d17541.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-fullstop-check-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-fullstop-check-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-fullstop-check-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-fullstop-check-3/fail.xml"/>
            <x:result href="result-d17550.xml"/>
            <x:test successful="false">
               <x:label>report article-title-fullstop-check-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-fullstop-check-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-correction-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-correction-check/pass.xml"/>
            <x:result href="result-d17559.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-correction-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-correction-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-correction-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-correction-check/fail.xml"/>
            <x:result href="result-d17568.xml"/>
            <x:test successful="false">
               <x:label>report article-title-correction-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-correction-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-journal-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-journal-check/pass.xml"/>
            <x:result href="result-d17577.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-journal-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-journal-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-journal-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-journal-check/fail.xml"/>
            <x:result href="result-d17586.xml"/>
            <x:test successful="false">
               <x:label>report article-title-journal-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-journal-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-child-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-child-1/pass.xml"/>
            <x:result href="result-d17595.xml"/>
            <x:test successful="true">
               <x:label>not report article-title-child-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-child-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>article-title-child-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/article-title-child-1/fail.xml"/>
            <x:result href="result-d17604.xml"/>
            <x:test successful="false">
               <x:label>report article-title-child-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'article-title-child-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>a-title-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/a-title-replacement-character-presence/pass.xml"/>
            <x:result href="result-d17613.xml"/>
            <x:test successful="true">
               <x:label>not report a-title-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'a-title-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>a-title-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-article-title-tests/a-title-replacement-character-presence/fail.xml"/>
            <x:result href="result-d17622.xml"/>
            <x:test successful="false">
               <x:label>report a-title-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'a-title-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-article-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-article-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>journal-tests</x:label>
         <x:scenario>
            <x:label>eloc-page-assert-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-tests/eloc-page-assert/pass.xml"/>
            <x:result href="result-d17631.xml"/>
            <x:test successful="true">
               <x:label>not report eloc-page-assert warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'eloc-page-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>eloc-page-assert-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-tests/eloc-page-assert/fail.xml"/>
            <x:result href="result-d17640.xml"/>
            <x:test successful="true">
               <x:label>report eloc-page-assert warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'eloc-page-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>journal-preprint-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-tests/journal-preprint-check/pass.xml"/>
            <x:result href="result-d17649.xml"/>
            <x:test successful="true">
               <x:label>not report journal-preprint-check error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-preprint-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>journal-preprint-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/journal-tests/journal-preprint-check/fail.xml"/>
            <x:result href="result-d17658.xml"/>
            <x:test successful="true">
               <x:label>report journal-preprint-check error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-preprint-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert journal-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'journal-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>preprint-title-tests</x:label>
         <x:scenario>
            <x:label>not-rxiv-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/not-rxiv-test/pass.xml"/>
            <x:result href="result-d17667.xml"/>
            <x:test successful="true">
               <x:label>not report not-rxiv-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'not-rxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>not-rxiv-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/not-rxiv-test/fail.xml"/>
            <x:result href="result-d17676.xml"/>
            <x:test successful="false">
               <x:label>report not-rxiv-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'not-rxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>biorxiv-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/biorxiv-test/pass.xml"/>
            <x:result href="result-d17685.xml"/>
            <x:test successful="true">
               <x:label>not report biorxiv-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'biorxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>biorxiv-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/biorxiv-test/fail.xml"/>
            <x:result href="result-d17694.xml"/>
            <x:test successful="false">
               <x:label>report biorxiv-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'biorxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arxiv-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/arxiv-test/pass.xml"/>
            <x:result href="result-d17703.xml"/>
            <x:test successful="true">
               <x:label>not report arxiv-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arxiv-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/arxiv-test/fail.xml"/>
            <x:result href="result-d17712.xml"/>
            <x:test successful="false">
               <x:label>report arxiv-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chemrxiv-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/chemrxiv-test/pass.xml"/>
            <x:result href="result-d17721.xml"/>
            <x:test successful="true">
               <x:label>not report chemrxiv-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chemrxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chemrxiv-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/chemrxiv-test/fail.xml"/>
            <x:result href="result-d17730.xml"/>
            <x:test successful="false">
               <x:label>report chemrxiv-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chemrxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>peerjpreprints-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/peerjpreprints-test/pass.xml"/>
            <x:result href="result-d17739.xml"/>
            <x:test successful="true">
               <x:label>not report peerjpreprints-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'peerjpreprints-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>peerjpreprints-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/peerjpreprints-test/fail.xml"/>
            <x:result href="result-d17748.xml"/>
            <x:test successful="false">
               <x:label>report peerjpreprints-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'peerjpreprints-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psyarxiv-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/psyarxiv-test/pass.xml"/>
            <x:result href="result-d17757.xml"/>
            <x:test successful="true">
               <x:label>not report psyarxiv-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psyarxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psyarxiv-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/psyarxiv-test/fail.xml"/>
            <x:result href="result-d17766.xml"/>
            <x:test successful="false">
               <x:label>report psyarxiv-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psyarxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>paleorxiv-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/paleorxiv-test/pass.xml"/>
            <x:result href="result-d17775.xml"/>
            <x:test successful="true">
               <x:label>not report paleorxiv-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'paleorxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>paleorxiv-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/paleorxiv-test/fail.xml"/>
            <x:result href="result-d17784.xml"/>
            <x:test successful="false">
               <x:label>report paleorxiv-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'paleorxiv-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>preprint-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/preprint-replacement-character-presence/pass.xml"/>
            <x:result href="result-d17793.xml"/>
            <x:test successful="true">
               <x:label>not report preprint-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>preprint-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/preprint-title-tests/preprint-replacement-character-presence/fail.xml"/>
            <x:result href="result-d17802.xml"/>
            <x:test successful="false">
               <x:label>report preprint-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert preprint-title-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'preprint-title-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>website-tests</x:label>
         <x:scenario>
            <x:label>github-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/github-web-test/pass.xml"/>
            <x:result href="result-d17811.xml"/>
            <x:test successful="true">
               <x:label>not report github-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'github-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>github-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/github-web-test/fail.xml"/>
            <x:result href="result-d17820.xml"/>
            <x:test successful="false">
               <x:label>report github-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'github-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>webreplacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/webreplacement-character-presence/pass.xml"/>
            <x:result href="result-d17829.xml"/>
            <x:test successful="true">
               <x:label>not report webreplacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'webreplacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>webreplacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/webreplacement-character-presence/fail.xml"/>
            <x:result href="result-d17838.xml"/>
            <x:test successful="false">
               <x:label>report webreplacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'webreplacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psyarxiv-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/psyarxiv-web-test/pass.xml"/>
            <x:result href="result-d17847.xml"/>
            <x:test successful="true">
               <x:label>not report psyarxiv-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psyarxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>psyarxiv-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/psyarxiv-web-test/fail.xml"/>
            <x:result href="result-d17856.xml"/>
            <x:test successful="false">
               <x:label>report psyarxiv-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'psyarxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arxiv-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/arxiv-web-test/pass.xml"/>
            <x:result href="result-d17865.xml"/>
            <x:test successful="true">
               <x:label>not report arxiv-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>arxiv-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/arxiv-web-test/fail.xml"/>
            <x:result href="result-d17874.xml"/>
            <x:test successful="false">
               <x:label>report arxiv-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'arxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>biorxiv-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/biorxiv-web-test/pass.xml"/>
            <x:result href="result-d17883.xml"/>
            <x:test successful="true">
               <x:label>not report biorxiv-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'biorxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>biorxiv-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/biorxiv-web-test/fail.xml"/>
            <x:result href="result-d17892.xml"/>
            <x:test successful="false">
               <x:label>report biorxiv-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'biorxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chemrxiv-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/chemrxiv-web-test/pass.xml"/>
            <x:result href="result-d17901.xml"/>
            <x:test successful="true">
               <x:label>not report chemrxiv-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chemrxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>chemrxiv-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/chemrxiv-web-test/fail.xml"/>
            <x:result href="result-d17910.xml"/>
            <x:test successful="false">
               <x:label>report chemrxiv-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'chemrxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>peerj-preprints-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/peerj-preprints-web-test/pass.xml"/>
            <x:result href="result-d17919.xml"/>
            <x:test successful="true">
               <x:label>not report peerj-preprints-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'peerj-preprints-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>peerj-preprints-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/peerj-preprints-web-test/fail.xml"/>
            <x:result href="result-d17928.xml"/>
            <x:test successful="false">
               <x:label>report peerj-preprints-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'peerj-preprints-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>paleorxiv-web-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/paleorxiv-web-test/pass.xml"/>
            <x:result href="result-d17937.xml"/>
            <x:test successful="true">
               <x:label>not report paleorxiv-web-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'paleorxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>paleorxiv-web-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/website-tests/paleorxiv-web-test/fail.xml"/>
            <x:result href="result-d17946.xml"/>
            <x:test successful="false">
               <x:label>report paleorxiv-web-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'paleorxiv-web-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert website-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'website-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>software-ref-tests</x:label>
         <x:scenario>
            <x:label>R-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-1/pass.xml"/>
            <x:result href="result-d17955.xml"/>
            <x:test successful="true">
               <x:label>not report R-test-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-1/fail.xml"/>
            <x:result href="result-d17964.xml"/>
            <x:test successful="false">
               <x:label>report R-test-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-2/pass.xml"/>
            <x:result href="result-d17973.xml"/>
            <x:test successful="true">
               <x:label>not report R-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-2/fail.xml"/>
            <x:result href="result-d17982.xml"/>
            <x:test successful="false">
               <x:label>report R-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-3/pass.xml"/>
            <x:result href="result-d17991.xml"/>
            <x:test successful="true">
               <x:label>not report R-test-3 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-3/fail.xml"/>
            <x:result href="result-d18000.xml"/>
            <x:test successful="false">
               <x:label>report R-test-3 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-4/pass.xml"/>
            <x:result href="result-d18009.xml"/>
            <x:test successful="true">
               <x:label>not report R-test-4 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-4/fail.xml"/>
            <x:result href="result-d18018.xml"/>
            <x:test successful="false">
               <x:label>report R-test-4 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-5/pass.xml"/>
            <x:result href="result-d18027.xml"/>
            <x:test successful="true">
               <x:label>not report R-test-5 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>R-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/R-test-5/fail.xml"/>
            <x:result href="result-d18036.xml"/>
            <x:test successful="false">
               <x:label>report R-test-5 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'R-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>software-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/software-replacement-character-presence/pass.xml"/>
            <x:result href="result-d18045.xml"/>
            <x:test successful="true">
               <x:label>not report software-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>software-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/software-ref-tests/software-replacement-character-presence/fail.xml"/>
            <x:result href="result-d18054.xml"/>
            <x:test successful="false">
               <x:label>report software-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert software-ref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'software-ref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>publisher-name-tests</x:label>
         <x:scenario>
            <x:label>publisher-name-colon-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/publisher-name-tests/publisher-name-colon/pass.xml"/>
            <x:result href="result-d18063.xml"/>
            <x:test successful="true">
               <x:label>not report publisher-name-colon warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-colon'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert publisher-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>publisher-name-colon-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/publisher-name-tests/publisher-name-colon/fail.xml"/>
            <x:result href="result-d18072.xml"/>
            <x:test successful="false">
               <x:label>report publisher-name-colon warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-colon'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert publisher-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>publisher-name-inc-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/publisher-name-tests/publisher-name-inc/pass.xml"/>
            <x:result href="result-d18081.xml"/>
            <x:test successful="true">
               <x:label>not report publisher-name-inc warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-inc'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert publisher-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>publisher-name-inc-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/publisher-name-tests/publisher-name-inc/fail.xml"/>
            <x:result href="result-d18090.xml"/>
            <x:test successful="false">
               <x:label>report publisher-name-inc warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-inc'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert publisher-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-name-replacement-character-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/publisher-name-tests/pub-name-replacement-character-presence/pass.xml"/>
            <x:result href="result-d18099.xml"/>
            <x:test successful="true">
               <x:label>not report pub-name-replacement-character-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-name-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert publisher-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pub-name-replacement-character-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/publisher-name-tests/pub-name-replacement-character-presence/fail.xml"/>
            <x:result href="result-d18108.xml"/>
            <x:test successful="false">
               <x:label>report pub-name-replacement-character-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pub-name-replacement-character-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert publisher-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'publisher-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref-name-tests</x:label>
         <x:scenario>
            <x:label>author-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/author-test-1/pass.xml"/>
            <x:result href="result-d18117.xml"/>
            <x:test successful="true">
               <x:label>not report author-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/author-test-1/fail.xml"/>
            <x:result href="result-d18126.xml"/>
            <x:test successful="false">
               <x:label>report author-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/author-test-2/pass.xml"/>
            <x:result href="result-d18135.xml"/>
            <x:test successful="true">
               <x:label>not report author-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/author-test-2/fail.xml"/>
            <x:result href="result-d18144.xml"/>
            <x:test successful="false">
               <x:label>report author-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/author-test-3/pass.xml"/>
            <x:result href="result-d18153.xml"/>
            <x:test successful="true">
               <x:label>not report author-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>author-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/author-test-3/fail.xml"/>
            <x:result href="result-d18162.xml"/>
            <x:test successful="false">
               <x:label>report author-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'author-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>all-caps-surname-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/all-caps-surname/pass.xml"/>
            <x:result href="result-d18171.xml"/>
            <x:test successful="true">
               <x:label>not report all-caps-surname warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'all-caps-surname'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>all-caps-surname-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/all-caps-surname/fail.xml"/>
            <x:result href="result-d18180.xml"/>
            <x:test successful="false">
               <x:label>report all-caps-surname warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'all-caps-surname'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-number-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/surname-number-check/pass.xml"/>
            <x:result href="result-d18189.xml"/>
            <x:test successful="true">
               <x:label>not report surname-number-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-number-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>surname-number-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-name-tests/surname-number-check/fail.xml"/>
            <x:result href="result-d18198.xml"/>
            <x:test successful="false">
               <x:label>report surname-number-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'surname-number-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-name-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-name-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>isbn-conformity</x:label>
         <x:scenario>
            <x:label>isbn-conformity-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/isbn-conformity/isbn-conformity-test/pass.xml"/>
            <x:result href="result-d18207.xml"/>
            <x:test successful="true">
               <x:label>not assert isbn-conformity-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert isbn-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>isbn-conformity-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/isbn-conformity/isbn-conformity-test/fail.xml"/>
            <x:result href="result-d18216.xml"/>
            <x:test successful="true">
               <x:label>assert isbn-conformity-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert isbn-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>isbn-conformity-2</x:label>
         <x:scenario>
            <x:label>isbn-conformity-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/isbn-conformity-2/isbn-conformity-test-2/pass.xml"/>
            <x:result href="result-d18225.xml"/>
            <x:test successful="true">
               <x:label>not assert isbn-conformity-test-2 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert isbn-conformity-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>isbn-conformity-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/isbn-conformity-2/isbn-conformity-test-2/fail.xml"/>
            <x:result href="result-d18234.xml"/>
            <x:test successful="true">
               <x:label>assert isbn-conformity-test-2 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert isbn-conformity-2-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'isbn-conformity-2-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>data-availability-statement</x:label>
         <x:scenario>
            <x:label>das-sentence-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-sentence-conformity/pass.xml"/>
            <x:result href="result-d18243.xml"/>
            <x:test successful="true">
               <x:label>not assert das-sentence-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-sentence-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-sentence-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-sentence-conformity/fail.xml"/>
            <x:result href="result-d18252.xml"/>
            <x:test successful="true">
               <x:label>assert das-sentence-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-sentence-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-dryad-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-dryad-conformity/pass.xml"/>
            <x:result href="result-d18261.xml"/>
            <x:test successful="true">
               <x:label>not report das-dryad-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-dryad-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-dryad-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-dryad-conformity/fail.xml"/>
            <x:result href="result-d18270.xml"/>
            <x:test successful="true">
               <x:label>report das-dryad-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-dryad-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-supplemental-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-supplemental-conformity/pass.xml"/>
            <x:result href="result-d18279.xml"/>
            <x:test successful="true">
               <x:label>not report das-supplemental-conformity warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-supplemental-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-supplemental-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-supplemental-conformity/fail.xml"/>
            <x:result href="result-d18288.xml"/>
            <x:test successful="true">
               <x:label>report das-supplemental-conformity warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-supplemental-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-request-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-request-conformity-1/pass.xml"/>
            <x:result href="result-d18297.xml"/>
            <x:test successful="true">
               <x:label>not report das-request-conformity-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-request-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-request-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-request-conformity-1/fail.xml"/>
            <x:result href="result-d18306.xml"/>
            <x:test successful="true">
               <x:label>report das-request-conformity-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-request-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-doi-conformity-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-doi-conformity-1/pass.xml"/>
            <x:result href="result-d18315.xml"/>
            <x:test successful="true">
               <x:label>not report das-doi-conformity-1 error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-doi-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>das-doi-conformity-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/data-availability-statement/das-doi-conformity-1/fail.xml"/>
            <x:result href="result-d18324.xml"/>
            <x:test successful="true">
               <x:label>report das-doi-conformity-1 error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'das-doi-conformity-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert data-availability-statement-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'data-availability-statement-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ethics-info</x:label>
         <x:scenario>
            <x:label>ethics-info-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-info/ethics-info-conformity/pass.xml"/>
            <x:result href="result-d18333.xml"/>
            <x:test successful="true">
               <x:label>not assert ethics-info-conformity error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-info-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-info-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-info/ethics-info-conformity/fail.xml"/>
            <x:result href="result-d18342.xml"/>
            <x:test successful="true">
               <x:label>assert ethics-info-conformity error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-info-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-info-supplemental-conformity-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-info/ethics-info-supplemental-conformity/pass.xml"/>
            <x:result href="result-d18351.xml"/>
            <x:test successful="true">
               <x:label>not report ethics-info-supplemental-conformity warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-supplemental-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-info-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ethics-info-supplemental-conformity-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ethics-info/ethics-info-supplemental-conformity/fail.xml"/>
            <x:result href="result-d18360.xml"/>
            <x:test successful="true">
               <x:label>report ethics-info-supplemental-conformity warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-supplemental-conformity'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert ethics-info-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ethics-info-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>sec-title-conformity</x:label>
         <x:scenario>
            <x:label>sec-title-list-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-list-check/pass.xml"/>
            <x:result href="result-d18369.xml"/>
            <x:test successful="true">
               <x:label>not report sec-title-list-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-list-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-title-list-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-list-check/fail.xml"/>
            <x:result href="result-d18378.xml"/>
            <x:test successful="false">
               <x:label>report sec-title-list-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-list-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-title-appendix-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-appendix-check/pass.xml"/>
            <x:result href="result-d18387.xml"/>
            <x:test successful="true">
               <x:label>not report sec-title-appendix-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-appendix-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-title-appendix-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-appendix-check/fail.xml"/>
            <x:result href="result-d18396.xml"/>
            <x:test successful="false">
               <x:label>report sec-title-appendix-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-appendix-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-title-abbr-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-abbr-check/pass.xml"/>
            <x:result href="result-d18405.xml"/>
            <x:test successful="true">
               <x:label>not report sec-title-abbr-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-abbr-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sec-title-abbr-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/sec-title-conformity/sec-title-abbr-check/fail.xml"/>
            <x:result href="result-d18414.xml"/>
            <x:test successful="false">
               <x:label>report sec-title-abbr-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-abbr-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert sec-title-conformity-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sec-title-conformity-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>abstract-house-tests</x:label>
         <x:scenario>
            <x:label>xref-bibr-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-house-tests/xref-bibr-presence/pass.xml"/>
            <x:result href="result-d18423.xml"/>
            <x:test successful="true">
               <x:label>not report xref-bibr-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-bibr-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-house-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-house-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-bibr-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-house-tests/xref-bibr-presence/fail.xml"/>
            <x:result href="result-d18432.xml"/>
            <x:test successful="true">
               <x:label>report xref-bibr-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-bibr-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-house-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-house-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>res-comm-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-house-tests/res-comm-test/pass.xml"/>
            <x:result href="result-d18441.xml"/>
            <x:test successful="true">
               <x:label>not report res-comm-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'res-comm-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-house-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-house-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>res-comm-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-house-tests/res-comm-test/fail.xml"/>
            <x:result href="result-d18450.xml"/>
            <x:test successful="true">
               <x:label>report res-comm-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'res-comm-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-house-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-house-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>res-art-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-house-tests/res-art-test/pass.xml"/>
            <x:result href="result-d18459.xml"/>
            <x:test successful="true">
               <x:label>not report res-art-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'res-art-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-house-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-house-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>res-art-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/abstract-house-tests/res-art-test/fail.xml"/>
            <x:result href="result-d18468.xml"/>
            <x:test successful="true">
               <x:label>report res-art-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'res-art-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert abstract-house-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'abstract-house-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>KRT-xref-tests</x:label>
         <x:scenario>
            <x:label>xref-colum-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-xref-tests/xref-colum-test/pass.xml"/>
            <x:result href="result-d18477.xml"/>
            <x:test successful="true">
               <x:label>not report xref-colum-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-colum-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert KRT-xref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-xref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-colum-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-xref-tests/xref-colum-test/fail.xml"/>
            <x:result href="result-d18486.xml"/>
            <x:test successful="false">
               <x:label>report xref-colum-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-colum-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert KRT-xref-tests-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-xref-tests-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>KRT-check</x:label>
         <x:scenario>
            <x:label>KRT-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-check/KRT-presence/pass.xml"/>
            <x:result href="result-d18495.xml"/>
            <x:test successful="true">
               <x:label>not report KRT-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>KRT-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-check/KRT-presence/fail.xml"/>
            <x:result href="result-d18504.xml"/>
            <x:test successful="true">
               <x:label>report KRT-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>KRT-td-checks</x:label>
         <x:scenario>
            <x:label>doi-link-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-td-checks/doi-link-test/pass.xml"/>
            <x:result href="result-d18513.xml"/>
            <x:test successful="true">
               <x:label>not report doi-link-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'doi-link-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-td-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-td-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>doi-link-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-td-checks/doi-link-test/fail.xml"/>
            <x:result href="result-d18522.xml"/>
            <x:test successful="true">
               <x:label>report doi-link-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'doi-link-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-td-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-td-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PMID-link-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-td-checks/PMID-link-test/pass.xml"/>
            <x:result href="result-d18531.xml"/>
            <x:test successful="true">
               <x:label>not report PMID-link-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PMID-link-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-td-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-td-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PMID-link-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-td-checks/PMID-link-test/fail.xml"/>
            <x:result href="result-d18540.xml"/>
            <x:test successful="true">
               <x:label>report PMID-link-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PMID-link-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-td-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-td-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PMCID-link-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-td-checks/PMCID-link-test/pass.xml"/>
            <x:result href="result-d18549.xml"/>
            <x:test successful="true">
               <x:label>not report PMCID-link-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PMCID-link-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-td-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-td-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>PMCID-link-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/KRT-td-checks/PMCID-link-test/fail.xml"/>
            <x:result href="result-d18558.xml"/>
            <x:test successful="true">
               <x:label>report PMCID-link-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'PMCID-link-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert KRT-td-checks-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'KRT-td-checks-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>colour-table</x:label>
         <x:scenario>
            <x:label>colour-check-table-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/colour-table/colour-check-table/pass.xml"/>
            <x:result href="result-d18567.xml"/>
            <x:test successful="true">
               <x:label>not report colour-check-table warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-check-table'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert colour-table-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-table-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>colour-check-table-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/colour-table/colour-check-table/fail.xml"/>
            <x:result href="result-d18576.xml"/>
            <x:test successful="true">
               <x:label>report colour-check-table warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-check-table'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert colour-table-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-table-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>colour-named-content</x:label>
         <x:scenario>
            <x:label>colour-named-content-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/colour-named-content/colour-named-content-check/pass.xml"/>
            <x:result href="result-d18585.xml"/>
            <x:test successful="true">
               <x:label>not report colour-named-content-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-named-content-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert colour-named-content-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-named-content-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>colour-named-content-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/colour-named-content/colour-named-content-check/fail.xml"/>
            <x:result href="result-d18594.xml"/>
            <x:test successful="false">
               <x:label>report colour-named-content-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-named-content-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert colour-named-content-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-named-content-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>colour-styled-content</x:label>
         <x:scenario>
            <x:label>colour-styled-content-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/colour-styled-content/colour-styled-content-check/pass.xml"/>
            <x:result href="result-d18603.xml"/>
            <x:test successful="true">
               <x:label>not report colour-styled-content-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-styled-content-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert colour-styled-content-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-styled-content-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>colour-styled-content-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/colour-styled-content/colour-styled-content-check/fail.xml"/>
            <x:result href="result-d18612.xml"/>
            <x:test successful="false">
               <x:label>report colour-styled-content-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-styled-content-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert colour-styled-content-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'colour-styled-content-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>p-punctuation</x:label>
         <x:scenario>
            <x:label>p-punctuation-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-punctuation/p-punctuation-test/pass.xml"/>
            <x:result href="result-d18621.xml"/>
            <x:test successful="true">
               <x:label>not report p-punctuation-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-punctuation-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-punctuation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-punctuation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-punctuation-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-punctuation/p-punctuation-test/fail.xml"/>
            <x:result href="result-d18630.xml"/>
            <x:test successful="false">
               <x:label>report p-punctuation-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-punctuation-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-punctuation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-punctuation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-bracket-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-punctuation/p-bracket-test/pass.xml"/>
            <x:result href="result-d18639.xml"/>
            <x:test successful="true">
               <x:label>not report p-bracket-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-bracket-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-punctuation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-punctuation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>p-bracket-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/p-punctuation/p-bracket-test/fail.xml"/>
            <x:result href="result-d18648.xml"/>
            <x:test successful="false">
               <x:label>report p-bracket-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-bracket-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert p-punctuation-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'p-punctuation-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>italic-house-style</x:label>
         <x:scenario>
            <x:label>et-al-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/et-al-italic-test/pass.xml"/>
            <x:result href="result-d18657.xml"/>
            <x:test successful="true">
               <x:label>not report et-al-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'et-al-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>et-al-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/et-al-italic-test/fail.xml"/>
            <x:result href="result-d18666.xml"/>
            <x:test successful="true">
               <x:label>report et-al-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'et-al-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-vitro-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-vitro-italic-test/pass.xml"/>
            <x:result href="result-d18675.xml"/>
            <x:test successful="true">
               <x:label>not report in-vitro-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-vitro-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-vitro-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-vitro-italic-test/fail.xml"/>
            <x:result href="result-d18684.xml"/>
            <x:test successful="true">
               <x:label>report in-vitro-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-vitro-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-vivo-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-vivo-italic-test/pass.xml"/>
            <x:result href="result-d18693.xml"/>
            <x:test successful="true">
               <x:label>not report in-vivo-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-vivo-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-vivo-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-vivo-italic-test/fail.xml"/>
            <x:result href="result-d18702.xml"/>
            <x:test successful="true">
               <x:label>report in-vivo-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-vivo-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ex-vivo-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/ex-vivo-italic-test/pass.xml"/>
            <x:result href="result-d18711.xml"/>
            <x:test successful="true">
               <x:label>not report ex-vivo-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ex-vivo-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ex-vivo-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/ex-vivo-italic-test/fail.xml"/>
            <x:result href="result-d18720.xml"/>
            <x:test successful="true">
               <x:label>report ex-vivo-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ex-vivo-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>a-priori-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/a-priori-italic-test/pass.xml"/>
            <x:result href="result-d18729.xml"/>
            <x:test successful="true">
               <x:label>not report a-priori-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'a-priori-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>a-priori-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/a-priori-italic-test/fail.xml"/>
            <x:result href="result-d18738.xml"/>
            <x:test successful="true">
               <x:label>report a-priori-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'a-priori-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>a-posteriori-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/a-posteriori-italic-test/pass.xml"/>
            <x:result href="result-d18747.xml"/>
            <x:test successful="true">
               <x:label>not report a-posteriori-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'a-posteriori-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>a-posteriori-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/a-posteriori-italic-test/fail.xml"/>
            <x:result href="result-d18756.xml"/>
            <x:test successful="true">
               <x:label>report a-posteriori-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'a-posteriori-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>de-novo-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/de-novo-italic-test/pass.xml"/>
            <x:result href="result-d18765.xml"/>
            <x:test successful="true">
               <x:label>not report de-novo-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'de-novo-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>de-novo-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/de-novo-italic-test/fail.xml"/>
            <x:result href="result-d18774.xml"/>
            <x:test successful="true">
               <x:label>report de-novo-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'de-novo-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-utero-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-utero-italic-test/pass.xml"/>
            <x:result href="result-d18783.xml"/>
            <x:test successful="true">
               <x:label>not report in-utero-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-utero-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-utero-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-utero-italic-test/fail.xml"/>
            <x:result href="result-d18792.xml"/>
            <x:test successful="true">
               <x:label>report in-utero-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-utero-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-natura-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-natura-italic-test/pass.xml"/>
            <x:result href="result-d18801.xml"/>
            <x:test successful="true">
               <x:label>not report in-natura-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-natura-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-natura-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-natura-italic-test/fail.xml"/>
            <x:result href="result-d18810.xml"/>
            <x:test successful="true">
               <x:label>report in-natura-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-natura-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-situ-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-situ-italic-test/pass.xml"/>
            <x:result href="result-d18819.xml"/>
            <x:test successful="true">
               <x:label>not report in-situ-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-situ-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>in-situ-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/in-situ-italic-test/fail.xml"/>
            <x:result href="result-d18828.xml"/>
            <x:test successful="true">
               <x:label>report in-situ-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'in-situ-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>rete-mirabile-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/rete-mirabile-italic-test/pass.xml"/>
            <x:result href="result-d18837.xml"/>
            <x:test successful="true">
               <x:label>not report rete-mirabile-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rete-mirabile-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>rete-mirabile-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/rete-mirabile-italic-test/fail.xml"/>
            <x:result href="result-d18846.xml"/>
            <x:test successful="true">
               <x:label>report rete-mirabile-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'rete-mirabile-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nomen-novum-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/nomen-novum-italic-test/pass.xml"/>
            <x:result href="result-d18855.xml"/>
            <x:test successful="true">
               <x:label>not report nomen-novum-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nomen-novum-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>nomen-novum-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/nomen-novum-italic-test/fail.xml"/>
            <x:result href="result-d18864.xml"/>
            <x:test successful="true">
               <x:label>report nomen-novum-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'nomen-novum-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sativum-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/sativum-italic-test/pass.xml"/>
            <x:result href="result-d18873.xml"/>
            <x:test successful="true">
               <x:label>not report sativum-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sativum-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sativum-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/sativum-italic-test/fail.xml"/>
            <x:result href="result-d18882.xml"/>
            <x:test successful="true">
               <x:label>report sativum-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sativum-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sensu-italic-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/sensu-italic-test/pass.xml"/>
            <x:result href="result-d18891.xml"/>
            <x:test successful="true">
               <x:label>not report sensu-italic-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sensu-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>sensu-italic-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/italic-house-style/sensu-italic-test/fail.xml"/>
            <x:result href="result-d18900.xml"/>
            <x:test successful="true">
               <x:label>report sensu-italic-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'sensu-italic-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert italic-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'italic-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>list-house-style</x:label>
         <x:scenario>
            <x:label>list-type-house-style-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-house-style/list-type-house-style-test/pass.xml"/>
            <x:result href="result-d18909.xml"/>
            <x:test successful="true">
               <x:label>not assert list-type-house-style-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-type-house-style-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>list-type-house-style-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/list-house-style/list-type-house-style-test/fail.xml"/>
            <x:result href="result-d18918.xml"/>
            <x:test successful="true">
               <x:label>assert list-type-house-style-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-type-house-style-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert list-house-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'list-house-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>pubmed-link</x:label>
         <x:scenario>
            <x:label>pubmed-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pubmed-link/pubmed-presence/pass.xml"/>
            <x:result href="result-d18927.xml"/>
            <x:test successful="true">
               <x:label>not report pubmed-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pubmed-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pubmed-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pubmed-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pubmed-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pubmed-link/pubmed-presence/fail.xml"/>
            <x:result href="result-d18936.xml"/>
            <x:test successful="false">
               <x:label>report pubmed-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pubmed-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pubmed-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pubmed-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pmc-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pubmed-link/pmc-presence/pass.xml"/>
            <x:result href="result-d18945.xml"/>
            <x:test successful="true">
               <x:label>not report pmc-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pmc-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pubmed-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pubmed-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pmc-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/pubmed-link/pmc-presence/fail.xml"/>
            <x:result href="result-d18954.xml"/>
            <x:test successful="false">
               <x:label>report pmc-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pmc-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert pubmed-link-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pubmed-link-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref-link-mandate</x:label>
         <x:scenario>
            <x:label>pre-ref-link-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-link-mandate/pre-ref-link-presence/pass.xml"/>
            <x:result href="result-d18963.xml"/>
            <x:test successful="true">
               <x:label>not assert pre-ref-link-presence warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-ref-link-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-link-mandate-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-link-mandate-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>pre-ref-link-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-link-mandate/pre-ref-link-presence/fail.xml"/>
            <x:result href="result-d18972.xml"/>
            <x:test successful="false">
               <x:label>assert pre-ref-link-presence warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'pre-ref-link-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-link-mandate-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-link-mandate-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-ref-link-presence-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-link-mandate/final-ref-link-presence/pass.xml"/>
            <x:result href="result-d18981.xml"/>
            <x:test successful="true">
               <x:label>not assert final-ref-link-presence error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-ref-link-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-link-mandate-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-link-mandate-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>final-ref-link-presence-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-link-mandate/final-ref-link-presence/fail.xml"/>
            <x:result href="result-d18990.xml"/>
            <x:test successful="false">
               <x:label>assert final-ref-link-presence error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'final-ref-link-presence'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-link-mandate-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-link-mandate-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>fig-permissions-check</x:label>
         <x:scenario>
            <x:label>reproduce-test-1-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-1/pass.xml"/>
            <x:result href="result-d18999.xml"/>
            <x:test successful="true">
               <x:label>not report reproduce-test-1 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-1-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-1/fail.xml"/>
            <x:result href="result-d19008.xml"/>
            <x:test successful="true">
               <x:label>report reproduce-test-1 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-1'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-2-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-2/pass.xml"/>
            <x:result href="result-d19017.xml"/>
            <x:test successful="true">
               <x:label>not report reproduce-test-2 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-2-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-2/fail.xml"/>
            <x:result href="result-d19026.xml"/>
            <x:test successful="true">
               <x:label>report reproduce-test-2 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-2'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-3-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-3/pass.xml"/>
            <x:result href="result-d19035.xml"/>
            <x:test successful="true">
               <x:label>not report reproduce-test-3 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-3-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-3/fail.xml"/>
            <x:result href="result-d19044.xml"/>
            <x:test successful="true">
               <x:label>report reproduce-test-3 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-3'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-4-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-4/pass.xml"/>
            <x:result href="result-d19053.xml"/>
            <x:test successful="true">
               <x:label>not report reproduce-test-4 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-4-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-4/fail.xml"/>
            <x:result href="result-d19062.xml"/>
            <x:test successful="true">
               <x:label>report reproduce-test-4 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-4'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-5-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-5/pass.xml"/>
            <x:result href="result-d19071.xml"/>
            <x:test successful="true">
               <x:label>not report reproduce-test-5 warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>reproduce-test-5-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/fig-permissions-check/reproduce-test-5/fail.xml"/>
            <x:result href="result-d19080.xml"/>
            <x:test successful="true">
               <x:label>report reproduce-test-5 warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'reproduce-test-5'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert fig-permissions-check-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'fig-permissions-check-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>xref-formatting</x:label>
         <x:scenario>
            <x:label>xref-parent-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-formatting/xref-parent-test/pass.xml"/>
            <x:result href="result-d19089.xml"/>
            <x:test successful="true">
               <x:label>not report xref-parent-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-parent-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-parent-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-formatting/xref-parent-test/fail.xml"/>
            <x:result href="result-d19098.xml"/>
            <x:test successful="false">
               <x:label>report xref-parent-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-parent-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-formatting/xref-child-test/pass.xml"/>
            <x:result href="result-d19107.xml"/>
            <x:test successful="true">
               <x:label>not report xref-child-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>xref-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/xref-formatting/xref-child-test/fail.xml"/>
            <x:result href="result-d19116.xml"/>
            <x:test successful="false">
               <x:label>report xref-child-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>ref-xref-formatting</x:label>
         <x:scenario>
            <x:label>ref-xref-parent-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-formatting/ref-xref-parent-test/pass.xml"/>
            <x:result href="result-d19125.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-parent-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-parent-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-parent-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-formatting/ref-xref-parent-test/fail.xml"/>
            <x:result href="result-d19134.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-parent-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-parent-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-formatting/ref-xref-child-test/pass.xml"/>
            <x:result href="result-d19143.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-child-test error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-formatting/ref-xref-child-test/fail.xml"/>
            <x:result href="result-d19152.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-child-test error</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-italic-child-test-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-formatting/ref-xref-italic-child-test/pass.xml"/>
            <x:result href="result-d19161.xml"/>
            <x:test successful="true">
               <x:label>not report ref-xref-italic-child-test warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-italic-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>ref-xref-italic-child-test-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/ref-xref-formatting/ref-xref-italic-child-test/fail.xml"/>
            <x:result href="result-d19170.xml"/>
            <x:test successful="false">
               <x:label>report ref-xref-italic-child-test warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-italic-child-test'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="false">
               <x:label>not assert ref-xref-formatting-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'ref-xref-formatting-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>code-fork</x:label>
         <x:scenario>
            <x:label>code-fork-info-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/code-fork/code-fork-info/pass.xml"/>
            <x:result href="result-d19179.xml"/>
            <x:test successful="true">
               <x:label>not report code-fork-info warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'code-fork-info'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert code-fork-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'code-fork-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>code-fork-info-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/code-fork/code-fork-info/fail.xml"/>
            <x:result href="result-d19188.xml"/>
            <x:test successful="true">
               <x:label>report code-fork-info warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'code-fork-info'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert code-fork-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'code-fork-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
      <x:scenario>
         <x:label>auth-kwd-style</x:label>
         <x:scenario>
            <x:label>auth-kwd-check-pass</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-kwd-style/auth-kwd-check/pass.xml"/>
            <x:result href="result-d19197.xml"/>
            <x:test successful="true">
               <x:label>not report auth-kwd-check warning</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-kwd-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-kwd-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-kwd-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
         <x:scenario>
            <x:label>auth-kwd-check-fail</x:label>
            <x:context href="file:/Users/fredatherden/Documents/GitHub/eLife-JATS-schematron/tests/auth-kwd-style/auth-kwd-check/fail.xml"/>
            <x:result href="result-d19206.xml"/>
            <x:test successful="true">
               <x:label>report auth-kwd-check warning</x:label>
               <x:expect test="exists(svrl:schematron-output/svrl:successful-report[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-kwd-check'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'warning'])"
                         select="()"/>
            </x:test>
            <x:test successful="true">
               <x:label>not assert auth-kwd-style-xspec-assert error</x:label>
               <x:expect test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[(@id, preceding-sibling::svrl:fired-rule[1]/@id, preceding-sibling::svrl:active-pattern[1]/@id)[1] = 'auth-kwd-style-xspec-assert'][(@role, preceding-sibling::svrl:fired-rule[1]/@role, preceding-sibling::svrl:active-pattern[1]/@role)[1] = 'error'])"
                         select="()"/>
            </x:test>
         </x:scenario>
      </x:scenario>
   </x:scenario>
</x:report>
